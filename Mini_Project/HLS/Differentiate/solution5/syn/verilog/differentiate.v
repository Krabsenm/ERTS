// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.989667,HLS_SYN_LAT=31621,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1693,HLS_SYN_LUT=1265}" *)

module differentiate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_address0,
        img_ce0,
        img_q0,
        img_address1,
        img_ce1,
        img_q1,
        window_V_address0,
        window_V_ce0,
        window_V_q0,
        window_V_address1,
        window_V_ce1,
        window_V_q1,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] img_address0;
output   img_ce0;
input  [7:0] img_q0;
output  [11:0] img_address1;
output   img_ce1;
input  [7:0] img_q1;
output  [3:0] window_V_address0;
output   window_V_ce0;
input  [2:0] window_V_q0;
output  [3:0] window_V_address1;
output   window_V_ce1;
input  [2:0] window_V_q1;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] img_address0;
reg img_ce0;
reg[11:0] img_address1;
reg img_ce1;
reg[3:0] window_V_address0;
reg window_V_ce0;
reg[3:0] window_V_address1;
reg window_V_ce1;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg  signed [2:0] reg_260;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state10;
reg   [7:0] reg_264;
wire    ap_CS_fsm_state9;
reg  signed [2:0] reg_269;
reg   [7:0] reg_274;
wire    ap_CS_fsm_state7;
reg   [7:0] reg_279;
reg   [2:0] reg_283;
wire   [12:0] tmp_8_fu_311_p2;
reg   [12:0] tmp_8_reg_869;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_fu_323_p2;
reg   [5:0] tmp_reg_879;
wire   [0:0] exitcond1_fu_317_p2;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_10_fu_360_p2;
reg   [12:0] tmp_10_reg_891;
wire    ap_CS_fsm_state4;
wire   [11:0] grp_fu_332_p2;
reg   [11:0] tmp_11_reg_898;
wire   [5:0] i_1_fu_366_p2;
reg   [5:0] i_1_reg_903;
wire   [12:0] tmp_14_fu_396_p2;
reg   [12:0] tmp_14_reg_908;
wire    ap_CS_fsm_state5;
reg   [11:0] img_addr_4_reg_920;
reg   [11:0] img_addr_7_reg_925;
wire   [5:0] tmp_2_fu_442_p2;
reg   [5:0] tmp_2_reg_933;
wire   [0:0] exitcond2_fu_436_p2;
wire   [12:0] tmp_20_fu_474_p2;
reg   [12:0] tmp_20_reg_949;
wire   [11:0] tmp_21_fu_479_p2;
reg   [11:0] tmp_21_reg_954;
wire   [5:0] j_1_fu_484_p2;
reg   [5:0] j_1_reg_959;
wire   [12:0] tmp_22_fu_494_p2;
reg   [12:0] tmp_22_reg_964;
wire   [12:0] tmp_23_fu_499_p2;
reg   [12:0] tmp_23_reg_969;
wire   [12:0] tmp_24_fu_504_p2;
reg   [12:0] tmp_24_reg_974;
reg   [2:0] window_V_load_2_reg_989;
reg   [7:0] img_load_3_reg_994;
reg   [2:0] window_V_load_3_reg_999;
wire   [10:0] r_V_fu_525_p2;
reg  signed [10:0] r_V_reg_1004;
wire   [10:0] r_V_1_2_fu_554_p2;
reg  signed [10:0] r_V_1_2_reg_1014;
wire  signed [11:0] grp_fu_808_p3;
reg  signed [11:0] tmp8_reg_1019;
wire  signed [11:0] grp_fu_816_p3;
reg  signed [11:0] tmp1_reg_1030;
reg   [7:0] img_load_8_reg_1036;
wire    ap_CS_fsm_state11;
wire   [10:0] r_V_0_2_fu_582_p2;
reg   [10:0] r_V_0_2_reg_1041;
wire    ap_CS_fsm_state12;
wire   [10:0] r_V_1_fu_594_p2;
reg   [10:0] r_V_1_reg_1046;
wire   [10:0] r_V_2_fu_608_p2;
reg   [10:0] r_V_2_reg_1052;
wire   [10:0] r_V_2_1_fu_622_p2;
reg   [10:0] r_V_2_1_reg_1058;
wire   [10:0] r_V_2_2_fu_635_p2;
reg   [10:0] r_V_2_2_reg_1063;
wire   [12:0] tmp7_fu_675_p2;
reg   [12:0] tmp7_reg_1068;
wire    ap_CS_fsm_state13;
wire   [13:0] tmp4_fu_704_p2;
reg   [13:0] tmp4_reg_1073;
wire   [12:0] tmp10_fu_723_p2;
reg   [12:0] tmp10_reg_1078;
wire   [13:0] tmp14_fu_752_p2;
reg   [13:0] tmp14_reg_1083;
wire   [14:0] tmp_5_fu_796_p3;
reg   [14:0] tmp_5_reg_1088;
wire    ap_CS_fsm_state14;
reg   [5:0] i_reg_236;
reg   [5:0] j_reg_248;
wire    ap_CS_fsm_state15;
wire  signed [31:0] tmp_16_cast_fu_411_p1;
wire  signed [31:0] tmp_17_cast_fu_421_p1;
wire  signed [31:0] tmp_18_cast_fu_431_p1;
wire  signed [31:0] tmp_19_cast_fu_459_p1;
wire  signed [31:0] tmp_20_cast_fu_469_p1;
wire  signed [31:0] tmp_23_cast_fu_509_p1;
wire  signed [31:0] tmp_24_cast_fu_513_p1;
wire  signed [31:0] tmp_21_cast_fu_531_p1;
wire  signed [31:0] tmp_25_cast_fu_560_p1;
wire   [31:0] tmp_22_cast_fu_804_p1;
wire   [11:0] tmp_6_fu_287_p3;
wire   [9:0] tmp_7_fu_299_p3;
wire   [12:0] p_shl_cast_fu_295_p1;
wire   [12:0] p_shl1_cast_fu_307_p1;
wire   [5:0] grp_fu_332_p0;
wire   [6:0] grp_fu_332_p1;
wire   [11:0] tmp_9_fu_338_p3;
wire   [9:0] tmp_3_fu_349_p3;
wire   [12:0] p_shl4_cast_fu_345_p1;
wire   [12:0] p_shl5_cast_fu_356_p1;
wire   [11:0] tmp_12_fu_372_p3;
wire   [9:0] tmp_13_fu_384_p3;
wire   [12:0] p_shl2_cast_fu_380_p1;
wire   [12:0] p_shl3_cast_fu_392_p1;
wire   [12:0] j_cast_cast_fu_402_p1;
wire   [12:0] tmp_15_fu_406_p2;
wire   [12:0] tmp_16_fu_416_p2;
wire   [12:0] tmp_17_fu_426_p2;
wire   [12:0] tmp_2_cast_cast_fu_451_p1;
wire   [12:0] tmp_18_fu_454_p2;
wire   [12:0] tmp_19_fu_464_p2;
wire   [11:0] tmp_2_cast_cast6_fu_448_p1;
wire   [12:0] j_1_cast_cast_fu_490_p1;
wire  signed [2:0] r_V_fu_525_p0;
wire   [7:0] r_V_fu_525_p1;
wire  signed [2:0] r_V_1_2_fu_554_p0;
wire   [7:0] r_V_1_2_fu_554_p1;
wire  signed [2:0] r_V_0_2_fu_582_p0;
wire   [7:0] r_V_0_2_fu_582_p1;
wire  signed [2:0] r_V_1_fu_594_p0;
wire   [7:0] r_V_1_fu_594_p1;
wire  signed [2:0] r_V_2_fu_608_p0;
wire   [7:0] r_V_2_fu_608_p1;
wire  signed [2:0] r_V_2_1_fu_622_p0;
wire   [7:0] r_V_2_1_fu_622_p1;
wire  signed [2:0] r_V_2_2_fu_635_p0;
wire   [7:0] r_V_2_2_fu_635_p1;
wire  signed [11:0] tmp_1_cast_fu_644_p1;
wire  signed [11:0] tmp_0_2_cast_fu_641_p1;
wire   [11:0] tmp9_fu_665_p2;
wire  signed [12:0] tmp8_cast_fu_662_p1;
wire  signed [12:0] tmp9_cast_fu_671_p1;
wire  signed [11:0] tmp_2_2_cast_fu_659_p1;
wire  signed [11:0] tmp_2_1_cast_fu_656_p1;
wire   [11:0] tmp2_fu_684_p2;
wire  signed [12:0] tmp_2_cast_fu_650_p1;
wire  signed [12:0] tmp13_cast_fu_690_p1;
wire   [12:0] tmp3_fu_694_p2;
wire  signed [13:0] tmp11_cast_fu_681_p1;
wire  signed [13:0] tmp12_cast_fu_700_p1;
wire  signed [11:0] tmp_15_cast_fu_653_p1;
wire   [11:0] tmp5_fu_710_p2;
wire  signed [12:0] tmp15_cast_fu_716_p1;
wire  signed [12:0] tmp16_cast_fu_720_p1;
wire   [11:0] tmp12_fu_732_p2;
wire  signed [12:0] tmp_8_cast_fu_647_p1;
wire  signed [12:0] tmp20_cast_fu_738_p1;
wire   [12:0] tmp13_fu_742_p2;
wire  signed [13:0] tmp18_cast_fu_729_p1;
wire  signed [13:0] tmp19_cast_fu_748_p1;
wire  signed [14:0] tmp7_cast_fu_758_p1;
wire  signed [14:0] tmp10_cast_fu_761_p1;
wire   [14:0] temp_result_V_1_2_2_fu_764_p2;
wire  signed [14:0] tmp14_cast_fu_778_p1;
wire  signed [14:0] tmp17_cast_fu_781_p1;
wire   [14:0] tmp_s_fu_784_p2;
wire   [0:0] tmp_25_fu_770_p3;
wire   [14:0] tmp_4_fu_790_p2;
wire   [7:0] grp_fu_808_p1;
wire   [7:0] grp_fu_816_p1;
reg   [14:0] ap_NS_fsm;
wire   [11:0] grp_fu_332_p00;
wire   [10:0] grp_fu_808_p10;
wire   [10:0] grp_fu_816_p10;
wire   [10:0] r_V_0_2_fu_582_p10;
wire   [10:0] r_V_1_2_fu_554_p10;
wire   [10:0] r_V_1_fu_594_p10;
wire   [10:0] r_V_2_1_fu_622_p10;
wire   [10:0] r_V_2_2_fu_635_p10;
wire   [10:0] r_V_2_fu_608_p10;
wire   [10:0] r_V_fu_525_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

differentiate_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
differentiate_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_332_p0),
    .din1(grp_fu_332_p1),
    .ce(1'b1),
    .dout(grp_fu_332_p2)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U1(
    .din0(reg_269),
    .din1(grp_fu_808_p1),
    .din2(r_V_reg_1004),
    .dout(grp_fu_808_p3)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U2(
    .din0(reg_260),
    .din1(grp_fu_816_p1),
    .din2(r_V_1_2_reg_1014),
    .dout(grp_fu_816_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_436_p2 == 1'd1))) begin
        i_reg_236 <= i_1_reg_903;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_236 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_reg_248 <= j_1_reg_959;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_248 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_264 <= img_q1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_264 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        reg_269 <= window_V_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        reg_269 <= window_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reg_274 <= img_q1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_274 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_903 <= i_1_fu_366_p2;
        tmp_10_reg_891[12 : 4] <= tmp_10_fu_360_p2[12 : 4];
        tmp_11_reg_898 <= grp_fu_332_p2;
        tmp_14_reg_908[12 : 4] <= tmp_14_fu_396_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_addr_4_reg_920 <= tmp_17_cast_fu_421_p1;
        img_addr_7_reg_925 <= tmp_18_cast_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_load_3_reg_994 <= img_q1;
        window_V_load_2_reg_989 <= window_V_q0;
        window_V_load_3_reg_999 <= window_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        img_load_8_reg_1036 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_959 <= j_1_fu_484_p2;
        tmp_20_reg_949 <= tmp_20_fu_474_p2;
        tmp_21_reg_954 <= tmp_21_fu_479_p2;
        tmp_22_reg_964 <= tmp_22_fu_494_p2;
        tmp_23_reg_969 <= tmp_23_fu_499_p2;
        tmp_24_reg_974 <= tmp_24_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        r_V_0_2_reg_1041 <= r_V_0_2_fu_582_p2;
        r_V_1_reg_1046 <= r_V_1_fu_594_p2;
        r_V_2_1_reg_1058 <= r_V_2_1_fu_622_p2;
        r_V_2_2_reg_1063 <= r_V_2_2_fu_635_p2;
        r_V_2_reg_1052 <= r_V_2_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_V_1_2_reg_1014 <= r_V_1_2_fu_554_p2;
        tmp8_reg_1019 <= grp_fu_808_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        r_V_reg_1004 <= r_V_fu_525_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_260 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_279 <= img_q0;
        reg_283 <= window_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp10_reg_1078 <= tmp10_fu_723_p2;
        tmp14_reg_1083 <= tmp14_fu_752_p2;
        tmp4_reg_1073 <= tmp4_fu_704_p2;
        tmp7_reg_1068 <= tmp7_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp1_reg_1030 <= grp_fu_816_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_436_p2))) begin
        tmp_2_reg_933 <= tmp_2_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_5_reg_1088 <= tmp_5_fu_796_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_8_reg_869[12 : 4] <= tmp_8_fu_311_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_317_p2 == 1'd0))) begin
        tmp_reg_879 <= tmp_fu_323_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_317_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_317_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_address0 = tmp_25_cast_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        img_address0 = img_addr_7_reg_925;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        img_address0 = tmp_24_cast_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        img_address0 = tmp_19_cast_fu_459_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        img_address0 = tmp_16_cast_fu_411_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        img_address1 = tmp_21_cast_fu_531_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        img_address1 = img_addr_4_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        img_address1 = tmp_23_cast_fu_509_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        img_address1 = tmp_20_cast_fu_469_p1;
    end else begin
        img_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        img_ce1 = 1'b1;
    end else begin
        img_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        window_V_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_V_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        window_V_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        window_V_address0 = 32'd0;
    end else begin
        window_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_V_address1 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_address1 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        window_V_address1 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        window_V_address1 = 32'd1;
    end else begin
        window_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        window_V_ce1 = 1'b1;
    end else begin
        window_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_436_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_317_p2 = ((i_reg_236 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_436_p2 = ((j_reg_248 == 6'd47) ? 1'b1 : 1'b0);

assign grp_fu_332_p0 = grp_fu_332_p00;

assign grp_fu_332_p00 = tmp_reg_879;

assign grp_fu_332_p1 = 12'd46;

assign grp_fu_808_p1 = grp_fu_808_p10;

assign grp_fu_808_p10 = reg_264;

assign grp_fu_816_p1 = grp_fu_816_p10;

assign grp_fu_816_p10 = reg_264;

assign i_1_fu_366_p2 = (i_reg_236 + 6'd1);

assign j_1_cast_cast_fu_490_p1 = j_1_fu_484_p2;

assign j_1_fu_484_p2 = (j_reg_248 + 6'd1);

assign j_cast_cast_fu_402_p1 = j_reg_248;

assign p_shl1_cast_fu_307_p1 = tmp_7_fu_299_p3;

assign p_shl2_cast_fu_380_p1 = tmp_12_fu_372_p3;

assign p_shl3_cast_fu_392_p1 = tmp_13_fu_384_p3;

assign p_shl4_cast_fu_345_p1 = tmp_9_fu_338_p3;

assign p_shl5_cast_fu_356_p1 = tmp_3_fu_349_p3;

assign p_shl_cast_fu_295_p1 = tmp_6_fu_287_p3;

assign r_V_0_2_fu_582_p0 = window_V_load_2_reg_989;

assign r_V_0_2_fu_582_p1 = r_V_0_2_fu_582_p10;

assign r_V_0_2_fu_582_p10 = reg_274;

assign r_V_0_2_fu_582_p2 = ($signed(r_V_0_2_fu_582_p0) * $signed({{1'b0}, {r_V_0_2_fu_582_p1}}));

assign r_V_1_2_fu_554_p0 = reg_283;

assign r_V_1_2_fu_554_p1 = r_V_1_2_fu_554_p10;

assign r_V_1_2_fu_554_p10 = reg_279;

assign r_V_1_2_fu_554_p2 = ($signed(r_V_1_2_fu_554_p0) * $signed({{1'b0}, {r_V_1_2_fu_554_p1}}));

assign r_V_1_fu_594_p0 = window_V_load_3_reg_999;

assign r_V_1_fu_594_p1 = r_V_1_fu_594_p10;

assign r_V_1_fu_594_p10 = img_load_3_reg_994;

assign r_V_1_fu_594_p2 = ($signed(r_V_1_fu_594_p0) * $signed({{1'b0}, {r_V_1_fu_594_p1}}));

assign r_V_2_1_fu_622_p0 = reg_283;

assign r_V_2_1_fu_622_p1 = r_V_2_1_fu_622_p10;

assign r_V_2_1_fu_622_p10 = reg_279;

assign r_V_2_1_fu_622_p2 = ($signed(r_V_2_1_fu_622_p0) * $signed({{1'b0}, {r_V_2_1_fu_622_p1}}));

assign r_V_2_2_fu_635_p0 = reg_260;

assign r_V_2_2_fu_635_p1 = r_V_2_2_fu_635_p10;

assign r_V_2_2_fu_635_p10 = img_load_8_reg_1036;

assign r_V_2_2_fu_635_p2 = ($signed(r_V_2_2_fu_635_p0) * $signed({{1'b0}, {r_V_2_2_fu_635_p1}}));

assign r_V_2_fu_608_p0 = reg_269;

assign r_V_2_fu_608_p1 = r_V_2_fu_608_p10;

assign r_V_2_fu_608_p10 = reg_264;

assign r_V_2_fu_608_p2 = ($signed(r_V_2_fu_608_p0) * $signed({{1'b0}, {r_V_2_fu_608_p1}}));

assign r_V_fu_525_p0 = reg_260;

assign r_V_fu_525_p1 = r_V_fu_525_p10;

assign r_V_fu_525_p10 = reg_274;

assign r_V_fu_525_p2 = ($signed(r_V_fu_525_p0) * $signed({{1'b0}, {r_V_fu_525_p1}}));

assign res_V_address0 = tmp_22_cast_fu_804_p1;

assign res_V_d0 = tmp_5_reg_1088;

assign temp_result_V_1_2_2_fu_764_p2 = ($signed(tmp7_cast_fu_758_p1) + $signed(tmp10_cast_fu_761_p1));

assign tmp10_cast_fu_761_p1 = $signed(tmp4_reg_1073);

assign tmp10_fu_723_p2 = ($signed(tmp15_cast_fu_716_p1) + $signed(tmp16_cast_fu_720_p1));

assign tmp11_cast_fu_681_p1 = tmp1_reg_1030;

assign tmp12_cast_fu_700_p1 = $signed(tmp3_fu_694_p2);

assign tmp12_fu_732_p2 = ($signed(tmp_2_2_cast_fu_659_p1) + $signed(tmp_0_2_cast_fu_641_p1));

assign tmp13_cast_fu_690_p1 = $signed(tmp2_fu_684_p2);

assign tmp13_fu_742_p2 = ($signed(tmp_8_cast_fu_647_p1) + $signed(tmp20_cast_fu_738_p1));

assign tmp14_cast_fu_778_p1 = $signed(tmp10_reg_1078);

assign tmp14_fu_752_p2 = ($signed(tmp18_cast_fu_729_p1) + $signed(tmp19_cast_fu_748_p1));

assign tmp15_cast_fu_716_p1 = $signed(tmp5_fu_710_p2);

assign tmp16_cast_fu_720_p1 = tmp1_reg_1030;

assign tmp17_cast_fu_781_p1 = $signed(tmp14_reg_1083);

assign tmp18_cast_fu_729_p1 = tmp8_reg_1019;

assign tmp19_cast_fu_748_p1 = $signed(tmp13_fu_742_p2);

assign tmp20_cast_fu_738_p1 = $signed(tmp12_fu_732_p2);

assign tmp2_fu_684_p2 = ($signed(tmp_2_2_cast_fu_659_p1) + $signed(tmp_2_1_cast_fu_656_p1));

assign tmp3_fu_694_p2 = ($signed(tmp_2_cast_fu_650_p1) + $signed(tmp13_cast_fu_690_p1));

assign tmp4_fu_704_p2 = ($signed(tmp11_cast_fu_681_p1) + $signed(tmp12_cast_fu_700_p1));

assign tmp5_fu_710_p2 = ($signed(tmp_2_1_cast_fu_656_p1) + $signed(tmp_15_cast_fu_653_p1));

assign tmp7_cast_fu_758_p1 = $signed(tmp7_reg_1068);

assign tmp7_fu_675_p2 = ($signed(tmp8_cast_fu_662_p1) + $signed(tmp9_cast_fu_671_p1));

assign tmp8_cast_fu_662_p1 = tmp8_reg_1019;

assign tmp9_cast_fu_671_p1 = $signed(tmp9_fu_665_p2);

assign tmp9_fu_665_p2 = ($signed(tmp_1_cast_fu_644_p1) + $signed(tmp_0_2_cast_fu_641_p1));

assign tmp_0_2_cast_fu_641_p1 = $signed(r_V_0_2_reg_1041);

assign tmp_10_fu_360_p2 = (p_shl4_cast_fu_345_p1 - p_shl5_cast_fu_356_p1);

assign tmp_12_fu_372_p3 = {{i_1_fu_366_p2}, {6'd0}};

assign tmp_13_fu_384_p3 = {{i_1_fu_366_p2}, {4'd0}};

assign tmp_14_fu_396_p2 = (p_shl2_cast_fu_380_p1 - p_shl3_cast_fu_392_p1);

assign tmp_15_cast_fu_653_p1 = $signed(r_V_2_reg_1052);

assign tmp_15_fu_406_p2 = (tmp_10_reg_891 + j_cast_cast_fu_402_p1);

assign tmp_16_cast_fu_411_p1 = $signed(tmp_15_fu_406_p2);

assign tmp_16_fu_416_p2 = (tmp_8_reg_869 + j_cast_cast_fu_402_p1);

assign tmp_17_cast_fu_421_p1 = $signed(tmp_16_fu_416_p2);

assign tmp_17_fu_426_p2 = (tmp_14_reg_908 + j_cast_cast_fu_402_p1);

assign tmp_18_cast_fu_431_p1 = $signed(tmp_17_fu_426_p2);

assign tmp_18_fu_454_p2 = (tmp_10_reg_891 + tmp_2_cast_cast_fu_451_p1);

assign tmp_19_cast_fu_459_p1 = $signed(tmp_18_fu_454_p2);

assign tmp_19_fu_464_p2 = (tmp_8_reg_869 + tmp_2_cast_cast_fu_451_p1);

assign tmp_1_cast_fu_644_p1 = $signed(r_V_1_reg_1046);

assign tmp_20_cast_fu_469_p1 = $signed(tmp_19_fu_464_p2);

assign tmp_20_fu_474_p2 = (tmp_14_reg_908 + tmp_2_cast_cast_fu_451_p1);

assign tmp_21_cast_fu_531_p1 = $signed(tmp_20_reg_949);

assign tmp_21_fu_479_p2 = (tmp_11_reg_898 + tmp_2_cast_cast6_fu_448_p1);

assign tmp_22_cast_fu_804_p1 = tmp_21_reg_954;

assign tmp_22_fu_494_p2 = (tmp_10_reg_891 + j_1_cast_cast_fu_490_p1);

assign tmp_23_cast_fu_509_p1 = $signed(tmp_22_reg_964);

assign tmp_23_fu_499_p2 = (tmp_8_reg_869 + j_1_cast_cast_fu_490_p1);

assign tmp_24_cast_fu_513_p1 = $signed(tmp_23_reg_969);

assign tmp_24_fu_504_p2 = (tmp_14_reg_908 + j_1_cast_cast_fu_490_p1);

assign tmp_25_cast_fu_560_p1 = $signed(tmp_24_reg_974);

assign tmp_25_fu_770_p3 = temp_result_V_1_2_2_fu_764_p2[32'd14];

assign tmp_2_1_cast_fu_656_p1 = $signed(r_V_2_1_reg_1058);

assign tmp_2_2_cast_fu_659_p1 = $signed(r_V_2_2_reg_1063);

assign tmp_2_cast_cast6_fu_448_p1 = tmp_2_reg_933;

assign tmp_2_cast_cast_fu_451_p1 = tmp_2_reg_933;

assign tmp_2_cast_fu_650_p1 = $signed(r_V_2_reg_1052);

assign tmp_2_fu_442_p2 = ($signed(j_reg_248) + $signed(6'd63));

assign tmp_3_fu_349_p3 = {{tmp_reg_879}, {4'd0}};

assign tmp_4_fu_790_p2 = (15'd0 - tmp_s_fu_784_p2);

assign tmp_5_fu_796_p3 = ((tmp_25_fu_770_p3[0:0] === 1'b1) ? tmp_4_fu_790_p2 : tmp_s_fu_784_p2);

assign tmp_6_fu_287_p3 = {{i_reg_236}, {6'd0}};

assign tmp_7_fu_299_p3 = {{i_reg_236}, {4'd0}};

assign tmp_8_cast_fu_647_p1 = $signed(r_V_1_reg_1046);

assign tmp_8_fu_311_p2 = (p_shl_cast_fu_295_p1 - p_shl1_cast_fu_307_p1);

assign tmp_9_fu_338_p3 = {{tmp_reg_879}, {6'd0}};

assign tmp_fu_323_p2 = ($signed(i_reg_236) + $signed(6'd63));

assign tmp_s_fu_784_p2 = ($signed(tmp14_cast_fu_778_p1) + $signed(tmp17_cast_fu_781_p1));

always @ (posedge ap_clk) begin
    tmp_8_reg_869[3:0] <= 4'b0000;
    tmp_10_reg_891[3:0] <= 4'b0000;
    tmp_14_reg_908[3:0] <= 4'b0000;
end

endmodule //differentiate
