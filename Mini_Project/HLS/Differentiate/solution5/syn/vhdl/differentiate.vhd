-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity differentiate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_ce1 : OUT STD_LOGIC;
    img_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    window_V_ce0 : OUT STD_LOGIC;
    window_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    window_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    window_V_ce1 : OUT STD_LOGIC;
    window_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of differentiate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.989667,HLS_SYN_LAT=31621,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1693,HLS_SYN_LUT=1265}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_260 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_269 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_274 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_283 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_311_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_reg_869 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_879 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_10_fu_360_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_reg_891 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_reg_898 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_fu_366_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_903 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_396_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_908 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal img_addr_4_reg_920 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_addr_7_reg_925 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_442_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_933 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_474_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_reg_949 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_479_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_reg_954 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_959 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_fu_494_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_22_reg_964 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_499_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_reg_969 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_504_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_reg_974 : STD_LOGIC_VECTOR (12 downto 0);
    signal window_V_load_2_reg_989 : STD_LOGIC_VECTOR (2 downto 0);
    signal img_load_3_reg_994 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_load_3_reg_999 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_525_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_reg_1004 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_fu_554_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_reg_1014 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_808_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp8_reg_1019 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_1030 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_load_8_reg_1036 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_V_0_2_fu_582_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_0_2_reg_1041 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal r_V_1_fu_594_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_reg_1046 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_608_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_reg_1052 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_fu_622_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_reg_1058 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_fu_635_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_reg_1063 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_fu_675_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_reg_1068 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp4_fu_704_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_reg_1073 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_fu_723_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp10_reg_1078 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp14_fu_752_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp14_reg_1083 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_796_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_1088 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_reg_236 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_248 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_16_cast_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_509_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_531_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_287_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_299_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_295_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_307_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_338_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_349_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_345_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_356_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_372_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_384_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_392_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast_cast_fu_402_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_406_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_416_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_fu_426_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast_fu_451_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_fu_454_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_464_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast6_fu_448_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_cast_cast_fu_490_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_525_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_2_fu_554_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_2_fu_554_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_0_2_fu_582_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_0_2_fu_582_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_594_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_608_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_1_fu_622_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_1_fu_622_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_2_fu_635_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_2_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_0_2_cast_fu_641_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp9_fu_665_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp8_cast_fu_662_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp9_cast_fu_671_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_2_cast_fu_659_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_1_cast_fu_656_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_684_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_650_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp13_cast_fu_690_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_694_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp11_cast_fu_681_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_cast_fu_700_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_cast_fu_653_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_710_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp15_cast_fu_716_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp16_cast_fu_720_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp12_fu_732_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_fu_647_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp20_cast_fu_738_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp13_fu_742_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp18_cast_fu_729_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp19_cast_fu_748_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_cast_fu_758_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp10_cast_fu_761_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_result_V_1_2_2_fu_764_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp14_cast_fu_778_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp17_cast_fu_781_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_784_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_790_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_332_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_808_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_816_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_0_2_fu_582_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_fu_554_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_fu_594_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_fu_622_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_fu_635_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_608_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_525_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component differentiate_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    differentiate_mulbkb_U0 : component differentiate_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_332_p2);

    differentiate_maccud_U1 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_269,
        din1 => grp_fu_808_p1,
        din2 => r_V_reg_1004,
        dout => grp_fu_808_p3);

    differentiate_maccud_U2 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_260,
        din1 => grp_fu_816_p1,
        din2 => r_V_1_2_reg_1014,
        dout => grp_fu_816_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_436_p2 = ap_const_lv1_1))) then 
                i_reg_236 <= i_1_reg_903;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_236 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    j_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                j_reg_248 <= j_1_reg_959;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_248 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                reg_264 <= img_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_264 <= img_q0;
            end if; 
        end if;
    end process;

    reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_269 <= window_V_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_269 <= window_V_q1;
            end if; 
        end if;
    end process;

    reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_274 <= img_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_274 <= img_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_903 <= i_1_fu_366_p2;
                    tmp_10_reg_891(12 downto 4) <= tmp_10_fu_360_p2(12 downto 4);
                tmp_11_reg_898 <= grp_fu_332_p2;
                    tmp_14_reg_908(12 downto 4) <= tmp_14_fu_396_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                img_addr_4_reg_920 <= tmp_17_cast_fu_421_p1(12 - 1 downto 0);
                img_addr_7_reg_925 <= tmp_18_cast_fu_431_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                img_load_3_reg_994 <= img_q1;
                window_V_load_2_reg_989 <= window_V_q0;
                window_V_load_3_reg_999 <= window_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                img_load_8_reg_1036 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_959 <= j_1_fu_484_p2;
                tmp_20_reg_949 <= tmp_20_fu_474_p2;
                tmp_21_reg_954 <= tmp_21_fu_479_p2;
                tmp_22_reg_964 <= tmp_22_fu_494_p2;
                tmp_23_reg_969 <= tmp_23_fu_499_p2;
                tmp_24_reg_974 <= tmp_24_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                r_V_0_2_reg_1041 <= r_V_0_2_fu_582_p2;
                r_V_1_reg_1046 <= r_V_1_fu_594_p2;
                r_V_2_1_reg_1058 <= r_V_2_1_fu_622_p2;
                r_V_2_2_reg_1063 <= r_V_2_2_fu_635_p2;
                r_V_2_reg_1052 <= r_V_2_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                r_V_1_2_reg_1014 <= r_V_1_2_fu_554_p2;
                tmp8_reg_1019 <= grp_fu_808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                r_V_reg_1004 <= r_V_fu_525_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_260 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_279 <= img_q0;
                reg_283 <= window_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp10_reg_1078 <= tmp10_fu_723_p2;
                tmp14_reg_1083 <= tmp14_fu_752_p2;
                tmp4_reg_1073 <= tmp4_fu_704_p2;
                tmp7_reg_1068 <= tmp7_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp1_reg_1030 <= grp_fu_816_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_436_p2))) then
                tmp_2_reg_933 <= tmp_2_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_5_reg_1088 <= tmp_5_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_8_reg_869(12 downto 4) <= tmp_8_fu_311_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_317_p2 = ap_const_lv1_0))) then
                tmp_reg_879 <= tmp_fu_323_p2;
            end if;
        end if;
    end process;
    tmp_8_reg_869(3 downto 0) <= "0000";
    tmp_10_reg_891(3 downto 0) <= "0000";
    tmp_14_reg_908(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_317_p2, ap_CS_fsm_state5, exitcond2_fu_436_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_317_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_436_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_317_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_317_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_317_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_317_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_317_p2 <= "1" when (i_reg_236 = ap_const_lv6_3F) else "0";
    exitcond2_fu_436_p2 <= "1" when (j_reg_248 = ap_const_lv6_2F) else "0";
    grp_fu_332_p0 <= grp_fu_332_p00(6 - 1 downto 0);
    grp_fu_332_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_879),12));
    grp_fu_332_p1 <= ap_const_lv12_2E(7 - 1 downto 0);
    grp_fu_808_p1 <= grp_fu_808_p10(8 - 1 downto 0);
    grp_fu_808_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_264),11));
    grp_fu_816_p1 <= grp_fu_816_p10(8 - 1 downto 0);
    grp_fu_816_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_264),11));
    i_1_fu_366_p2 <= std_logic_vector(unsigned(i_reg_236) + unsigned(ap_const_lv6_1));

    img_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state5, img_addr_7_reg_925, tmp_16_cast_fu_411_p1, tmp_19_cast_fu_459_p1, tmp_24_cast_fu_513_p1, tmp_25_cast_fu_560_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_address0 <= tmp_25_cast_fu_560_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_address0 <= img_addr_7_reg_925;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_address0 <= tmp_24_cast_fu_513_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_address0 <= tmp_19_cast_fu_459_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            img_address0 <= tmp_16_cast_fu_411_p1(12 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    img_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7, img_addr_4_reg_920, tmp_20_cast_fu_469_p1, tmp_23_cast_fu_509_p1, tmp_21_cast_fu_531_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            img_address1 <= tmp_21_cast_fu_531_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_address1 <= img_addr_4_reg_920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_address1 <= tmp_23_cast_fu_509_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_address1 <= tmp_20_cast_fu_469_p1(12 - 1 downto 0);
        else 
            img_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            img_ce1 <= ap_const_logic_1;
        else 
            img_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_cast_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_484_p2),13));
    j_1_fu_484_p2 <= std_logic_vector(unsigned(j_reg_248) + unsigned(ap_const_lv6_1));
    j_cast_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_248),13));
    p_shl1_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_299_p3),13));
    p_shl2_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_372_p3),13));
    p_shl3_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_384_p3),13));
    p_shl4_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_338_p3),13));
    p_shl5_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_349_p3),13));
    p_shl_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_287_p3),13));
    r_V_0_2_fu_582_p0 <= window_V_load_2_reg_989;
    r_V_0_2_fu_582_p1 <= r_V_0_2_fu_582_p10(8 - 1 downto 0);
    r_V_0_2_fu_582_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_274),11));
    r_V_0_2_fu_582_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_0_2_fu_582_p0) * signed('0' &r_V_0_2_fu_582_p1))), 11));
    r_V_1_2_fu_554_p0 <= reg_283;
    r_V_1_2_fu_554_p1 <= r_V_1_2_fu_554_p10(8 - 1 downto 0);
    r_V_1_2_fu_554_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_279),11));
    r_V_1_2_fu_554_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_2_fu_554_p0) * signed('0' &r_V_1_2_fu_554_p1))), 11));
    r_V_1_fu_594_p0 <= window_V_load_3_reg_999;
    r_V_1_fu_594_p1 <= r_V_1_fu_594_p10(8 - 1 downto 0);
    r_V_1_fu_594_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_3_reg_994),11));
    r_V_1_fu_594_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_fu_594_p0) * signed('0' &r_V_1_fu_594_p1))), 11));
    r_V_2_1_fu_622_p0 <= reg_283;
    r_V_2_1_fu_622_p1 <= r_V_2_1_fu_622_p10(8 - 1 downto 0);
    r_V_2_1_fu_622_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_279),11));
    r_V_2_1_fu_622_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_1_fu_622_p0) * signed('0' &r_V_2_1_fu_622_p1))), 11));
    r_V_2_2_fu_635_p0 <= reg_260;
    r_V_2_2_fu_635_p1 <= r_V_2_2_fu_635_p10(8 - 1 downto 0);
    r_V_2_2_fu_635_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_8_reg_1036),11));
    r_V_2_2_fu_635_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_2_fu_635_p0) * signed('0' &r_V_2_2_fu_635_p1))), 11));
    r_V_2_fu_608_p0 <= reg_269;
    r_V_2_fu_608_p1 <= r_V_2_fu_608_p10(8 - 1 downto 0);
    r_V_2_fu_608_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_264),11));
    r_V_2_fu_608_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_608_p0) * signed('0' &r_V_2_fu_608_p1))), 11));
    r_V_fu_525_p0 <= reg_260;
    r_V_fu_525_p1 <= r_V_fu_525_p10(8 - 1 downto 0);
    r_V_fu_525_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_274),11));
    r_V_fu_525_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_525_p0) * signed('0' &r_V_fu_525_p1))), 11));
    res_V_address0 <= tmp_22_cast_fu_804_p1(12 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= tmp_5_reg_1088;

    res_V_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_result_V_1_2_2_fu_764_p2 <= std_logic_vector(signed(tmp7_cast_fu_758_p1) + signed(tmp10_cast_fu_761_p1));
        tmp10_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_reg_1073),15));

    tmp10_fu_723_p2 <= std_logic_vector(signed(tmp15_cast_fu_716_p1) + signed(tmp16_cast_fu_720_p1));
        tmp11_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1030),14));

        tmp12_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_694_p2),14));

    tmp12_fu_732_p2 <= std_logic_vector(signed(tmp_2_2_cast_fu_659_p1) + signed(tmp_0_2_cast_fu_641_p1));
        tmp13_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_684_p2),13));

    tmp13_fu_742_p2 <= std_logic_vector(signed(tmp_8_cast_fu_647_p1) + signed(tmp20_cast_fu_738_p1));
        tmp14_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_reg_1078),15));

    tmp14_fu_752_p2 <= std_logic_vector(signed(tmp18_cast_fu_729_p1) + signed(tmp19_cast_fu_748_p1));
        tmp15_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_710_p2),13));

        tmp16_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1030),13));

        tmp17_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp14_reg_1083),15));

        tmp18_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1019),14));

        tmp19_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp13_fu_742_p2),14));

        tmp20_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_732_p2),13));

    tmp2_fu_684_p2 <= std_logic_vector(signed(tmp_2_2_cast_fu_659_p1) + signed(tmp_2_1_cast_fu_656_p1));
    tmp3_fu_694_p2 <= std_logic_vector(signed(tmp_2_cast_fu_650_p1) + signed(tmp13_cast_fu_690_p1));
    tmp4_fu_704_p2 <= std_logic_vector(signed(tmp11_cast_fu_681_p1) + signed(tmp12_cast_fu_700_p1));
    tmp5_fu_710_p2 <= std_logic_vector(signed(tmp_2_1_cast_fu_656_p1) + signed(tmp_15_cast_fu_653_p1));
        tmp7_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_1068),15));

    tmp7_fu_675_p2 <= std_logic_vector(signed(tmp8_cast_fu_662_p1) + signed(tmp9_cast_fu_671_p1));
        tmp8_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1019),13));

        tmp9_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_fu_665_p2),13));

    tmp9_fu_665_p2 <= std_logic_vector(signed(tmp_1_cast_fu_644_p1) + signed(tmp_0_2_cast_fu_641_p1));
        tmp_0_2_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_0_2_reg_1041),12));

    tmp_10_fu_360_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_345_p1) - unsigned(p_shl5_cast_fu_356_p1));
    tmp_12_fu_372_p3 <= (i_1_fu_366_p2 & ap_const_lv6_0);
    tmp_13_fu_384_p3 <= (i_1_fu_366_p2 & ap_const_lv4_0);
    tmp_14_fu_396_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_380_p1) - unsigned(p_shl3_cast_fu_392_p1));
        tmp_15_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1052),12));

    tmp_15_fu_406_p2 <= std_logic_vector(unsigned(tmp_10_reg_891) + unsigned(j_cast_cast_fu_402_p1));
        tmp_16_cast_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_406_p2),32));

    tmp_16_fu_416_p2 <= std_logic_vector(unsigned(tmp_8_reg_869) + unsigned(j_cast_cast_fu_402_p1));
        tmp_17_cast_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_416_p2),32));

    tmp_17_fu_426_p2 <= std_logic_vector(unsigned(tmp_14_reg_908) + unsigned(j_cast_cast_fu_402_p1));
        tmp_18_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_426_p2),32));

    tmp_18_fu_454_p2 <= std_logic_vector(unsigned(tmp_10_reg_891) + unsigned(tmp_2_cast_cast_fu_451_p1));
        tmp_19_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_454_p2),32));

    tmp_19_fu_464_p2 <= std_logic_vector(unsigned(tmp_8_reg_869) + unsigned(tmp_2_cast_cast_fu_451_p1));
        tmp_1_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1046),12));

        tmp_20_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_464_p2),32));

    tmp_20_fu_474_p2 <= std_logic_vector(unsigned(tmp_14_reg_908) + unsigned(tmp_2_cast_cast_fu_451_p1));
        tmp_21_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_reg_949),32));

    tmp_21_fu_479_p2 <= std_logic_vector(unsigned(tmp_11_reg_898) + unsigned(tmp_2_cast_cast6_fu_448_p1));
    tmp_22_cast_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_954),32));
    tmp_22_fu_494_p2 <= std_logic_vector(unsigned(tmp_10_reg_891) + unsigned(j_1_cast_cast_fu_490_p1));
        tmp_23_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_reg_964),32));

    tmp_23_fu_499_p2 <= std_logic_vector(unsigned(tmp_8_reg_869) + unsigned(j_1_cast_cast_fu_490_p1));
        tmp_24_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_reg_969),32));

    tmp_24_fu_504_p2 <= std_logic_vector(unsigned(tmp_14_reg_908) + unsigned(j_1_cast_cast_fu_490_p1));
        tmp_25_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_reg_974),32));

    tmp_25_fu_770_p3 <= temp_result_V_1_2_2_fu_764_p2(14 downto 14);
        tmp_2_1_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_1_reg_1058),12));

        tmp_2_2_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_2_reg_1063),12));

    tmp_2_cast_cast6_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_933),12));
    tmp_2_cast_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_933),13));
        tmp_2_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1052),13));

    tmp_2_fu_442_p2 <= std_logic_vector(unsigned(j_reg_248) + unsigned(ap_const_lv6_3F));
    tmp_3_fu_349_p3 <= (tmp_reg_879 & ap_const_lv4_0);
    tmp_4_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(tmp_s_fu_784_p2));
    tmp_5_fu_796_p3 <= 
        tmp_4_fu_790_p2 when (tmp_25_fu_770_p3(0) = '1') else 
        tmp_s_fu_784_p2;
    tmp_6_fu_287_p3 <= (i_reg_236 & ap_const_lv6_0);
    tmp_7_fu_299_p3 <= (i_reg_236 & ap_const_lv4_0);
        tmp_8_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1046),13));

    tmp_8_fu_311_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_295_p1) - unsigned(p_shl1_cast_fu_307_p1));
    tmp_9_fu_338_p3 <= (tmp_reg_879 & ap_const_lv6_0);
    tmp_fu_323_p2 <= std_logic_vector(unsigned(i_reg_236) + unsigned(ap_const_lv6_3F));
    tmp_s_fu_784_p2 <= std_logic_vector(signed(tmp14_cast_fu_778_p1) + signed(tmp17_cast_fu_781_p1));

    window_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_V_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_V_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_V_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            window_V_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_V_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            window_V_address0 <= "XXXX";
        end if; 
    end process;


    window_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_V_address1 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_V_address1 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            window_V_address1 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_V_address1 <= ap_const_lv32_1(4 - 1 downto 0);
        else 
            window_V_address1 <= "XXXX";
        end if; 
    end process;


    window_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            window_V_ce0 <= ap_const_logic_1;
        else 
            window_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            window_V_ce1 <= ap_const_logic_1;
        else 
            window_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
