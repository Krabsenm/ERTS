-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity differentiate is
generic (
    C_S_AXI_DIFF_IO_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_DIFF_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    res_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    s_axi_diff_io_AWVALID : IN STD_LOGIC;
    s_axi_diff_io_AWREADY : OUT STD_LOGIC;
    s_axi_diff_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_ADDR_WIDTH-1 downto 0);
    s_axi_diff_io_WVALID : IN STD_LOGIC;
    s_axi_diff_io_WREADY : OUT STD_LOGIC;
    s_axi_diff_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH-1 downto 0);
    s_axi_diff_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_diff_io_ARVALID : IN STD_LOGIC;
    s_axi_diff_io_ARREADY : OUT STD_LOGIC;
    s_axi_diff_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_ADDR_WIDTH-1 downto 0);
    s_axi_diff_io_RVALID : OUT STD_LOGIC;
    s_axi_diff_io_RREADY : IN STD_LOGIC;
    s_axi_diff_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH-1 downto 0);
    s_axi_diff_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_diff_io_BVALID : OUT STD_LOGIC;
    s_axi_diff_io_BREADY : IN STD_LOGIC;
    s_axi_diff_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of differentiate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=128589,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=1,HLS_SYN_FF=778,HLS_SYN_LUT=562}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_ce0 : STD_LOGIC;
    signal img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_V_ce0 : STD_LOGIC;
    signal window_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_193_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_410 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_202_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_reg_421 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_214_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_429 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond2_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal res_V_addr_reg_434 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_fu_234_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_260_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_reg_444 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ii_1_fu_272_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ii_1_reg_452 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_307_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_reg_457 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_331_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_462 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_fu_339_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_467 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal jj_1_fu_369_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal jj_1_reg_480 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_384_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_485 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal window_V_load_reg_495 : STD_LOGIC_VECTOR (2 downto 0);
    signal img_load_reg_500 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_129 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_s_reg_141 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_153 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_020_1_reg_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal jj_reg_176 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_cast_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_202_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_202_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_cast_cast_fu_220_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_248_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_256_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast3_cast_fu_244_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast4_fu_240_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_283_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_295_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_291_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_fu_303_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_321_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_325_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal jj_cast1_cast_fu_349_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal jj_cast2_fu_345_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_cast_fu_380_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_399_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_202_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_399_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component differentiate_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component differentiate_diff_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        img_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        img_ce0 : IN STD_LOGIC;
        img_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        window_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        window_V_ce0 : IN STD_LOGIC;
        window_V_q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    differentiate_diff_io_s_axi_U : component differentiate_diff_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIFF_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIFF_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_diff_io_AWVALID,
        AWREADY => s_axi_diff_io_AWREADY,
        AWADDR => s_axi_diff_io_AWADDR,
        WVALID => s_axi_diff_io_WVALID,
        WREADY => s_axi_diff_io_WREADY,
        WDATA => s_axi_diff_io_WDATA,
        WSTRB => s_axi_diff_io_WSTRB,
        ARVALID => s_axi_diff_io_ARVALID,
        ARREADY => s_axi_diff_io_ARREADY,
        ARADDR => s_axi_diff_io_ARADDR,
        RVALID => s_axi_diff_io_RVALID,
        RREADY => s_axi_diff_io_RREADY,
        RDATA => s_axi_diff_io_RDATA,
        RRESP => s_axi_diff_io_RRESP,
        BVALID => s_axi_diff_io_BVALID,
        BREADY => s_axi_diff_io_BREADY,
        BRESP => s_axi_diff_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        img_address0 => img_address0,
        img_ce0 => img_ce0,
        img_q0 => img_q0,
        window_V_address0 => window_V_address0,
        window_V_ce0 => window_V_ce0,
        window_V_q0 => window_V_q0);

    differentiate_mulbkb_U0 : component differentiate_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_202_p0,
        din1 => grp_fu_202_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_202_p2);

    differentiate_maccud_U1 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => window_V_load_reg_495,
        din1 => grp_fu_399_p1,
        din2 => p_020_1_reg_164,
        dout => grp_fu_399_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_208_p2 = ap_const_lv1_1))) then 
                i_reg_117 <= i_1_fu_234_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_117 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    ii_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_363_p2))) then 
                ii_reg_153 <= ii_1_reg_452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_208_p2))) then 
                ii_reg_153 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_reg_129 <= j_1_reg_467;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_129 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    jj_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                jj_reg_176 <= jj_1_reg_480;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond3_fu_266_p2))) then 
                jj_reg_176 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_020_1_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_020_1_reg_164 <= grp_fu_399_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond3_fu_266_p2))) then 
                p_020_1_reg_164 <= p_s_reg_141;
            end if; 
        end if;
    end process;

    p_s_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_363_p2))) then 
                p_s_reg_141 <= p_020_1_reg_164;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_208_p2))) then 
                p_s_reg_141 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ii_1_reg_452 <= ii_1_fu_272_p2;
                tmp_11_reg_444 <= tmp_11_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                img_load_reg_500 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond3_fu_266_p2))) then
                j_1_reg_467 <= j_1_fu_339_p2;
                tmp_7_reg_462 <= tmp_7_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                jj_1_reg_480 <= jj_1_fu_369_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_208_p2))) then
                res_V_addr_reg_434 <= tmp_11_cast_fu_229_p1(12 - 1 downto 0);
                tmp_2_reg_429 <= tmp_2_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond3_fu_266_p2))) then
                    tmp_16_reg_457(12 downto 4) <= tmp_16_fu_307_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond_fu_363_p2))) then
                tmp_18_reg_485 <= tmp_18_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_3_reg_421 <= grp_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_187_p2 = ap_const_lv1_0))) then
                tmp_reg_410 <= tmp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                window_V_load_reg_495 <= window_V_q0;
            end if;
        end if;
    end process;
    tmp_16_reg_457(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_187_p2, ap_CS_fsm_state5, exitcond2_fu_208_p2, ap_CS_fsm_state6, exitcond3_fu_266_p2, ap_CS_fsm_state7, exitcond_fu_363_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_187_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond3_fu_266_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond_fu_363_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_187_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_187_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_187_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_187_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_187_p2 <= "1" when (i_reg_117 = ap_const_lv6_3F) else "0";
    exitcond2_fu_208_p2 <= "1" when (j_reg_129 = ap_const_lv6_2F) else "0";
    exitcond3_fu_266_p2 <= "1" when (ii_reg_153 = ap_const_lv2_3) else "0";
    exitcond_fu_363_p2 <= "1" when (jj_reg_176 = ap_const_lv2_3) else "0";
    grp_fu_202_p0 <= grp_fu_202_p00(6 - 1 downto 0);
    grp_fu_202_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_410),12));
    grp_fu_202_p1 <= ap_const_lv12_2E(7 - 1 downto 0);
    grp_fu_399_p1 <= grp_fu_399_p10(8 - 1 downto 0);
    grp_fu_399_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_reg_500),11));
    i_1_fu_234_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv6_1));
    ii_1_fu_272_p2 <= std_logic_vector(unsigned(ii_reg_153) + unsigned(ap_const_lv2_1));
    ii_cast3_cast_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_153),5));
    ii_cast4_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_153),6));
    img_address0 <= tmp_18_cast_fu_389_p1(12 - 1 downto 0);

    img_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(j_reg_129));
    jj_1_fu_369_p2 <= std_logic_vector(unsigned(jj_reg_176) + unsigned(ap_const_lv2_1));
    jj_cast1_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_176),5));
    jj_cast2_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_176),6));
    p_shl1_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_283_p3),13));
    p_shl2_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_295_p3),13));
    p_shl_cast_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_248_p3),5));
    res_V_address0 <= res_V_addr_reg_434;

    res_V_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= tmp_7_reg_462;

    res_V_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_278_p2 <= std_logic_vector(unsigned(tmp_reg_410) + unsigned(ii_cast4_fu_240_p1));
    tmp_10_fu_248_p3 <= (ii_reg_153 & ap_const_lv2_0);
    tmp_11_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_224_p2),32));
    tmp_11_fu_260_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_256_p1) - unsigned(ii_cast3_cast_fu_244_p1));
    tmp_12_fu_313_p3 <= p_s_reg_141(15 downto 15);
    tmp_13_fu_321_p1 <= p_s_reg_141(15 - 1 downto 0);
    tmp_14_fu_283_p3 <= (sum_fu_278_p2 & ap_const_lv6_0);
    tmp_15_fu_295_p3 <= (sum_fu_278_p2 & ap_const_lv4_0);
    tmp_16_fu_307_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_291_p1) - unsigned(p_shl2_cast_fu_303_p1));
        tmp_17_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_353_p2),32));

    tmp_17_fu_353_p2 <= std_logic_vector(unsigned(tmp_11_reg_444) + unsigned(jj_cast1_cast_fu_349_p1));
        tmp_18_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_reg_485),32));

    tmp_18_fu_384_p2 <= std_logic_vector(unsigned(tmp_16_reg_457) + unsigned(tmp_9_cast_cast_fu_380_p1));
    tmp_2_cast_cast_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_214_p2),12));
    tmp_2_fu_214_p2 <= std_logic_vector(unsigned(j_reg_129) + unsigned(ap_const_lv6_3F));
    tmp_5_fu_224_p2 <= std_logic_vector(unsigned(tmp_3_reg_421) + unsigned(tmp_2_cast_cast_fu_220_p1));
    tmp_6_fu_325_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(tmp_13_fu_321_p1));
    tmp_7_fu_331_p3 <= 
        tmp_6_fu_325_p2 when (tmp_12_fu_313_p3(0) = '1') else 
        tmp_13_fu_321_p1;
    tmp_9_cast_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_375_p2),13));
    tmp_9_fu_375_p2 <= std_logic_vector(unsigned(tmp_2_reg_429) + unsigned(jj_cast2_fu_345_p1));
    tmp_fu_193_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv6_3F));
    window_V_address0 <= tmp_17_cast_fu_358_p1(4 - 1 downto 0);

    window_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_V_ce0 <= ap_const_logic_1;
        else 
            window_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
