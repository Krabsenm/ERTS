-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity differentiate is
generic (
    C_S_AXI_DIFF_IO_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_DIFF_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    res_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    s_axi_diff_io_AWVALID : IN STD_LOGIC;
    s_axi_diff_io_AWREADY : OUT STD_LOGIC;
    s_axi_diff_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_ADDR_WIDTH-1 downto 0);
    s_axi_diff_io_WVALID : IN STD_LOGIC;
    s_axi_diff_io_WREADY : OUT STD_LOGIC;
    s_axi_diff_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH-1 downto 0);
    s_axi_diff_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_diff_io_ARVALID : IN STD_LOGIC;
    s_axi_diff_io_ARREADY : OUT STD_LOGIC;
    s_axi_diff_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_ADDR_WIDTH-1 downto 0);
    s_axi_diff_io_RVALID : OUT STD_LOGIC;
    s_axi_diff_io_RREADY : IN STD_LOGIC;
    s_axi_diff_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH-1 downto 0);
    s_axi_diff_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_diff_io_BVALID : OUT STD_LOGIC;
    s_axi_diff_io_BREADY : IN STD_LOGIC;
    s_axi_diff_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of differentiate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.732000,HLS_SYN_LAT=51337,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=1053,HLS_SYN_LUT=735}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_B24 : STD_LOGIC_VECTOR (11 downto 0) := "101100100100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_ce0 : STD_LOGIC;
    signal img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_V_ce0 : STD_LOGIC;
    signal window_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_s_reg_190 : STD_LOGIC_VECTOR (14 downto 0);
    signal ii_reg_202 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal exitcond3_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond3_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_223_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal indvar_flatten_next_reg_521 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_mid2_fu_241_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_mid2_reg_526 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_fu_255_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_mid2_reg_533 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_mid2_fu_263_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_mid2_reg_539 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast4_cast_fu_274_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast4_cast_reg_544 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_2_cast_cast7_fu_282_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast7_reg_549 : STD_LOGIC_VECTOR (12 downto 0);
    signal res_V_addr_reg_554 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_fu_294_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_559 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_2_cast_cast_fu_299_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_2_cast_cast_reg_564 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter2_exitcond3_reg_569 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_1_fu_309_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ii_1_reg_573 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_335_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_reg_578 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_fu_370_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_585 : STD_LOGIC_VECTOR (12 downto 0);
    signal ifzero_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_ifzero_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_ifzero_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_420_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_reg_616 : STD_LOGIC_VECTOR (12 downto 0);
    signal window_V_load_2_reg_621 : STD_LOGIC_VECTOR (2 downto 0);
    signal img_load_reg_636 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_load_1_reg_641 : STD_LOGIC_VECTOR (2 downto 0);
    signal window_V_load_reg_646 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_439_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_reg_651 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_501_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_656 : STD_LOGIC_VECTOR (11 downto 0);
    signal temp_result_V_1_2_fu_467_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_result_V_1_2_reg_661 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_7_fu_485_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_669 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal indvar_flatten_reg_157 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_reg_168 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_179 : STD_LOGIC_VECTOR (5 downto 0);
    signal ii_phi_fu_206_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_9_cast_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_19_cast_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_cast_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal tmp_17_cast_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_249_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_fu_229_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_277_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_492_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_323_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_331_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast2_cast_fu_319_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ii_cast3_fu_315_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_fu_341_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_346_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_358_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_354_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_366_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_392_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_411_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_2_fu_439_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_509_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_cast_fu_464_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_480_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_492_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_492_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_492_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_492_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_501_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_509_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_439_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component differentiate_macbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_macdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component differentiate_diff_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        img_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        img_ce0 : IN STD_LOGIC;
        img_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        window_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        window_V_ce0 : IN STD_LOGIC;
        window_V_q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    differentiate_diff_io_s_axi_U : component differentiate_diff_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIFF_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIFF_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_diff_io_AWVALID,
        AWREADY => s_axi_diff_io_AWREADY,
        AWADDR => s_axi_diff_io_AWADDR,
        WVALID => s_axi_diff_io_WVALID,
        WREADY => s_axi_diff_io_WREADY,
        WDATA => s_axi_diff_io_WDATA,
        WSTRB => s_axi_diff_io_WSTRB,
        ARVALID => s_axi_diff_io_ARVALID,
        ARREADY => s_axi_diff_io_ARREADY,
        ARADDR => s_axi_diff_io_ARADDR,
        RVALID => s_axi_diff_io_RVALID,
        RREADY => s_axi_diff_io_RREADY,
        RDATA => s_axi_diff_io_RDATA,
        RRESP => s_axi_diff_io_RRESP,
        BVALID => s_axi_diff_io_BVALID,
        BREADY => s_axi_diff_io_BREADY,
        BRESP => s_axi_diff_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        img_address0 => img_address0,
        img_ce0 => img_ce0,
        img_q0 => img_q0,
        window_V_address0 => window_V_address0,
        window_V_ce0 => window_V_ce0,
        window_V_q0 => window_V_q0);

    differentiate_macbkb_U0 : component differentiate_macbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        din2_WIDTH => 6,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_492_p0,
        din1 => grp_fu_492_p1,
        din2 => grp_fu_492_p2,
        dout => grp_fu_492_p3);

    differentiate_maccud_U1 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => window_V_load_1_reg_641,
        din1 => grp_fu_501_p1,
        din2 => r_V_2_reg_651,
        dout => grp_fu_501_p3);

    differentiate_macdEe_U2 : component differentiate_macdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 12,
        dout_WIDTH => 13)
    port map (
        din0 => window_V_load_reg_646,
        din1 => grp_fu_509_p1,
        din2 => tmp1_reg_656,
        dout => grp_fu_509_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_reg_168 <= i_mid2_reg_539;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_168 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    ii_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_569 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                ii_reg_202 <= ii_1_reg_573;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ii_reg_202 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten_reg_157 <= indvar_flatten_next_reg_521;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_157 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_reg_179 <= j_1_reg_559;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_179 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    p_s_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond3_reg_569))) then 
                p_s_reg_190 <= temp_result_V_1_2_reg_661;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_s_reg_190 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond3_reg_569 <= exitcond3_reg_569;
                ap_reg_pp0_iter1_ifzero_reg_592 <= ifzero_reg_592;
                ap_reg_pp0_iter2_exitcond3_reg_569 <= ap_reg_pp0_iter1_exitcond3_reg_569;
                ap_reg_pp0_iter2_ifzero_reg_592 <= ap_reg_pp0_iter1_ifzero_reg_592;
                exitcond3_reg_569 <= exitcond3_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond_flatten_fu_217_p2))) then
                i_mid2_reg_539 <= i_mid2_fu_263_p3;
                j_mid2_reg_526 <= j_mid2_fu_241_p3;
                tmp_mid2_reg_533 <= tmp_mid2_fu_255_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond3_fu_303_p2))) then
                ifzero_reg_592 <= ifzero_fu_376_p2;
                    tmp_14_reg_585(12 downto 4) <= tmp_14_fu_370_p2(12 downto 4);
                tmp_3_reg_578 <= tmp_3_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ii_1_reg_573 <= ii_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_reg_569 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                img_load_reg_636 <= img_q0;
                window_V_load_1_reg_641 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                indvar_flatten_next_reg_521 <= indvar_flatten_next_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_559 <= j_1_fu_294_p2;
                    j_cast4_cast_reg_544(5 downto 0) <= j_cast4_cast_fu_274_p1(5 downto 0);
                res_V_addr_reg_554 <= tmp_9_cast_fu_290_p1(12 - 1 downto 0);
                    tmp_2_cast_cast7_reg_549(5 downto 0) <= tmp_2_cast_cast7_fu_282_p1(5 downto 0);
                    tmp_9_2_cast_cast_reg_564(5 downto 0) <= tmp_9_2_cast_cast_fu_299_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond3_reg_569))) then
                r_V_2_reg_651 <= r_V_2_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (exitcond3_reg_569 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond3_reg_569)))) then
                reg_213 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond3_reg_569) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                temp_result_V_1_2_reg_661 <= temp_result_V_1_2_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond3_reg_569))) then
                tmp1_reg_656 <= grp_fu_501_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (exitcond3_reg_569 = ap_const_lv1_0))) then
                tmp_16_reg_616 <= tmp_16_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter2_ifzero_reg_592 = ap_const_lv1_1))) then
                tmp_7_reg_669 <= tmp_7_fu_485_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (exitcond3_reg_569 = ap_const_lv1_0))) then
                window_V_load_2_reg_621 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond3_reg_569))) then
                window_V_load_reg_646 <= window_V_q0;
            end if;
        end if;
    end process;
    j_cast4_cast_reg_544(12 downto 6) <= "0000000";
    tmp_2_cast_cast7_reg_549(12 downto 6) <= "0000000";
    tmp_9_2_cast_cast_reg_564(12 downto 6) <= "0000000";
    tmp_14_reg_585(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, exitcond_flatten_fu_217_p2, exitcond3_fu_303_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage1_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_217_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond3_fu_303_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond3_fu_303_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond3_fu_303_p2)
    begin
        if ((exitcond3_fu_303_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_217_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_217_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_flatten_fu_217_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_flatten_fu_217_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond3_fu_303_p2 <= "1" when (ii_phi_fu_206_p4 = ap_const_lv2_3) else "0";
    exitcond_flatten_fu_217_p2 <= "1" when (indvar_flatten_reg_157 = ap_const_lv12_B24) else "0";
    exitcond_fu_235_p2 <= "1" when (j_reg_179 = ap_const_lv6_2F) else "0";
    grp_fu_492_p0 <= grp_fu_492_p00(6 - 1 downto 0);
    grp_fu_492_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid2_reg_533),12));
    grp_fu_492_p1 <= ap_const_lv12_2E(7 - 1 downto 0);
    grp_fu_492_p2 <= grp_fu_492_p20(6 - 1 downto 0);
    grp_fu_492_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_277_p2),12));
    grp_fu_501_p1 <= grp_fu_501_p10(8 - 1 downto 0);
    grp_fu_501_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_213),11));
    grp_fu_509_p1 <= grp_fu_509_p10(8 - 1 downto 0);
    grp_fu_509_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_reg_636),11));
    i_1_fu_229_p2 <= std_logic_vector(unsigned(i_reg_168) + unsigned(ap_const_lv6_1));
    i_mid2_fu_263_p3 <= 
        i_1_fu_229_p2 when (exitcond_fu_235_p2(0) = '1') else 
        i_reg_168;
    ifzero_fu_376_p2 <= "1" when (ii_1_fu_309_p2 = ap_const_lv2_3) else "0";
    ii_1_fu_309_p2 <= std_logic_vector(unsigned(ii_phi_fu_206_p4) + unsigned(ap_const_lv2_1));
    ii_cast2_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_phi_fu_206_p4),5));
    ii_cast3_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_phi_fu_206_p4),6));

    ii_phi_fu_206_p4_assign_proc : process(ii_reg_202, exitcond3_reg_569, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ii_1_reg_573, ap_block_pp0_stage0_flag00000000)
    begin
        if (((exitcond3_reg_569 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            ii_phi_fu_206_p4 <= ii_1_reg_573;
        else 
            ii_phi_fu_206_p4 <= ii_reg_202;
        end if; 
    end process;


    img_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_19_cast_fu_396_p1, ap_block_pp0_stage2_flag00000000, tmp_17_cast_fu_415_p1, tmp_18_cast_fu_428_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            img_address0 <= tmp_18_cast_fu_428_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            img_address0 <= tmp_17_cast_fu_415_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            img_address0 <= tmp_19_cast_fu_396_p1(12 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_223_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_157) + unsigned(ap_const_lv12_1));
    j_1_fu_294_p2 <= std_logic_vector(unsigned(j_mid2_reg_526) + unsigned(ap_const_lv6_1));
    j_cast4_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_526),13));
    j_mid2_fu_241_p3 <= 
        ap_const_lv6_1 when (exitcond_fu_235_p2(0) = '1') else 
        j_reg_179;
        p_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_509_p3),15));

    p_shl1_cast_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_358_p3),13));
    p_shl2_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_323_p3),5));
    p_shl_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_346_p3),13));
    r_V_2_fu_439_p0 <= window_V_load_2_reg_621;
    r_V_2_fu_439_p1 <= r_V_2_fu_439_p10(8 - 1 downto 0);
    r_V_2_fu_439_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_213),11));
    r_V_2_fu_439_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_439_p0) * signed('0' &r_V_2_fu_439_p1))), 11));
    res_V_address0 <= res_V_addr_reg_554;

    res_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= tmp_7_reg_669;

    res_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_reg_pp0_iter2_ifzero_reg_592, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_reg_pp0_iter2_ifzero_reg_592 = ap_const_lv1_1))) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_fu_341_p2 <= std_logic_vector(unsigned(tmp_mid2_reg_533) + unsigned(ii_cast3_fu_315_p1));
    temp_result_V_1_2_fu_467_p2 <= std_logic_vector(signed(p_cast_fu_464_p1) + signed(p_s_reg_190));
    tmp3_fu_249_p2 <= std_logic_vector(unsigned(i_reg_168) + unsigned(ap_const_lv6_3F));
    tmp_10_fu_401_p2 <= std_logic_vector(unsigned(tmp_3_reg_578) + unsigned(ap_const_lv5_1));
        tmp_11_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_reg_578),32));

    tmp_11_fu_382_p2 <= std_logic_vector(unsigned(tmp_3_reg_578) + unsigned(ap_const_lv5_2));
        tmp_12_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_401_p2),32));

    tmp_12_fu_346_p3 <= (sum_fu_341_p2 & ap_const_lv6_0);
        tmp_13_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_382_p2),32));

    tmp_13_fu_358_p3 <= (sum_fu_341_p2 & ap_const_lv4_0);
    tmp_14_fu_370_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_354_p1) - unsigned(p_shl1_cast_fu_366_p1));
    tmp_15_fu_411_p2 <= std_logic_vector(unsigned(tmp_14_reg_585) + unsigned(tmp_2_cast_cast7_reg_549));
    tmp_16_fu_420_p2 <= std_logic_vector(unsigned(tmp_14_reg_585) + unsigned(j_cast4_cast_reg_544));
        tmp_17_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_411_p2),32));

    tmp_17_fu_392_p2 <= std_logic_vector(unsigned(tmp_14_reg_585) + unsigned(tmp_9_2_cast_cast_reg_564));
        tmp_18_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_616),32));

        tmp_19_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_392_p2),32));

    tmp_2_cast_cast7_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_277_p2),13));
    tmp_2_fu_277_p2 <= std_logic_vector(unsigned(j_mid2_reg_526) + unsigned(ap_const_lv6_3F));
    tmp_3_fu_335_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_331_p1) - unsigned(ii_cast2_cast_fu_319_p1));
    tmp_6_fu_480_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(temp_result_V_1_2_reg_661));
    tmp_7_fu_485_p3 <= 
        tmp_6_fu_480_p2 when (tmp_fu_473_p3(0) = '1') else 
        temp_result_V_1_2_reg_661;
    tmp_9_2_cast_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_fu_294_p2),13));
    tmp_9_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_492_p3),32));
    tmp_fu_473_p3 <= temp_result_V_1_2_reg_661(14 downto 14);
    tmp_mid2_fu_255_p3 <= 
        i_reg_168 when (exitcond_fu_235_p2(0) = '1') else 
        tmp3_fu_249_p2;
    tmp_s_fu_323_p3 <= (ii_phi_fu_206_p4 & ap_const_lv2_0);

    window_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, tmp_13_cast_fu_387_p1, ap_block_pp0_stage1_flag00000000, tmp_12_cast_fu_406_p1, ap_block_pp0_stage2_flag00000000, tmp_11_cast_fu_424_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            window_V_address0 <= tmp_11_cast_fu_424_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            window_V_address0 <= tmp_12_cast_fu_406_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            window_V_address0 <= tmp_13_cast_fu_387_p1(4 - 1 downto 0);
        else 
            window_V_address0 <= "XXXX";
        end if; 
    end process;


    window_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            window_V_ce0 <= ap_const_logic_1;
        else 
            window_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
