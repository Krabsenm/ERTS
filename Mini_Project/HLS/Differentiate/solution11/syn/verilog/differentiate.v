// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.732000,HLS_SYN_LAT=51337,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=3,HLS_SYN_FF=1053,HLS_SYN_LUT=735}" *)

module differentiate (
        ap_clk,
        ap_rst_n,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0,
        s_axi_diff_io_AWVALID,
        s_axi_diff_io_AWREADY,
        s_axi_diff_io_AWADDR,
        s_axi_diff_io_WVALID,
        s_axi_diff_io_WREADY,
        s_axi_diff_io_WDATA,
        s_axi_diff_io_WSTRB,
        s_axi_diff_io_ARVALID,
        s_axi_diff_io_ARREADY,
        s_axi_diff_io_ARADDR,
        s_axi_diff_io_RVALID,
        s_axi_diff_io_RREADY,
        s_axi_diff_io_RDATA,
        s_axi_diff_io_RRESP,
        s_axi_diff_io_BVALID,
        s_axi_diff_io_BREADY,
        s_axi_diff_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_pp0_stage1 = 7'd16;
parameter    ap_ST_fsm_pp0_stage2 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;
parameter    C_S_AXI_DIFF_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_DIFF_IO_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIFF_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;
input   s_axi_diff_io_AWVALID;
output   s_axi_diff_io_AWREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_AWADDR;
input   s_axi_diff_io_WVALID;
output   s_axi_diff_io_WREADY;
input  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_WDATA;
input  [C_S_AXI_DIFF_IO_WSTRB_WIDTH - 1:0] s_axi_diff_io_WSTRB;
input   s_axi_diff_io_ARVALID;
output   s_axi_diff_io_ARREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_ARADDR;
output   s_axi_diff_io_RVALID;
input   s_axi_diff_io_RREADY;
output  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_RDATA;
output  [1:0] s_axi_diff_io_RRESP;
output   s_axi_diff_io_BVALID;
input   s_axi_diff_io_BREADY;
output  [1:0] s_axi_diff_io_BRESP;
output   interrupt;

reg res_V_ce0;
reg res_V_we0;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [11:0] img_address0;
reg    img_ce0;
wire   [7:0] img_q0;
reg   [3:0] window_V_address0;
reg    window_V_ce0;
wire   [2:0] window_V_q0;
reg   [14:0] p_s_reg_190;
reg   [1:0] ii_reg_202;
reg   [7:0] reg_213;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_flag00011001;
reg   [0:0] exitcond3_reg_569;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond3_reg_569;
wire   [11:0] indvar_flatten_next_fu_223_p2;
reg   [11:0] indvar_flatten_next_reg_521;
wire    ap_CS_fsm_state2;
wire   [5:0] j_mid2_fu_241_p3;
reg   [5:0] j_mid2_reg_526;
wire   [0:0] exitcond_flatten_fu_217_p2;
wire   [5:0] tmp_mid2_fu_255_p3;
reg   [5:0] tmp_mid2_reg_533;
wire   [5:0] i_mid2_fu_263_p3;
reg   [5:0] i_mid2_reg_539;
wire   [12:0] j_cast4_cast_fu_274_p1;
reg   [12:0] j_cast4_cast_reg_544;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_2_cast_cast7_fu_282_p1;
reg   [12:0] tmp_2_cast_cast7_reg_549;
reg   [11:0] res_V_addr_reg_554;
wire   [5:0] j_1_fu_294_p2;
reg   [5:0] j_1_reg_559;
wire   [12:0] tmp_9_2_cast_cast_fu_299_p1;
reg   [12:0] tmp_9_2_cast_cast_reg_564;
wire   [0:0] exitcond3_fu_303_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter2_exitcond3_reg_569;
wire   [1:0] ii_1_fu_309_p2;
reg   [1:0] ii_1_reg_573;
wire   [4:0] tmp_3_fu_335_p2;
reg   [4:0] tmp_3_reg_578;
wire   [12:0] tmp_14_fu_370_p2;
reg   [12:0] tmp_14_reg_585;
wire   [0:0] ifzero_fu_376_p2;
reg   [0:0] ifzero_reg_592;
reg   [0:0] ap_reg_pp0_iter1_ifzero_reg_592;
reg   [0:0] ap_reg_pp0_iter2_ifzero_reg_592;
wire   [12:0] tmp_16_fu_420_p2;
reg   [12:0] tmp_16_reg_616;
reg   [2:0] window_V_load_2_reg_621;
reg   [7:0] img_load_reg_636;
reg  signed [2:0] window_V_load_1_reg_641;
reg  signed [2:0] window_V_load_reg_646;
wire   [10:0] r_V_2_fu_439_p2;
reg  signed [10:0] r_V_2_reg_651;
wire  signed [11:0] grp_fu_501_p3;
reg  signed [11:0] tmp1_reg_656;
wire   [14:0] temp_result_V_1_2_fu_467_p2;
reg   [14:0] temp_result_V_1_2_reg_661;
reg    ap_enable_reg_pp0_iter2;
wire   [14:0] tmp_7_fu_485_p3;
reg   [14:0] tmp_7_reg_669;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage2_flag00011011;
reg   [11:0] indvar_flatten_reg_157;
wire    ap_CS_fsm_state13;
reg   [5:0] i_reg_168;
reg   [5:0] j_reg_179;
reg   [1:0] ii_phi_fu_206_p4;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] tmp_9_cast_fu_290_p1;
wire  signed [31:0] tmp_13_cast_fu_387_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire  signed [31:0] tmp_19_cast_fu_396_p1;
wire  signed [31:0] tmp_12_cast_fu_406_p1;
wire    ap_block_pp0_stage2_flag00000000;
wire  signed [31:0] tmp_17_cast_fu_415_p1;
wire  signed [31:0] tmp_11_cast_fu_424_p1;
wire  signed [31:0] tmp_18_cast_fu_428_p1;
wire   [0:0] exitcond_fu_235_p2;
wire   [5:0] tmp3_fu_249_p2;
wire   [5:0] i_1_fu_229_p2;
wire   [5:0] tmp_2_fu_277_p2;
wire   [11:0] grp_fu_492_p3;
wire   [3:0] tmp_s_fu_323_p3;
wire   [4:0] p_shl2_cast_fu_331_p1;
wire   [4:0] ii_cast2_cast_fu_319_p1;
wire   [5:0] ii_cast3_fu_315_p1;
wire   [5:0] sum_fu_341_p2;
wire   [11:0] tmp_12_fu_346_p3;
wire   [9:0] tmp_13_fu_358_p3;
wire   [12:0] p_shl_cast_fu_354_p1;
wire   [12:0] p_shl1_cast_fu_366_p1;
wire   [4:0] tmp_11_fu_382_p2;
wire   [12:0] tmp_17_fu_392_p2;
wire   [4:0] tmp_10_fu_401_p2;
wire   [12:0] tmp_15_fu_411_p2;
wire  signed [2:0] r_V_2_fu_439_p0;
wire   [7:0] r_V_2_fu_439_p1;
wire  signed [12:0] grp_fu_509_p3;
wire  signed [14:0] p_cast_fu_464_p1;
wire   [0:0] tmp_fu_473_p3;
wire   [14:0] tmp_6_fu_480_p2;
wire   [5:0] grp_fu_492_p0;
wire   [6:0] grp_fu_492_p1;
wire   [5:0] grp_fu_492_p2;
wire   [7:0] grp_fu_501_p1;
wire   [7:0] grp_fu_509_p1;
reg   [6:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_492_p00;
wire   [11:0] grp_fu_492_p20;
wire   [10:0] grp_fu_501_p10;
wire   [10:0] grp_fu_509_p10;
wire   [10:0] r_V_2_fu_439_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

differentiate_diff_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIFF_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIFF_IO_DATA_WIDTH ))
differentiate_diff_io_s_axi_U(
    .AWVALID(s_axi_diff_io_AWVALID),
    .AWREADY(s_axi_diff_io_AWREADY),
    .AWADDR(s_axi_diff_io_AWADDR),
    .WVALID(s_axi_diff_io_WVALID),
    .WREADY(s_axi_diff_io_WREADY),
    .WDATA(s_axi_diff_io_WDATA),
    .WSTRB(s_axi_diff_io_WSTRB),
    .ARVALID(s_axi_diff_io_ARVALID),
    .ARREADY(s_axi_diff_io_ARREADY),
    .ARADDR(s_axi_diff_io_ARADDR),
    .RVALID(s_axi_diff_io_RVALID),
    .RREADY(s_axi_diff_io_RREADY),
    .RDATA(s_axi_diff_io_RDATA),
    .RRESP(s_axi_diff_io_RRESP),
    .BVALID(s_axi_diff_io_BVALID),
    .BREADY(s_axi_diff_io_BREADY),
    .BRESP(s_axi_diff_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .img_address0(img_address0),
    .img_ce0(img_ce0),
    .img_q0(img_q0),
    .window_V_address0(window_V_address0),
    .window_V_ce0(window_V_ce0),
    .window_V_q0(window_V_q0)
);

differentiate_macbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 12 ))
differentiate_macbkb_U0(
    .din0(grp_fu_492_p0),
    .din1(grp_fu_492_p1),
    .din2(grp_fu_492_p2),
    .dout(grp_fu_492_p3)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U1(
    .din0(window_V_load_1_reg_641),
    .din1(grp_fu_501_p1),
    .din2(r_V_2_reg_651),
    .dout(grp_fu_501_p3)
);

differentiate_macdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
differentiate_macdEe_U2(
    .din0(window_V_load_reg_646),
    .din1(grp_fu_509_p1),
    .din2(tmp1_reg_656),
    .dout(grp_fu_509_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_reg_168 <= i_mid2_reg_539;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_168 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_569 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ii_reg_202 <= ii_1_reg_573;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ii_reg_202 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten_reg_157 <= indvar_flatten_next_reg_521;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_157 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_179 <= j_1_reg_559;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_179 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter2_exitcond3_reg_569))) begin
        p_s_reg_190 <= temp_result_V_1_2_reg_661;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        p_s_reg_190 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond3_reg_569 <= exitcond3_reg_569;
        ap_reg_pp0_iter1_ifzero_reg_592 <= ifzero_reg_592;
        ap_reg_pp0_iter2_exitcond3_reg_569 <= ap_reg_pp0_iter1_exitcond3_reg_569;
        ap_reg_pp0_iter2_ifzero_reg_592 <= ap_reg_pp0_iter1_ifzero_reg_592;
        exitcond3_reg_569 <= exitcond3_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond_flatten_fu_217_p2))) begin
        i_mid2_reg_539 <= i_mid2_fu_263_p3;
        j_mid2_reg_526 <= j_mid2_fu_241_p3;
        tmp_mid2_reg_533 <= tmp_mid2_fu_255_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond3_fu_303_p2))) begin
        ifzero_reg_592 <= ifzero_fu_376_p2;
        tmp_14_reg_585[12 : 4] <= tmp_14_fu_370_p2[12 : 4];
        tmp_3_reg_578 <= tmp_3_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ii_1_reg_573 <= ii_1_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_reg_569 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        img_load_reg_636 <= img_q0;
        window_V_load_1_reg_641 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next_reg_521 <= indvar_flatten_next_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_1_reg_559 <= j_1_fu_294_p2;
        j_cast4_cast_reg_544[5 : 0] <= j_cast4_cast_fu_274_p1[5 : 0];
        res_V_addr_reg_554 <= tmp_9_cast_fu_290_p1;
        tmp_2_cast_cast7_reg_549[5 : 0] <= tmp_2_cast_cast7_fu_282_p1[5 : 0];
        tmp_9_2_cast_cast_reg_564[5 : 0] <= tmp_9_2_cast_cast_fu_299_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond3_reg_569))) begin
        r_V_2_reg_651 <= r_V_2_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (exitcond3_reg_569 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond3_reg_569)))) begin
        reg_213 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == ap_reg_pp0_iter1_exitcond3_reg_569) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        temp_result_V_1_2_reg_661 <= temp_result_V_1_2_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond3_reg_569))) begin
        tmp1_reg_656 <= grp_fu_501_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (exitcond3_reg_569 == 1'd0))) begin
        tmp_16_reg_616 <= tmp_16_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (ap_reg_pp0_iter2_ifzero_reg_592 == 1'd1))) begin
        tmp_7_reg_669 <= tmp_7_fu_485_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (exitcond3_reg_569 == 1'd0))) begin
        window_V_load_2_reg_621 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond3_reg_569))) begin
        window_V_load_reg_646 <= window_V_q0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_303_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_217_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_217_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond3_reg_569 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        ii_phi_fu_206_p4 = ii_1_reg_573;
    end else begin
        ii_phi_fu_206_p4 = ii_reg_202;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        img_address0 = tmp_18_cast_fu_428_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        img_address0 = tmp_17_cast_fu_415_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        img_address0 = tmp_19_cast_fu_396_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_reg_pp0_iter2_ifzero_reg_592 == 1'd1))) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        window_V_address0 = tmp_11_cast_fu_424_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        window_V_address0 = tmp_12_cast_fu_406_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        window_V_address0 = tmp_13_cast_fu_387_p1;
    end else begin
        window_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_217_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond3_fu_303_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond3_fu_303_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_block_pp0_stage2_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond3_fu_303_p2 = ((ii_phi_fu_206_p4 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_217_p2 = ((indvar_flatten_reg_157 == 12'd2852) ? 1'b1 : 1'b0);

assign exitcond_fu_235_p2 = ((j_reg_179 == 6'd47) ? 1'b1 : 1'b0);

assign grp_fu_492_p0 = grp_fu_492_p00;

assign grp_fu_492_p00 = tmp_mid2_reg_533;

assign grp_fu_492_p1 = 12'd46;

assign grp_fu_492_p2 = grp_fu_492_p20;

assign grp_fu_492_p20 = tmp_2_fu_277_p2;

assign grp_fu_501_p1 = grp_fu_501_p10;

assign grp_fu_501_p10 = reg_213;

assign grp_fu_509_p1 = grp_fu_509_p10;

assign grp_fu_509_p10 = img_load_reg_636;

assign i_1_fu_229_p2 = (i_reg_168 + 6'd1);

assign i_mid2_fu_263_p3 = ((exitcond_fu_235_p2[0:0] === 1'b1) ? i_1_fu_229_p2 : i_reg_168);

assign ifzero_fu_376_p2 = ((ii_1_fu_309_p2 == 2'd3) ? 1'b1 : 1'b0);

assign ii_1_fu_309_p2 = (ii_phi_fu_206_p4 + 2'd1);

assign ii_cast2_cast_fu_319_p1 = ii_phi_fu_206_p4;

assign ii_cast3_fu_315_p1 = ii_phi_fu_206_p4;

assign indvar_flatten_next_fu_223_p2 = (indvar_flatten_reg_157 + 12'd1);

assign j_1_fu_294_p2 = (j_mid2_reg_526 + 6'd1);

assign j_cast4_cast_fu_274_p1 = j_mid2_reg_526;

assign j_mid2_fu_241_p3 = ((exitcond_fu_235_p2[0:0] === 1'b1) ? 6'd1 : j_reg_179);

assign p_cast_fu_464_p1 = grp_fu_509_p3;

assign p_shl1_cast_fu_366_p1 = tmp_13_fu_358_p3;

assign p_shl2_cast_fu_331_p1 = tmp_s_fu_323_p3;

assign p_shl_cast_fu_354_p1 = tmp_12_fu_346_p3;

assign r_V_2_fu_439_p0 = window_V_load_2_reg_621;

assign r_V_2_fu_439_p1 = r_V_2_fu_439_p10;

assign r_V_2_fu_439_p10 = reg_213;

assign r_V_2_fu_439_p2 = ($signed(r_V_2_fu_439_p0) * $signed({{1'b0}, {r_V_2_fu_439_p1}}));

assign res_V_address0 = res_V_addr_reg_554;

assign res_V_d0 = tmp_7_reg_669;

assign sum_fu_341_p2 = (tmp_mid2_reg_533 + ii_cast3_fu_315_p1);

assign temp_result_V_1_2_fu_467_p2 = ($signed(p_cast_fu_464_p1) + $signed(p_s_reg_190));

assign tmp3_fu_249_p2 = ($signed(i_reg_168) + $signed(6'd63));

assign tmp_10_fu_401_p2 = (tmp_3_reg_578 + 5'd1);

assign tmp_11_cast_fu_424_p1 = $signed(tmp_3_reg_578);

assign tmp_11_fu_382_p2 = (tmp_3_reg_578 + 5'd2);

assign tmp_12_cast_fu_406_p1 = $signed(tmp_10_fu_401_p2);

assign tmp_12_fu_346_p3 = {{sum_fu_341_p2}, {6'd0}};

assign tmp_13_cast_fu_387_p1 = $signed(tmp_11_fu_382_p2);

assign tmp_13_fu_358_p3 = {{sum_fu_341_p2}, {4'd0}};

assign tmp_14_fu_370_p2 = (p_shl_cast_fu_354_p1 - p_shl1_cast_fu_366_p1);

assign tmp_15_fu_411_p2 = (tmp_14_reg_585 + tmp_2_cast_cast7_reg_549);

assign tmp_16_fu_420_p2 = (tmp_14_reg_585 + j_cast4_cast_reg_544);

assign tmp_17_cast_fu_415_p1 = $signed(tmp_15_fu_411_p2);

assign tmp_17_fu_392_p2 = (tmp_14_reg_585 + tmp_9_2_cast_cast_reg_564);

assign tmp_18_cast_fu_428_p1 = $signed(tmp_16_reg_616);

assign tmp_19_cast_fu_396_p1 = $signed(tmp_17_fu_392_p2);

assign tmp_2_cast_cast7_fu_282_p1 = tmp_2_fu_277_p2;

assign tmp_2_fu_277_p2 = ($signed(j_mid2_reg_526) + $signed(6'd63));

assign tmp_3_fu_335_p2 = (p_shl2_cast_fu_331_p1 - ii_cast2_cast_fu_319_p1);

assign tmp_6_fu_480_p2 = (15'd0 - temp_result_V_1_2_reg_661);

assign tmp_7_fu_485_p3 = ((tmp_fu_473_p3[0:0] === 1'b1) ? tmp_6_fu_480_p2 : temp_result_V_1_2_reg_661);

assign tmp_9_2_cast_cast_fu_299_p1 = j_1_fu_294_p2;

assign tmp_9_cast_fu_290_p1 = grp_fu_492_p3;

assign tmp_fu_473_p3 = temp_result_V_1_2_reg_661[32'd14];

assign tmp_mid2_fu_255_p3 = ((exitcond_fu_235_p2[0:0] === 1'b1) ? i_reg_168 : tmp3_fu_249_p2);

assign tmp_s_fu_323_p3 = {{ii_phi_fu_206_p4}, {2'd0}};

always @ (posedge ap_clk) begin
    j_cast4_cast_reg_544[12:6] <= 7'b0000000;
    tmp_2_cast_cast7_reg_549[12:6] <= 7'b0000000;
    tmp_9_2_cast_cast_reg_564[12:6] <= 7'b0000000;
    tmp_14_reg_585[3:0] <= 4'b0000;
end

endmodule //differentiate
