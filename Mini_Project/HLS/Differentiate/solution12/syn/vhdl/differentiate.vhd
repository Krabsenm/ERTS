-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity differentiate is
generic (
    C_S_AXI_DIFF_IO_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_DIFF_IO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    res_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    s_axi_diff_io_AWVALID : IN STD_LOGIC;
    s_axi_diff_io_AWREADY : OUT STD_LOGIC;
    s_axi_diff_io_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_ADDR_WIDTH-1 downto 0);
    s_axi_diff_io_WVALID : IN STD_LOGIC;
    s_axi_diff_io_WREADY : OUT STD_LOGIC;
    s_axi_diff_io_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH-1 downto 0);
    s_axi_diff_io_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH/8-1 downto 0);
    s_axi_diff_io_ARVALID : IN STD_LOGIC;
    s_axi_diff_io_ARREADY : OUT STD_LOGIC;
    s_axi_diff_io_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_ADDR_WIDTH-1 downto 0);
    s_axi_diff_io_RVALID : OUT STD_LOGIC;
    s_axi_diff_io_RREADY : IN STD_LOGIC;
    s_axi_diff_io_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DIFF_IO_DATA_WIDTH-1 downto 0);
    s_axi_diff_io_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_diff_io_BVALID : OUT STD_LOGIC;
    s_axi_diff_io_BREADY : IN STD_LOGIC;
    s_axi_diff_io_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of differentiate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.989667,HLS_SYN_LAT=43029,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=1904,HLS_SYN_LUT=1444}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal img_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_ce0 : STD_LOGIC;
    signal img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal window_V_ce0 : STD_LOGIC;
    signal window_V_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_275 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reg_287 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal reg_291 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_8_fu_319_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_reg_874 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_331_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_884 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_10_fu_368_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_reg_896 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_340_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_reg_903 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_908 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_404_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_14_reg_913 : STD_LOGIC_VECTOR (12 downto 0);
    signal img_addr_1_reg_920 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal img_addr_4_reg_925 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_addr_7_reg_930 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_450_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_938 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_cast_cast_fu_459_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast_reg_944 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_472_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_reg_955 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_fu_477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_960 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_491_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_reg_966 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_cast_cast_fu_497_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_cast_cast_reg_971 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_fu_519_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_reg_987 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_fu_534_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_reg_992 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_538_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_reg_997 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_813_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp8_reg_1002 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_load_3_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_load_6_reg_1023 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_2_fu_558_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_reg_1028 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_821_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_1038 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_load_8_reg_1044 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal r_V_0_2_fu_587_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_0_2_reg_1049 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_V_1_fu_600_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_reg_1054 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_reg_1060 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_fu_627_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_reg_1066 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_fu_640_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_reg_1071 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp7_fu_680_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_reg_1076 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp4_fu_709_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_reg_1081 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_fu_728_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp10_reg_1086 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp14_fu_757_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp14_reg_1091 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_801_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_reg_1096 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal i_reg_243 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_255 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_16_cast_fu_419_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_467_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_505_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_514_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_546_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_564_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_295_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_307_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_303_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_315_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_340_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_340_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_346_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_357_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_353_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_364_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_12_fu_380_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_13_fu_392_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_388_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_400_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast_cast_fu_410_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_414_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_424_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_fu_434_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_fu_462_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast6_fu_456_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_491_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_491_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_500_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_510_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_1_2_fu_558_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_2_fu_558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_0_2_fu_587_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_0_2_fu_587_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_1_fu_600_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_fu_613_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_1_fu_627_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_1_fu_627_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_2_fu_640_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_2_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_fu_649_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_0_2_cast_fu_646_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp9_fu_670_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp8_cast_fu_667_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp9_cast_fu_676_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_2_cast_fu_664_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_1_cast_fu_661_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_689_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_655_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp13_cast_fu_695_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp11_cast_fu_686_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_cast_fu_705_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_cast_fu_658_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_715_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp15_cast_fu_721_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp16_cast_fu_725_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp12_fu_737_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_cast_fu_652_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp20_cast_fu_743_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp13_fu_747_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp18_cast_fu_734_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp19_cast_fu_753_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_cast_fu_763_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp10_cast_fu_766_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_result_V_1_2_2_fu_769_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp14_cast_fu_783_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp17_cast_fu_786_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_789_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_795_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_813_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_821_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_340_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_813_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_821_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_0_2_fu_587_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_fu_558_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_fu_600_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_fu_627_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_fu_640_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_613_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_491_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component differentiate_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_diff_io_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        img_address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        img_ce0 : IN STD_LOGIC;
        img_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        window_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        window_V_ce0 : IN STD_LOGIC;
        window_V_q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;



begin
    differentiate_diff_io_s_axi_U : component differentiate_diff_io_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_DIFF_IO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_DIFF_IO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_diff_io_AWVALID,
        AWREADY => s_axi_diff_io_AWREADY,
        AWADDR => s_axi_diff_io_AWADDR,
        WVALID => s_axi_diff_io_WVALID,
        WREADY => s_axi_diff_io_WREADY,
        WDATA => s_axi_diff_io_WDATA,
        WSTRB => s_axi_diff_io_WSTRB,
        ARVALID => s_axi_diff_io_ARVALID,
        ARREADY => s_axi_diff_io_ARREADY,
        ARADDR => s_axi_diff_io_ARADDR,
        RVALID => s_axi_diff_io_RVALID,
        RREADY => s_axi_diff_io_RREADY,
        RDATA => s_axi_diff_io_RDATA,
        RRESP => s_axi_diff_io_RRESP,
        BVALID => s_axi_diff_io_BVALID,
        BREADY => s_axi_diff_io_BREADY,
        BRESP => s_axi_diff_io_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        img_address0 => img_address0,
        img_ce0 => img_ce0,
        img_q0 => img_q0,
        window_V_address0 => window_V_address0,
        window_V_ce0 => window_V_ce0,
        window_V_q0 => window_V_q0);

    differentiate_mulbkb_U0 : component differentiate_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_340_p0,
        din1 => grp_fu_340_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_340_p2);

    differentiate_maccud_U1 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_275,
        din1 => grp_fu_813_p1,
        din2 => r_V_reg_966,
        dout => grp_fu_813_p3);

    differentiate_maccud_U2 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_279,
        din1 => grp_fu_821_p1,
        din2 => r_V_1_2_reg_1028,
        dout => grp_fu_821_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_444_p2 = ap_const_lv1_1))) then 
                i_reg_243 <= i_1_reg_908;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_243 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    j_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                j_reg_255 <= j_1_reg_960;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_255 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_908 <= i_1_fu_374_p2;
                    tmp_10_reg_896(12 downto 4) <= tmp_10_fu_368_p2(12 downto 4);
                tmp_11_reg_903 <= grp_fu_340_p2;
                    tmp_14_reg_913(12 downto 4) <= tmp_14_fu_404_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                img_addr_1_reg_920 <= tmp_16_cast_fu_419_p1(12 - 1 downto 0);
                img_addr_4_reg_925 <= tmp_17_cast_fu_429_p1(12 - 1 downto 0);
                img_addr_7_reg_930 <= tmp_18_cast_fu_439_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                img_load_3_reg_1008 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                img_load_8_reg_1044 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    j_1_cast_cast_reg_971(5 downto 0) <= j_1_cast_cast_fu_497_p1(5 downto 0);
                r_V_reg_966 <= r_V_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_1_reg_960 <= j_1_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                r_V_0_2_reg_1049 <= r_V_0_2_fu_587_p2;
                r_V_1_reg_1054 <= r_V_1_fu_600_p2;
                r_V_2_1_reg_1066 <= r_V_2_1_fu_627_p2;
                r_V_2_2_reg_1071 <= r_V_2_2_fu_640_p2;
                r_V_2_reg_1060 <= r_V_2_fu_613_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                r_V_1_2_reg_1028 <= r_V_1_2_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_267 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_271 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_275 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_279 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_283 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then
                reg_287 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then
                reg_291 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                tmp10_reg_1086 <= tmp10_fu_728_p2;
                tmp14_reg_1091 <= tmp14_fu_757_p2;
                tmp4_reg_1081 <= tmp4_fu_709_p2;
                tmp7_reg_1076 <= tmp7_fu_680_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp1_reg_1038 <= grp_fu_821_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp8_reg_1002 <= grp_fu_813_p3;
                tmp_20_reg_987 <= tmp_20_fu_519_p2;
                tmp_23_reg_992 <= tmp_23_fu_534_p2;
                tmp_24_reg_997 <= tmp_24_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_21_reg_955 <= tmp_21_fu_472_p2;
                    tmp_2_cast_cast_reg_944(5 downto 0) <= tmp_2_cast_cast_fu_459_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond2_fu_444_p2))) then
                tmp_2_reg_938 <= tmp_2_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_5_reg_1096 <= tmp_5_fu_801_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_8_reg_874(12 downto 4) <= tmp_8_fu_319_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_325_p2 = ap_const_lv1_0))) then
                tmp_reg_884 <= tmp_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                window_V_load_6_reg_1023 <= window_V_q0;
            end if;
        end if;
    end process;
    tmp_8_reg_874(3 downto 0) <= "0000";
    tmp_10_reg_896(3 downto 0) <= "0000";
    tmp_14_reg_913(3 downto 0) <= "0000";
    tmp_2_cast_cast_reg_944(12 downto 6) <= "0000000";
    j_1_cast_cast_reg_971(12 downto 6) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_325_p2, ap_CS_fsm_state5, exitcond2_fu_444_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond2_fu_444_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_325_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_325_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_325_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_325_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_325_p2 <= "1" when (i_reg_243 = ap_const_lv6_3F) else "0";
    exitcond2_fu_444_p2 <= "1" when (j_reg_255 = ap_const_lv6_2F) else "0";
    grp_fu_340_p0 <= grp_fu_340_p00(6 - 1 downto 0);
    grp_fu_340_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_884),12));
    grp_fu_340_p1 <= ap_const_lv12_2E(7 - 1 downto 0);
    grp_fu_813_p1 <= grp_fu_813_p10(8 - 1 downto 0);
    grp_fu_813_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_271),11));
    grp_fu_821_p1 <= grp_fu_821_p10(8 - 1 downto 0);
    grp_fu_821_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_283),11));
    i_1_fu_374_p2 <= std_logic_vector(unsigned(i_reg_243) + unsigned(ap_const_lv6_1));

    img_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state12, img_addr_1_reg_920, img_addr_4_reg_925, img_addr_7_reg_930, tmp_19_cast_fu_467_p1, tmp_23_cast_fu_505_p1, tmp_20_cast_fu_514_p1, tmp_24_cast_fu_542_p1, tmp_21_cast_fu_546_p1, tmp_25_cast_fu_564_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            img_address0 <= tmp_25_cast_fu_564_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            img_address0 <= img_addr_7_reg_930;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            img_address0 <= tmp_21_cast_fu_546_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            img_address0 <= tmp_24_cast_fu_542_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            img_address0 <= img_addr_4_reg_925;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            img_address0 <= tmp_20_cast_fu_514_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            img_address0 <= tmp_23_cast_fu_505_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            img_address0 <= img_addr_1_reg_920;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            img_address0 <= tmp_19_cast_fu_467_p1(12 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_960),13));
    j_1_fu_477_p2 <= std_logic_vector(unsigned(j_reg_255) + unsigned(ap_const_lv6_1));
    j_cast_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_255),13));
    p_shl1_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_307_p3),13));
    p_shl2_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_380_p3),13));
    p_shl3_cast_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_392_p3),13));
    p_shl4_cast_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_346_p3),13));
    p_shl5_cast_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_357_p3),13));
    p_shl_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_295_p3),13));
    r_V_0_2_fu_587_p0 <= reg_267;
    r_V_0_2_fu_587_p1 <= r_V_0_2_fu_587_p10(8 - 1 downto 0);
    r_V_0_2_fu_587_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_271),11));
    r_V_0_2_fu_587_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_0_2_fu_587_p0) * signed('0' &r_V_0_2_fu_587_p1))), 11));
    r_V_1_2_fu_558_p0 <= reg_287;
    r_V_1_2_fu_558_p1 <= r_V_1_2_fu_558_p10(8 - 1 downto 0);
    r_V_1_2_fu_558_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_291),11));
    r_V_1_2_fu_558_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_2_fu_558_p0) * signed('0' &r_V_1_2_fu_558_p1))), 11));
    r_V_1_fu_600_p0 <= reg_275;
    r_V_1_fu_600_p1 <= r_V_1_fu_600_p10(8 - 1 downto 0);
    r_V_1_fu_600_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_3_reg_1008),11));
    r_V_1_fu_600_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_fu_600_p0) * signed('0' &r_V_1_fu_600_p1))), 11));
    r_V_2_1_fu_627_p0 <= reg_287;
    r_V_2_1_fu_627_p1 <= r_V_2_1_fu_627_p10(8 - 1 downto 0);
    r_V_2_1_fu_627_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_283),11));
    r_V_2_1_fu_627_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_1_fu_627_p0) * signed('0' &r_V_2_1_fu_627_p1))), 11));
    r_V_2_2_fu_640_p0 <= reg_279;
    r_V_2_2_fu_640_p1 <= r_V_2_2_fu_640_p10(8 - 1 downto 0);
    r_V_2_2_fu_640_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_8_reg_1044),11));
    r_V_2_2_fu_640_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_2_fu_640_p0) * signed('0' &r_V_2_2_fu_640_p1))), 11));
    r_V_2_fu_613_p0 <= window_V_load_6_reg_1023;
    r_V_2_fu_613_p1 <= r_V_2_fu_613_p10(8 - 1 downto 0);
    r_V_2_fu_613_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_291),11));
    r_V_2_fu_613_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_613_p0) * signed('0' &r_V_2_fu_613_p1))), 11));
    r_V_fu_491_p0 <= reg_267;
    r_V_fu_491_p1 <= r_V_fu_491_p10(8 - 1 downto 0);
    r_V_fu_491_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_271),11));
    r_V_fu_491_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_491_p0) * signed('0' &r_V_fu_491_p1))), 11));
    res_V_address0 <= tmp_22_cast_fu_809_p1(12 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= tmp_5_reg_1096;

    res_V_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_result_V_1_2_2_fu_769_p2 <= std_logic_vector(signed(tmp7_cast_fu_763_p1) + signed(tmp10_cast_fu_766_p1));
        tmp10_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_reg_1081),15));

    tmp10_fu_728_p2 <= std_logic_vector(signed(tmp15_cast_fu_721_p1) + signed(tmp16_cast_fu_725_p1));
        tmp11_cast_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1038),14));

        tmp12_cast_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_699_p2),14));

    tmp12_fu_737_p2 <= std_logic_vector(signed(tmp_2_2_cast_fu_664_p1) + signed(tmp_0_2_cast_fu_646_p1));
        tmp13_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_689_p2),13));

    tmp13_fu_747_p2 <= std_logic_vector(signed(tmp_8_cast_fu_652_p1) + signed(tmp20_cast_fu_743_p1));
        tmp14_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_reg_1086),15));

    tmp14_fu_757_p2 <= std_logic_vector(signed(tmp18_cast_fu_734_p1) + signed(tmp19_cast_fu_753_p1));
        tmp15_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_715_p2),13));

        tmp16_cast_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1038),13));

        tmp17_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp14_reg_1091),15));

        tmp18_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1002),14));

        tmp19_cast_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp13_fu_747_p2),14));

        tmp20_cast_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_737_p2),13));

    tmp2_fu_689_p2 <= std_logic_vector(signed(tmp_2_2_cast_fu_664_p1) + signed(tmp_2_1_cast_fu_661_p1));
    tmp3_fu_699_p2 <= std_logic_vector(signed(tmp_2_cast_fu_655_p1) + signed(tmp13_cast_fu_695_p1));
    tmp4_fu_709_p2 <= std_logic_vector(signed(tmp11_cast_fu_686_p1) + signed(tmp12_cast_fu_705_p1));
    tmp5_fu_715_p2 <= std_logic_vector(signed(tmp_2_1_cast_fu_661_p1) + signed(tmp_15_cast_fu_658_p1));
        tmp7_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_1076),15));

    tmp7_fu_680_p2 <= std_logic_vector(signed(tmp8_cast_fu_667_p1) + signed(tmp9_cast_fu_676_p1));
        tmp8_cast_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1002),13));

        tmp9_cast_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_fu_670_p2),13));

    tmp9_fu_670_p2 <= std_logic_vector(signed(tmp_1_cast_fu_649_p1) + signed(tmp_0_2_cast_fu_646_p1));
        tmp_0_2_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_0_2_reg_1049),12));

    tmp_10_fu_368_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_353_p1) - unsigned(p_shl5_cast_fu_364_p1));
    tmp_12_fu_380_p3 <= (i_1_fu_374_p2 & ap_const_lv6_0);
    tmp_13_fu_392_p3 <= (i_1_fu_374_p2 & ap_const_lv4_0);
    tmp_14_fu_404_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_388_p1) - unsigned(p_shl3_cast_fu_400_p1));
        tmp_15_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1060),12));

    tmp_15_fu_414_p2 <= std_logic_vector(unsigned(tmp_10_reg_896) + unsigned(j_cast_cast_fu_410_p1));
        tmp_16_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_414_p2),32));

    tmp_16_fu_424_p2 <= std_logic_vector(unsigned(tmp_8_reg_874) + unsigned(j_cast_cast_fu_410_p1));
        tmp_17_cast_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_424_p2),32));

    tmp_17_fu_434_p2 <= std_logic_vector(unsigned(tmp_14_reg_913) + unsigned(j_cast_cast_fu_410_p1));
        tmp_18_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_434_p2),32));

    tmp_18_fu_462_p2 <= std_logic_vector(unsigned(tmp_10_reg_896) + unsigned(tmp_2_cast_cast_fu_459_p1));
        tmp_19_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_462_p2),32));

    tmp_19_fu_510_p2 <= std_logic_vector(unsigned(tmp_8_reg_874) + unsigned(tmp_2_cast_cast_reg_944));
        tmp_1_cast_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1054),12));

        tmp_20_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_510_p2),32));

    tmp_20_fu_519_p2 <= std_logic_vector(unsigned(tmp_14_reg_913) + unsigned(tmp_2_cast_cast_reg_944));
        tmp_21_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_reg_987),32));

    tmp_21_fu_472_p2 <= std_logic_vector(unsigned(tmp_11_reg_903) + unsigned(tmp_2_cast_cast6_fu_456_p1));
    tmp_22_cast_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_955),32));
    tmp_22_fu_500_p2 <= std_logic_vector(unsigned(tmp_10_reg_896) + unsigned(j_1_cast_cast_fu_497_p1));
        tmp_23_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_22_fu_500_p2),32));

    tmp_23_fu_534_p2 <= std_logic_vector(unsigned(tmp_8_reg_874) + unsigned(j_1_cast_cast_reg_971));
        tmp_24_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_reg_992),32));

    tmp_24_fu_538_p2 <= std_logic_vector(unsigned(tmp_14_reg_913) + unsigned(j_1_cast_cast_reg_971));
        tmp_25_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_reg_997),32));

    tmp_25_fu_775_p3 <= temp_result_V_1_2_2_fu_769_p2(14 downto 14);
        tmp_2_1_cast_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_1_reg_1066),12));

        tmp_2_2_cast_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_2_reg_1071),12));

    tmp_2_cast_cast6_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_938),12));
    tmp_2_cast_cast_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_938),13));
        tmp_2_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1060),13));

    tmp_2_fu_450_p2 <= std_logic_vector(unsigned(j_reg_255) + unsigned(ap_const_lv6_3F));
    tmp_3_fu_357_p3 <= (tmp_reg_884 & ap_const_lv4_0);
    tmp_4_fu_795_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(tmp_s_fu_789_p2));
    tmp_5_fu_801_p3 <= 
        tmp_4_fu_795_p2 when (tmp_25_fu_775_p3(0) = '1') else 
        tmp_s_fu_789_p2;
    tmp_6_fu_295_p3 <= (i_reg_243 & ap_const_lv6_0);
    tmp_7_fu_307_p3 <= (i_reg_243 & ap_const_lv4_0);
        tmp_8_cast_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1054),13));

    tmp_8_fu_319_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_303_p1) - unsigned(p_shl1_cast_fu_315_p1));
    tmp_9_fu_346_p3 <= (tmp_reg_884 & ap_const_lv6_0);
    tmp_fu_331_p2 <= std_logic_vector(unsigned(i_reg_243) + unsigned(ap_const_lv6_3F));
    tmp_s_fu_789_p2 <= std_logic_vector(signed(tmp14_cast_fu_783_p1) + signed(tmp17_cast_fu_786_p1));

    window_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            window_V_address0 <= ap_const_lv32_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            window_V_address0 <= ap_const_lv32_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            window_V_address0 <= ap_const_lv32_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            window_V_address0 <= ap_const_lv32_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            window_V_address0 <= ap_const_lv32_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            window_V_address0 <= ap_const_lv32_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            window_V_address0 <= ap_const_lv32_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            window_V_address0 <= ap_const_lv32_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            window_V_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        else 
            window_V_address0 <= "XXXX";
        end if; 
    end process;


    window_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            window_V_ce0 <= ap_const_logic_1;
        else 
            window_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
