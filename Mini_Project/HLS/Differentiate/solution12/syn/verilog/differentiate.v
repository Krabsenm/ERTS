// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.989667,HLS_SYN_LAT=43029,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=1904,HLS_SYN_LUT=1444}" *)

module differentiate (
        ap_clk,
        ap_rst_n,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0,
        s_axi_diff_io_AWVALID,
        s_axi_diff_io_AWREADY,
        s_axi_diff_io_AWADDR,
        s_axi_diff_io_WVALID,
        s_axi_diff_io_WREADY,
        s_axi_diff_io_WDATA,
        s_axi_diff_io_WSTRB,
        s_axi_diff_io_ARVALID,
        s_axi_diff_io_ARREADY,
        s_axi_diff_io_ARADDR,
        s_axi_diff_io_RVALID,
        s_axi_diff_io_RREADY,
        s_axi_diff_io_RDATA,
        s_axi_diff_io_RRESP,
        s_axi_diff_io_BVALID,
        s_axi_diff_io_BREADY,
        s_axi_diff_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;
parameter    C_S_AXI_DIFF_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_DIFF_IO_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIFF_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;
input   s_axi_diff_io_AWVALID;
output   s_axi_diff_io_AWREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_AWADDR;
input   s_axi_diff_io_WVALID;
output   s_axi_diff_io_WREADY;
input  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_WDATA;
input  [C_S_AXI_DIFF_IO_WSTRB_WIDTH - 1:0] s_axi_diff_io_WSTRB;
input   s_axi_diff_io_ARVALID;
output   s_axi_diff_io_ARREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_ARADDR;
output   s_axi_diff_io_RVALID;
input   s_axi_diff_io_RREADY;
output  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_RDATA;
output  [1:0] s_axi_diff_io_RRESP;
output   s_axi_diff_io_BVALID;
input   s_axi_diff_io_BREADY;
output  [1:0] s_axi_diff_io_BRESP;
output   interrupt;

reg res_V_ce0;
reg res_V_we0;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [11:0] img_address0;
reg    img_ce0;
wire   [7:0] img_q0;
reg   [3:0] window_V_address0;
reg    window_V_ce0;
wire   [2:0] window_V_q0;
reg   [2:0] reg_267;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state8;
reg   [7:0] reg_271;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg  signed [2:0] reg_275;
reg  signed [2:0] reg_279;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
reg   [7:0] reg_283;
wire    ap_CS_fsm_state11;
reg   [2:0] reg_287;
wire    ap_CS_fsm_state13;
reg   [7:0] reg_291;
wire    ap_CS_fsm_state12;
wire   [12:0] tmp_8_fu_319_p2;
reg   [12:0] tmp_8_reg_874;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_fu_331_p2;
reg   [5:0] tmp_reg_884;
wire   [0:0] exitcond1_fu_325_p2;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_10_fu_368_p2;
reg   [12:0] tmp_10_reg_896;
wire    ap_CS_fsm_state4;
wire   [11:0] grp_fu_340_p2;
reg   [11:0] tmp_11_reg_903;
wire   [5:0] i_1_fu_374_p2;
reg   [5:0] i_1_reg_908;
wire   [12:0] tmp_14_fu_404_p2;
reg   [12:0] tmp_14_reg_913;
reg   [11:0] img_addr_1_reg_920;
wire    ap_CS_fsm_state5;
reg   [11:0] img_addr_4_reg_925;
reg   [11:0] img_addr_7_reg_930;
wire   [5:0] tmp_2_fu_450_p2;
reg   [5:0] tmp_2_reg_938;
wire   [0:0] exitcond2_fu_444_p2;
wire   [12:0] tmp_2_cast_cast_fu_459_p1;
reg   [12:0] tmp_2_cast_cast_reg_944;
wire   [11:0] tmp_21_fu_472_p2;
reg   [11:0] tmp_21_reg_955;
wire   [5:0] j_1_fu_477_p2;
reg   [5:0] j_1_reg_960;
wire   [10:0] r_V_fu_491_p2;
reg  signed [10:0] r_V_reg_966;
wire   [12:0] j_1_cast_cast_fu_497_p1;
reg   [12:0] j_1_cast_cast_reg_971;
wire   [12:0] tmp_20_fu_519_p2;
reg   [12:0] tmp_20_reg_987;
wire   [12:0] tmp_23_fu_534_p2;
reg   [12:0] tmp_23_reg_992;
wire   [12:0] tmp_24_fu_538_p2;
reg   [12:0] tmp_24_reg_997;
wire  signed [11:0] grp_fu_813_p3;
reg  signed [11:0] tmp8_reg_1002;
reg   [7:0] img_load_3_reg_1008;
reg   [2:0] window_V_load_6_reg_1023;
wire   [10:0] r_V_1_2_fu_558_p2;
reg  signed [10:0] r_V_1_2_reg_1028;
wire  signed [11:0] grp_fu_821_p3;
reg  signed [11:0] tmp1_reg_1038;
reg   [7:0] img_load_8_reg_1044;
wire    ap_CS_fsm_state15;
wire   [10:0] r_V_0_2_fu_587_p2;
reg   [10:0] r_V_0_2_reg_1049;
wire    ap_CS_fsm_state16;
wire   [10:0] r_V_1_fu_600_p2;
reg   [10:0] r_V_1_reg_1054;
wire   [10:0] r_V_2_fu_613_p2;
reg   [10:0] r_V_2_reg_1060;
wire   [10:0] r_V_2_1_fu_627_p2;
reg   [10:0] r_V_2_1_reg_1066;
wire   [10:0] r_V_2_2_fu_640_p2;
reg   [10:0] r_V_2_2_reg_1071;
wire   [12:0] tmp7_fu_680_p2;
reg   [12:0] tmp7_reg_1076;
wire    ap_CS_fsm_state17;
wire   [13:0] tmp4_fu_709_p2;
reg   [13:0] tmp4_reg_1081;
wire   [12:0] tmp10_fu_728_p2;
reg   [12:0] tmp10_reg_1086;
wire   [13:0] tmp14_fu_757_p2;
reg   [13:0] tmp14_reg_1091;
wire   [14:0] tmp_5_fu_801_p3;
reg   [14:0] tmp_5_reg_1096;
wire    ap_CS_fsm_state18;
reg   [5:0] i_reg_243;
reg   [5:0] j_reg_255;
wire    ap_CS_fsm_state19;
wire  signed [31:0] tmp_16_cast_fu_419_p1;
wire  signed [31:0] tmp_17_cast_fu_429_p1;
wire  signed [31:0] tmp_18_cast_fu_439_p1;
wire  signed [31:0] tmp_19_cast_fu_467_p1;
wire  signed [31:0] tmp_23_cast_fu_505_p1;
wire  signed [31:0] tmp_20_cast_fu_514_p1;
wire  signed [31:0] tmp_24_cast_fu_542_p1;
wire  signed [31:0] tmp_21_cast_fu_546_p1;
wire  signed [31:0] tmp_25_cast_fu_564_p1;
wire   [31:0] tmp_22_cast_fu_809_p1;
wire   [11:0] tmp_6_fu_295_p3;
wire   [9:0] tmp_7_fu_307_p3;
wire   [12:0] p_shl_cast_fu_303_p1;
wire   [12:0] p_shl1_cast_fu_315_p1;
wire   [5:0] grp_fu_340_p0;
wire   [6:0] grp_fu_340_p1;
wire   [11:0] tmp_9_fu_346_p3;
wire   [9:0] tmp_3_fu_357_p3;
wire   [12:0] p_shl4_cast_fu_353_p1;
wire   [12:0] p_shl5_cast_fu_364_p1;
wire   [11:0] tmp_12_fu_380_p3;
wire   [9:0] tmp_13_fu_392_p3;
wire   [12:0] p_shl2_cast_fu_388_p1;
wire   [12:0] p_shl3_cast_fu_400_p1;
wire   [12:0] j_cast_cast_fu_410_p1;
wire   [12:0] tmp_15_fu_414_p2;
wire   [12:0] tmp_16_fu_424_p2;
wire   [12:0] tmp_17_fu_434_p2;
wire   [12:0] tmp_18_fu_462_p2;
wire   [11:0] tmp_2_cast_cast6_fu_456_p1;
wire  signed [2:0] r_V_fu_491_p0;
wire   [7:0] r_V_fu_491_p1;
wire   [12:0] tmp_22_fu_500_p2;
wire   [12:0] tmp_19_fu_510_p2;
wire  signed [2:0] r_V_1_2_fu_558_p0;
wire   [7:0] r_V_1_2_fu_558_p1;
wire  signed [2:0] r_V_0_2_fu_587_p0;
wire   [7:0] r_V_0_2_fu_587_p1;
wire  signed [2:0] r_V_1_fu_600_p0;
wire   [7:0] r_V_1_fu_600_p1;
wire  signed [2:0] r_V_2_fu_613_p0;
wire   [7:0] r_V_2_fu_613_p1;
wire  signed [2:0] r_V_2_1_fu_627_p0;
wire   [7:0] r_V_2_1_fu_627_p1;
wire  signed [2:0] r_V_2_2_fu_640_p0;
wire   [7:0] r_V_2_2_fu_640_p1;
wire  signed [11:0] tmp_1_cast_fu_649_p1;
wire  signed [11:0] tmp_0_2_cast_fu_646_p1;
wire   [11:0] tmp9_fu_670_p2;
wire  signed [12:0] tmp8_cast_fu_667_p1;
wire  signed [12:0] tmp9_cast_fu_676_p1;
wire  signed [11:0] tmp_2_2_cast_fu_664_p1;
wire  signed [11:0] tmp_2_1_cast_fu_661_p1;
wire   [11:0] tmp2_fu_689_p2;
wire  signed [12:0] tmp_2_cast_fu_655_p1;
wire  signed [12:0] tmp13_cast_fu_695_p1;
wire   [12:0] tmp3_fu_699_p2;
wire  signed [13:0] tmp11_cast_fu_686_p1;
wire  signed [13:0] tmp12_cast_fu_705_p1;
wire  signed [11:0] tmp_15_cast_fu_658_p1;
wire   [11:0] tmp5_fu_715_p2;
wire  signed [12:0] tmp15_cast_fu_721_p1;
wire  signed [12:0] tmp16_cast_fu_725_p1;
wire   [11:0] tmp12_fu_737_p2;
wire  signed [12:0] tmp_8_cast_fu_652_p1;
wire  signed [12:0] tmp20_cast_fu_743_p1;
wire   [12:0] tmp13_fu_747_p2;
wire  signed [13:0] tmp18_cast_fu_734_p1;
wire  signed [13:0] tmp19_cast_fu_753_p1;
wire  signed [14:0] tmp7_cast_fu_763_p1;
wire  signed [14:0] tmp10_cast_fu_766_p1;
wire   [14:0] temp_result_V_1_2_2_fu_769_p2;
wire  signed [14:0] tmp14_cast_fu_783_p1;
wire  signed [14:0] tmp17_cast_fu_786_p1;
wire   [14:0] tmp_s_fu_789_p2;
wire   [0:0] tmp_25_fu_775_p3;
wire   [14:0] tmp_4_fu_795_p2;
wire   [7:0] grp_fu_813_p1;
wire   [7:0] grp_fu_821_p1;
reg   [18:0] ap_NS_fsm;
wire   [11:0] grp_fu_340_p00;
wire   [10:0] grp_fu_813_p10;
wire   [10:0] grp_fu_821_p10;
wire   [10:0] r_V_0_2_fu_587_p10;
wire   [10:0] r_V_1_2_fu_558_p10;
wire   [10:0] r_V_1_fu_600_p10;
wire   [10:0] r_V_2_1_fu_627_p10;
wire   [10:0] r_V_2_2_fu_640_p10;
wire   [10:0] r_V_2_fu_613_p10;
wire   [10:0] r_V_fu_491_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

differentiate_diff_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIFF_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIFF_IO_DATA_WIDTH ))
differentiate_diff_io_s_axi_U(
    .AWVALID(s_axi_diff_io_AWVALID),
    .AWREADY(s_axi_diff_io_AWREADY),
    .AWADDR(s_axi_diff_io_AWADDR),
    .WVALID(s_axi_diff_io_WVALID),
    .WREADY(s_axi_diff_io_WREADY),
    .WDATA(s_axi_diff_io_WDATA),
    .WSTRB(s_axi_diff_io_WSTRB),
    .ARVALID(s_axi_diff_io_ARVALID),
    .ARREADY(s_axi_diff_io_ARREADY),
    .ARADDR(s_axi_diff_io_ARADDR),
    .RVALID(s_axi_diff_io_RVALID),
    .RREADY(s_axi_diff_io_RREADY),
    .RDATA(s_axi_diff_io_RDATA),
    .RRESP(s_axi_diff_io_RRESP),
    .BVALID(s_axi_diff_io_BVALID),
    .BREADY(s_axi_diff_io_BREADY),
    .BRESP(s_axi_diff_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .img_address0(img_address0),
    .img_ce0(img_ce0),
    .img_q0(img_q0),
    .window_V_address0(window_V_address0),
    .window_V_ce0(window_V_ce0),
    .window_V_q0(window_V_q0)
);

differentiate_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
differentiate_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_340_p0),
    .din1(grp_fu_340_p1),
    .ce(1'b1),
    .dout(grp_fu_340_p2)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U1(
    .din0(reg_275),
    .din1(grp_fu_813_p1),
    .din2(r_V_reg_966),
    .dout(grp_fu_813_p3)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U2(
    .din0(reg_279),
    .din1(grp_fu_821_p1),
    .din2(r_V_1_2_reg_1028),
    .dout(grp_fu_821_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_444_p2 == 1'd1))) begin
        i_reg_243 <= i_1_reg_908;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_243 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_reg_255 <= j_1_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_255 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_908 <= i_1_fu_374_p2;
        tmp_10_reg_896[12 : 4] <= tmp_10_fu_368_p2[12 : 4];
        tmp_11_reg_903 <= grp_fu_340_p2;
        tmp_14_reg_913[12 : 4] <= tmp_14_fu_404_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        img_addr_1_reg_920 <= tmp_16_cast_fu_419_p1;
        img_addr_4_reg_925 <= tmp_17_cast_fu_429_p1;
        img_addr_7_reg_930 <= tmp_18_cast_fu_439_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        img_load_3_reg_1008 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        img_load_8_reg_1044 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_cast_cast_reg_971[5 : 0] <= j_1_cast_cast_fu_497_p1[5 : 0];
        r_V_reg_966 <= r_V_fu_491_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_960 <= j_1_fu_477_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_V_0_2_reg_1049 <= r_V_0_2_fu_587_p2;
        r_V_1_reg_1054 <= r_V_1_fu_600_p2;
        r_V_2_1_reg_1066 <= r_V_2_1_fu_627_p2;
        r_V_2_2_reg_1071 <= r_V_2_2_fu_640_p2;
        r_V_2_reg_1060 <= r_V_2_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_V_1_2_reg_1028 <= r_V_1_2_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_267 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_271 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_275 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_279 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_283 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_287 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_291 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp10_reg_1086 <= tmp10_fu_728_p2;
        tmp14_reg_1091 <= tmp14_fu_757_p2;
        tmp4_reg_1081 <= tmp4_fu_709_p2;
        tmp7_reg_1076 <= tmp7_fu_680_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp1_reg_1038 <= grp_fu_821_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp8_reg_1002 <= grp_fu_813_p3;
        tmp_20_reg_987 <= tmp_20_fu_519_p2;
        tmp_23_reg_992 <= tmp_23_fu_534_p2;
        tmp_24_reg_997 <= tmp_24_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_21_reg_955 <= tmp_21_fu_472_p2;
        tmp_2_cast_cast_reg_944[5 : 0] <= tmp_2_cast_cast_fu_459_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_444_p2))) begin
        tmp_2_reg_938 <= tmp_2_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_5_reg_1096 <= tmp_5_fu_801_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_8_reg_874[12 : 4] <= tmp_8_fu_319_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_325_p2 == 1'd0))) begin
        tmp_reg_884 <= tmp_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        window_V_load_6_reg_1023 <= window_V_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_325_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_325_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        img_address0 = tmp_25_cast_fu_564_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        img_address0 = img_addr_7_reg_930;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        img_address0 = tmp_21_cast_fu_546_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        img_address0 = tmp_24_cast_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        img_address0 = img_addr_4_reg_925;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        img_address0 = tmp_20_cast_fu_514_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        img_address0 = tmp_23_cast_fu_505_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        img_address0 = img_addr_1_reg_920;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        img_address0 = tmp_19_cast_fu_467_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        window_V_address0 = 32'd8;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        window_V_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        window_V_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        window_V_address0 = 32'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        window_V_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_V_address0 = 32'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_address0 = 32'd2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        window_V_address0 = 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        window_V_address0 = 32'd0;
    end else begin
        window_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state5))) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_444_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_325_p2 = ((i_reg_243 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_444_p2 = ((j_reg_255 == 6'd47) ? 1'b1 : 1'b0);

assign grp_fu_340_p0 = grp_fu_340_p00;

assign grp_fu_340_p00 = tmp_reg_884;

assign grp_fu_340_p1 = 12'd46;

assign grp_fu_813_p1 = grp_fu_813_p10;

assign grp_fu_813_p10 = reg_271;

assign grp_fu_821_p1 = grp_fu_821_p10;

assign grp_fu_821_p10 = reg_283;

assign i_1_fu_374_p2 = (i_reg_243 + 6'd1);

assign j_1_cast_cast_fu_497_p1 = j_1_reg_960;

assign j_1_fu_477_p2 = (j_reg_255 + 6'd1);

assign j_cast_cast_fu_410_p1 = j_reg_255;

assign p_shl1_cast_fu_315_p1 = tmp_7_fu_307_p3;

assign p_shl2_cast_fu_388_p1 = tmp_12_fu_380_p3;

assign p_shl3_cast_fu_400_p1 = tmp_13_fu_392_p3;

assign p_shl4_cast_fu_353_p1 = tmp_9_fu_346_p3;

assign p_shl5_cast_fu_364_p1 = tmp_3_fu_357_p3;

assign p_shl_cast_fu_303_p1 = tmp_6_fu_295_p3;

assign r_V_0_2_fu_587_p0 = reg_267;

assign r_V_0_2_fu_587_p1 = r_V_0_2_fu_587_p10;

assign r_V_0_2_fu_587_p10 = reg_271;

assign r_V_0_2_fu_587_p2 = ($signed(r_V_0_2_fu_587_p0) * $signed({{1'b0}, {r_V_0_2_fu_587_p1}}));

assign r_V_1_2_fu_558_p0 = reg_287;

assign r_V_1_2_fu_558_p1 = r_V_1_2_fu_558_p10;

assign r_V_1_2_fu_558_p10 = reg_291;

assign r_V_1_2_fu_558_p2 = ($signed(r_V_1_2_fu_558_p0) * $signed({{1'b0}, {r_V_1_2_fu_558_p1}}));

assign r_V_1_fu_600_p0 = reg_275;

assign r_V_1_fu_600_p1 = r_V_1_fu_600_p10;

assign r_V_1_fu_600_p10 = img_load_3_reg_1008;

assign r_V_1_fu_600_p2 = ($signed(r_V_1_fu_600_p0) * $signed({{1'b0}, {r_V_1_fu_600_p1}}));

assign r_V_2_1_fu_627_p0 = reg_287;

assign r_V_2_1_fu_627_p1 = r_V_2_1_fu_627_p10;

assign r_V_2_1_fu_627_p10 = reg_283;

assign r_V_2_1_fu_627_p2 = ($signed(r_V_2_1_fu_627_p0) * $signed({{1'b0}, {r_V_2_1_fu_627_p1}}));

assign r_V_2_2_fu_640_p0 = reg_279;

assign r_V_2_2_fu_640_p1 = r_V_2_2_fu_640_p10;

assign r_V_2_2_fu_640_p10 = img_load_8_reg_1044;

assign r_V_2_2_fu_640_p2 = ($signed(r_V_2_2_fu_640_p0) * $signed({{1'b0}, {r_V_2_2_fu_640_p1}}));

assign r_V_2_fu_613_p0 = window_V_load_6_reg_1023;

assign r_V_2_fu_613_p1 = r_V_2_fu_613_p10;

assign r_V_2_fu_613_p10 = reg_291;

assign r_V_2_fu_613_p2 = ($signed(r_V_2_fu_613_p0) * $signed({{1'b0}, {r_V_2_fu_613_p1}}));

assign r_V_fu_491_p0 = reg_267;

assign r_V_fu_491_p1 = r_V_fu_491_p10;

assign r_V_fu_491_p10 = reg_271;

assign r_V_fu_491_p2 = ($signed(r_V_fu_491_p0) * $signed({{1'b0}, {r_V_fu_491_p1}}));

assign res_V_address0 = tmp_22_cast_fu_809_p1;

assign res_V_d0 = tmp_5_reg_1096;

assign temp_result_V_1_2_2_fu_769_p2 = ($signed(tmp7_cast_fu_763_p1) + $signed(tmp10_cast_fu_766_p1));

assign tmp10_cast_fu_766_p1 = $signed(tmp4_reg_1081);

assign tmp10_fu_728_p2 = ($signed(tmp15_cast_fu_721_p1) + $signed(tmp16_cast_fu_725_p1));

assign tmp11_cast_fu_686_p1 = tmp1_reg_1038;

assign tmp12_cast_fu_705_p1 = $signed(tmp3_fu_699_p2);

assign tmp12_fu_737_p2 = ($signed(tmp_2_2_cast_fu_664_p1) + $signed(tmp_0_2_cast_fu_646_p1));

assign tmp13_cast_fu_695_p1 = $signed(tmp2_fu_689_p2);

assign tmp13_fu_747_p2 = ($signed(tmp_8_cast_fu_652_p1) + $signed(tmp20_cast_fu_743_p1));

assign tmp14_cast_fu_783_p1 = $signed(tmp10_reg_1086);

assign tmp14_fu_757_p2 = ($signed(tmp18_cast_fu_734_p1) + $signed(tmp19_cast_fu_753_p1));

assign tmp15_cast_fu_721_p1 = $signed(tmp5_fu_715_p2);

assign tmp16_cast_fu_725_p1 = tmp1_reg_1038;

assign tmp17_cast_fu_786_p1 = $signed(tmp14_reg_1091);

assign tmp18_cast_fu_734_p1 = tmp8_reg_1002;

assign tmp19_cast_fu_753_p1 = $signed(tmp13_fu_747_p2);

assign tmp20_cast_fu_743_p1 = $signed(tmp12_fu_737_p2);

assign tmp2_fu_689_p2 = ($signed(tmp_2_2_cast_fu_664_p1) + $signed(tmp_2_1_cast_fu_661_p1));

assign tmp3_fu_699_p2 = ($signed(tmp_2_cast_fu_655_p1) + $signed(tmp13_cast_fu_695_p1));

assign tmp4_fu_709_p2 = ($signed(tmp11_cast_fu_686_p1) + $signed(tmp12_cast_fu_705_p1));

assign tmp5_fu_715_p2 = ($signed(tmp_2_1_cast_fu_661_p1) + $signed(tmp_15_cast_fu_658_p1));

assign tmp7_cast_fu_763_p1 = $signed(tmp7_reg_1076);

assign tmp7_fu_680_p2 = ($signed(tmp8_cast_fu_667_p1) + $signed(tmp9_cast_fu_676_p1));

assign tmp8_cast_fu_667_p1 = tmp8_reg_1002;

assign tmp9_cast_fu_676_p1 = $signed(tmp9_fu_670_p2);

assign tmp9_fu_670_p2 = ($signed(tmp_1_cast_fu_649_p1) + $signed(tmp_0_2_cast_fu_646_p1));

assign tmp_0_2_cast_fu_646_p1 = $signed(r_V_0_2_reg_1049);

assign tmp_10_fu_368_p2 = (p_shl4_cast_fu_353_p1 - p_shl5_cast_fu_364_p1);

assign tmp_12_fu_380_p3 = {{i_1_fu_374_p2}, {6'd0}};

assign tmp_13_fu_392_p3 = {{i_1_fu_374_p2}, {4'd0}};

assign tmp_14_fu_404_p2 = (p_shl2_cast_fu_388_p1 - p_shl3_cast_fu_400_p1);

assign tmp_15_cast_fu_658_p1 = $signed(r_V_2_reg_1060);

assign tmp_15_fu_414_p2 = (tmp_10_reg_896 + j_cast_cast_fu_410_p1);

assign tmp_16_cast_fu_419_p1 = $signed(tmp_15_fu_414_p2);

assign tmp_16_fu_424_p2 = (tmp_8_reg_874 + j_cast_cast_fu_410_p1);

assign tmp_17_cast_fu_429_p1 = $signed(tmp_16_fu_424_p2);

assign tmp_17_fu_434_p2 = (tmp_14_reg_913 + j_cast_cast_fu_410_p1);

assign tmp_18_cast_fu_439_p1 = $signed(tmp_17_fu_434_p2);

assign tmp_18_fu_462_p2 = (tmp_10_reg_896 + tmp_2_cast_cast_fu_459_p1);

assign tmp_19_cast_fu_467_p1 = $signed(tmp_18_fu_462_p2);

assign tmp_19_fu_510_p2 = (tmp_8_reg_874 + tmp_2_cast_cast_reg_944);

assign tmp_1_cast_fu_649_p1 = $signed(r_V_1_reg_1054);

assign tmp_20_cast_fu_514_p1 = $signed(tmp_19_fu_510_p2);

assign tmp_20_fu_519_p2 = (tmp_14_reg_913 + tmp_2_cast_cast_reg_944);

assign tmp_21_cast_fu_546_p1 = $signed(tmp_20_reg_987);

assign tmp_21_fu_472_p2 = (tmp_11_reg_903 + tmp_2_cast_cast6_fu_456_p1);

assign tmp_22_cast_fu_809_p1 = tmp_21_reg_955;

assign tmp_22_fu_500_p2 = (tmp_10_reg_896 + j_1_cast_cast_fu_497_p1);

assign tmp_23_cast_fu_505_p1 = $signed(tmp_22_fu_500_p2);

assign tmp_23_fu_534_p2 = (tmp_8_reg_874 + j_1_cast_cast_reg_971);

assign tmp_24_cast_fu_542_p1 = $signed(tmp_23_reg_992);

assign tmp_24_fu_538_p2 = (tmp_14_reg_913 + j_1_cast_cast_reg_971);

assign tmp_25_cast_fu_564_p1 = $signed(tmp_24_reg_997);

assign tmp_25_fu_775_p3 = temp_result_V_1_2_2_fu_769_p2[32'd14];

assign tmp_2_1_cast_fu_661_p1 = $signed(r_V_2_1_reg_1066);

assign tmp_2_2_cast_fu_664_p1 = $signed(r_V_2_2_reg_1071);

assign tmp_2_cast_cast6_fu_456_p1 = tmp_2_reg_938;

assign tmp_2_cast_cast_fu_459_p1 = tmp_2_reg_938;

assign tmp_2_cast_fu_655_p1 = $signed(r_V_2_reg_1060);

assign tmp_2_fu_450_p2 = ($signed(j_reg_255) + $signed(6'd63));

assign tmp_3_fu_357_p3 = {{tmp_reg_884}, {4'd0}};

assign tmp_4_fu_795_p2 = (15'd0 - tmp_s_fu_789_p2);

assign tmp_5_fu_801_p3 = ((tmp_25_fu_775_p3[0:0] === 1'b1) ? tmp_4_fu_795_p2 : tmp_s_fu_789_p2);

assign tmp_6_fu_295_p3 = {{i_reg_243}, {6'd0}};

assign tmp_7_fu_307_p3 = {{i_reg_243}, {4'd0}};

assign tmp_8_cast_fu_652_p1 = $signed(r_V_1_reg_1054);

assign tmp_8_fu_319_p2 = (p_shl_cast_fu_303_p1 - p_shl1_cast_fu_315_p1);

assign tmp_9_fu_346_p3 = {{tmp_reg_884}, {6'd0}};

assign tmp_fu_331_p2 = ($signed(i_reg_243) + $signed(6'd63));

assign tmp_s_fu_789_p2 = ($signed(tmp14_cast_fu_783_p1) + $signed(tmp17_cast_fu_786_p1));

always @ (posedge ap_clk) begin
    tmp_8_reg_874[3:0] <= 4'b0000;
    tmp_10_reg_896[3:0] <= 4'b0000;
    tmp_14_reg_913[3:0] <= 4'b0000;
    tmp_2_cast_cast_reg_944[12:6] <= 7'b0000000;
    j_1_cast_cast_reg_971[12:6] <= 7'b0000000;
end

endmodule //differentiate
