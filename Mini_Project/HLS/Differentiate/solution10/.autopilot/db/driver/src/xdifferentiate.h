// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDIFFERENTIATE_H
#define XDIFFERENTIATE_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdifferentiate_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Diff_io_BaseAddress;
} XDifferentiate_Config;
#endif

typedef struct {
    u32 Diff_io_BaseAddress;
    u32 IsReady;
} XDifferentiate;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDifferentiate_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDifferentiate_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDifferentiate_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDifferentiate_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDifferentiate_Initialize(XDifferentiate *InstancePtr, u16 DeviceId);
XDifferentiate_Config* XDifferentiate_LookupConfig(u16 DeviceId);
int XDifferentiate_CfgInitialize(XDifferentiate *InstancePtr, XDifferentiate_Config *ConfigPtr);
#else
int XDifferentiate_Initialize(XDifferentiate *InstancePtr, const char* InstanceName);
int XDifferentiate_Release(XDifferentiate *InstancePtr);
#endif

void XDifferentiate_Start(XDifferentiate *InstancePtr);
u32 XDifferentiate_IsDone(XDifferentiate *InstancePtr);
u32 XDifferentiate_IsIdle(XDifferentiate *InstancePtr);
u32 XDifferentiate_IsReady(XDifferentiate *InstancePtr);
void XDifferentiate_EnableAutoRestart(XDifferentiate *InstancePtr);
void XDifferentiate_DisableAutoRestart(XDifferentiate *InstancePtr);

u32 XDifferentiate_Get_img_BaseAddress(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_img_HighAddress(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_img_TotalBytes(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_img_BitWidth(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_img_Depth(XDifferentiate *InstancePtr);
u32 XDifferentiate_Write_img_Words(XDifferentiate *InstancePtr, int offset, int *data, int length);
u32 XDifferentiate_Read_img_Words(XDifferentiate *InstancePtr, int offset, int *data, int length);
u32 XDifferentiate_Write_img_Bytes(XDifferentiate *InstancePtr, int offset, char *data, int length);
u32 XDifferentiate_Read_img_Bytes(XDifferentiate *InstancePtr, int offset, char *data, int length);
u32 XDifferentiate_Get_window_V_BaseAddress(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_window_V_HighAddress(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_window_V_TotalBytes(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_window_V_BitWidth(XDifferentiate *InstancePtr);
u32 XDifferentiate_Get_window_V_Depth(XDifferentiate *InstancePtr);
u32 XDifferentiate_Write_window_V_Words(XDifferentiate *InstancePtr, int offset, int *data, int length);
u32 XDifferentiate_Read_window_V_Words(XDifferentiate *InstancePtr, int offset, int *data, int length);
u32 XDifferentiate_Write_window_V_Bytes(XDifferentiate *InstancePtr, int offset, char *data, int length);
u32 XDifferentiate_Read_window_V_Bytes(XDifferentiate *InstancePtr, int offset, char *data, int length);

void XDifferentiate_InterruptGlobalEnable(XDifferentiate *InstancePtr);
void XDifferentiate_InterruptGlobalDisable(XDifferentiate *InstancePtr);
void XDifferentiate_InterruptEnable(XDifferentiate *InstancePtr, u32 Mask);
void XDifferentiate_InterruptDisable(XDifferentiate *InstancePtr, u32 Mask);
void XDifferentiate_InterruptClear(XDifferentiate *InstancePtr, u32 Mask);
u32 XDifferentiate_InterruptGetEnabled(XDifferentiate *InstancePtr);
u32 XDifferentiate_InterruptGetStatus(XDifferentiate *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
