// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=111477,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=875,HLS_SYN_LUT=628}" *)

module differentiate (
        ap_clk,
        ap_rst_n,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0,
        s_axi_diff_io_AWVALID,
        s_axi_diff_io_AWREADY,
        s_axi_diff_io_AWADDR,
        s_axi_diff_io_WVALID,
        s_axi_diff_io_WREADY,
        s_axi_diff_io_WDATA,
        s_axi_diff_io_WSTRB,
        s_axi_diff_io_ARVALID,
        s_axi_diff_io_ARREADY,
        s_axi_diff_io_ARADDR,
        s_axi_diff_io_RVALID,
        s_axi_diff_io_RREADY,
        s_axi_diff_io_RDATA,
        s_axi_diff_io_RRESP,
        s_axi_diff_io_BVALID,
        s_axi_diff_io_BREADY,
        s_axi_diff_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;
parameter    C_S_AXI_DIFF_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_DIFF_IO_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIFF_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;
input   s_axi_diff_io_AWVALID;
output   s_axi_diff_io_AWREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_AWADDR;
input   s_axi_diff_io_WVALID;
output   s_axi_diff_io_WREADY;
input  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_WDATA;
input  [C_S_AXI_DIFF_IO_WSTRB_WIDTH - 1:0] s_axi_diff_io_WSTRB;
input   s_axi_diff_io_ARVALID;
output   s_axi_diff_io_ARREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_ARADDR;
output   s_axi_diff_io_RVALID;
input   s_axi_diff_io_RREADY;
output  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_RDATA;
output  [1:0] s_axi_diff_io_RRESP;
output   s_axi_diff_io_BVALID;
input   s_axi_diff_io_BREADY;
output  [1:0] s_axi_diff_io_BRESP;
output   interrupt;

reg res_V_ce0;
reg res_V_we0;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [11:0] img_address0;
reg    img_ce0;
wire   [7:0] img_q0;
reg   [3:0] window_V_address0;
reg    window_V_ce0;
wire   [2:0] window_V_q0;
reg   [7:0] reg_206;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state12;
reg  signed [2:0] reg_210;
wire    ap_CS_fsm_state11;
wire   [5:0] tmp_fu_220_p2;
reg   [5:0] tmp_reg_492;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_214_p2;
wire    ap_CS_fsm_state3;
wire   [11:0] grp_fu_229_p2;
reg   [11:0] tmp_3_reg_503;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_2_fu_241_p2;
reg   [5:0] tmp_2_reg_511;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_235_p2;
reg   [11:0] res_V_addr_reg_516;
wire   [5:0] i_1_fu_261_p2;
wire   [4:0] tmp_11_fu_287_p2;
reg   [4:0] tmp_11_reg_526;
wire    ap_CS_fsm_state6;
wire   [1:0] ii_1_fu_299_p2;
reg   [1:0] ii_1_reg_535;
wire   [12:0] tmp_16_fu_334_p2;
reg   [12:0] tmp_16_reg_540;
wire   [0:0] exitcond3_fu_293_p2;
wire   [14:0] tmp_7_fu_358_p3;
reg   [14:0] tmp_7_reg_546;
wire   [5:0] jj_cast2_fu_366_p1;
reg   [5:0] jj_cast2_reg_551;
wire    ap_CS_fsm_state7;
wire   [5:0] tmp_9_fu_370_p2;
reg   [5:0] tmp_9_reg_556;
wire    ap_CS_fsm_state8;
wire  signed [15:0] grp_fu_474_p3;
reg  signed [15:0] temp_result_V_1_reg_571;
wire    ap_CS_fsm_state10;
wire   [12:0] tmp_20_fu_445_p2;
reg   [12:0] tmp_20_reg_585;
wire   [0:0] exitcond_1_fu_430_p2;
wire   [1:0] jj_1_1_fu_450_p2;
reg   [1:0] jj_1_1_reg_590;
wire  signed [15:0] grp_fu_482_p3;
wire    ap_CS_fsm_state13;
wire   [5:0] j_1_fu_468_p2;
wire    ap_CS_fsm_state14;
reg   [5:0] i_reg_137;
reg   [5:0] j_reg_149;
reg   [15:0] p_s_reg_161;
reg   [1:0] ii_reg_173;
reg   [1:0] jj_reg_184;
reg   [15:0] p_020_1_reg_196;
wire   [31:0] tmp_11_cast_fu_256_p1;
wire  signed [31:0] tmp_17_cast_fu_384_p1;
wire  signed [31:0] tmp_18_cast_fu_397_p1;
wire  signed [31:0] tmp_19_cast_fu_425_p1;
wire  signed [31:0] tmp_20_cast_fu_456_p1;
wire   [5:0] grp_fu_229_p0;
wire   [6:0] grp_fu_229_p1;
wire   [11:0] tmp_2_cast_cast_fu_247_p1;
wire   [11:0] tmp_5_fu_251_p2;
wire   [3:0] tmp_10_fu_275_p3;
wire   [4:0] p_shl_cast_fu_283_p1;
wire   [4:0] ii_cast3_cast_fu_271_p1;
wire   [5:0] ii_cast4_fu_267_p1;
wire   [5:0] sum_fu_305_p2;
wire   [11:0] tmp_14_fu_310_p3;
wire   [9:0] tmp_15_fu_322_p3;
wire   [12:0] p_shl1_cast_fu_318_p1;
wire   [12:0] p_shl2_cast_fu_330_p1;
wire   [14:0] tmp_13_fu_348_p1;
wire   [0:0] tmp_12_fu_340_p3;
wire   [14:0] tmp_6_fu_352_p2;
wire   [4:0] jj_cast_cast_fu_375_p1;
wire   [4:0] tmp_17_fu_379_p2;
wire   [12:0] tmp_9_cast_cast_fu_389_p1;
wire   [12:0] tmp_18_fu_392_p2;
wire   [1:0] jj_1_s_fu_410_p2;
wire   [4:0] jj_1_cast1_cast_fu_416_p1;
wire   [4:0] tmp_19_fu_420_p2;
wire   [5:0] tmp_9_1_fu_436_p2;
wire   [12:0] tmp_9_1_cast_cast_fu_441_p1;
wire   [7:0] grp_fu_474_p1;
wire   [7:0] grp_fu_482_p1;
reg   [13:0] ap_NS_fsm;
wire   [11:0] grp_fu_229_p00;
wire   [10:0] grp_fu_474_p10;
wire   [10:0] grp_fu_482_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

differentiate_diff_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIFF_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIFF_IO_DATA_WIDTH ))
differentiate_diff_io_s_axi_U(
    .AWVALID(s_axi_diff_io_AWVALID),
    .AWREADY(s_axi_diff_io_AWREADY),
    .AWADDR(s_axi_diff_io_AWADDR),
    .WVALID(s_axi_diff_io_WVALID),
    .WREADY(s_axi_diff_io_WREADY),
    .WDATA(s_axi_diff_io_WDATA),
    .WSTRB(s_axi_diff_io_WSTRB),
    .ARVALID(s_axi_diff_io_ARVALID),
    .ARREADY(s_axi_diff_io_ARREADY),
    .ARADDR(s_axi_diff_io_ARADDR),
    .RVALID(s_axi_diff_io_RVALID),
    .RREADY(s_axi_diff_io_RREADY),
    .RDATA(s_axi_diff_io_RDATA),
    .RRESP(s_axi_diff_io_RRESP),
    .BVALID(s_axi_diff_io_BVALID),
    .BREADY(s_axi_diff_io_BREADY),
    .BRESP(s_axi_diff_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .img_address0(img_address0),
    .img_ce0(img_ce0),
    .img_q0(img_q0),
    .window_V_address0(window_V_address0),
    .window_V_ce0(window_V_ce0),
    .window_V_q0(window_V_q0)
);

differentiate_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
differentiate_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_229_p0),
    .din1(grp_fu_229_p1),
    .ce(1'b1),
    .dout(grp_fu_229_p2)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
differentiate_maccud_U1(
    .din0(reg_210),
    .din1(grp_fu_474_p1),
    .din2(p_020_1_reg_196),
    .dout(grp_fu_474_p3)
);

differentiate_macdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
differentiate_macdEe_U2(
    .din0(reg_210),
    .din1(grp_fu_482_p1),
    .din2(temp_result_V_1_reg_571),
    .dout(grp_fu_482_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_235_p2 == 1'd1))) begin
        i_reg_137 <= i_1_fu_261_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_137 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_1_fu_430_p2))) begin
        ii_reg_173 <= ii_1_reg_535;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_235_p2))) begin
        ii_reg_173 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        j_reg_149 <= j_1_fu_468_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_149 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        jj_reg_184 <= jj_1_1_reg_590;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_293_p2))) begin
        jj_reg_184 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        p_020_1_reg_196 <= grp_fu_482_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_293_p2))) begin
        p_020_1_reg_196 <= p_s_reg_161;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_1_fu_430_p2))) begin
        p_s_reg_161 <= grp_fu_474_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_235_p2))) begin
        p_s_reg_161 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ii_1_reg_535 <= ii_1_fu_299_p2;
        tmp_11_reg_526 <= tmp_11_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond_1_fu_430_p2))) begin
        jj_1_1_reg_590 <= jj_1_1_fu_450_p2;
        tmp_20_reg_585 <= tmp_20_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        jj_cast2_reg_551[1 : 0] <= jj_cast2_fu_366_p1[1 : 0];
        tmp_9_reg_556 <= tmp_9_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_206 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_210 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_235_p2))) begin
        res_V_addr_reg_516 <= tmp_11_cast_fu_256_p1;
        tmp_2_reg_511 <= tmp_2_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_result_V_1_reg_571 <= grp_fu_474_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_293_p2))) begin
        tmp_16_reg_540[12 : 4] <= tmp_16_fu_334_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_3_reg_503 <= grp_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond3_fu_293_p2))) begin
        tmp_7_reg_546 <= tmp_7_fu_358_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_214_p2 == 1'd0))) begin
        tmp_reg_492 <= tmp_fu_220_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_214_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_214_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        img_address0 = tmp_20_cast_fu_456_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        img_address0 = tmp_18_cast_fu_397_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        window_V_address0 = tmp_19_cast_fu_425_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        window_V_address0 = tmp_17_cast_fu_384_p1;
    end else begin
        window_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_214_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_235_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_293_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond_1_fu_430_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_214_p2 = ((i_reg_137 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_235_p2 = ((j_reg_149 == 6'd47) ? 1'b1 : 1'b0);

assign exitcond3_fu_293_p2 = ((ii_reg_173 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_1_fu_430_p2 = ((jj_1_s_fu_410_p2 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_229_p0 = grp_fu_229_p00;

assign grp_fu_229_p00 = tmp_reg_492;

assign grp_fu_229_p1 = 12'd46;

assign grp_fu_474_p1 = grp_fu_474_p10;

assign grp_fu_474_p10 = reg_206;

assign grp_fu_482_p1 = grp_fu_482_p10;

assign grp_fu_482_p10 = reg_206;

assign i_1_fu_261_p2 = (i_reg_137 + 6'd1);

assign ii_1_fu_299_p2 = (ii_reg_173 + 2'd1);

assign ii_cast3_cast_fu_271_p1 = ii_reg_173;

assign ii_cast4_fu_267_p1 = ii_reg_173;

assign j_1_fu_468_p2 = (6'd1 + j_reg_149);

assign jj_1_1_fu_450_p2 = (jj_reg_184 ^ 2'd2);

assign jj_1_cast1_cast_fu_416_p1 = jj_1_s_fu_410_p2;

assign jj_1_s_fu_410_p2 = (jj_reg_184 | 2'd1);

assign jj_cast2_fu_366_p1 = jj_reg_184;

assign jj_cast_cast_fu_375_p1 = jj_reg_184;

assign p_shl1_cast_fu_318_p1 = tmp_14_fu_310_p3;

assign p_shl2_cast_fu_330_p1 = tmp_15_fu_322_p3;

assign p_shl_cast_fu_283_p1 = tmp_10_fu_275_p3;

assign res_V_address0 = res_V_addr_reg_516;

assign res_V_d0 = tmp_7_reg_546;

assign sum_fu_305_p2 = (tmp_reg_492 + ii_cast4_fu_267_p1);

assign tmp_10_fu_275_p3 = {{ii_reg_173}, {2'd0}};

assign tmp_11_cast_fu_256_p1 = tmp_5_fu_251_p2;

assign tmp_11_fu_287_p2 = (p_shl_cast_fu_283_p1 - ii_cast3_cast_fu_271_p1);

assign tmp_12_fu_340_p3 = p_s_reg_161[32'd15];

assign tmp_13_fu_348_p1 = p_s_reg_161[14:0];

assign tmp_14_fu_310_p3 = {{sum_fu_305_p2}, {6'd0}};

assign tmp_15_fu_322_p3 = {{sum_fu_305_p2}, {4'd0}};

assign tmp_16_fu_334_p2 = (p_shl1_cast_fu_318_p1 - p_shl2_cast_fu_330_p1);

assign tmp_17_cast_fu_384_p1 = $signed(tmp_17_fu_379_p2);

assign tmp_17_fu_379_p2 = (tmp_11_reg_526 + jj_cast_cast_fu_375_p1);

assign tmp_18_cast_fu_397_p1 = $signed(tmp_18_fu_392_p2);

assign tmp_18_fu_392_p2 = (tmp_16_reg_540 + tmp_9_cast_cast_fu_389_p1);

assign tmp_19_cast_fu_425_p1 = $signed(tmp_19_fu_420_p2);

assign tmp_19_fu_420_p2 = (tmp_11_reg_526 + jj_1_cast1_cast_fu_416_p1);

assign tmp_20_cast_fu_456_p1 = $signed(tmp_20_reg_585);

assign tmp_20_fu_445_p2 = (tmp_16_reg_540 + tmp_9_1_cast_cast_fu_441_p1);

assign tmp_2_cast_cast_fu_247_p1 = tmp_2_fu_241_p2;

assign tmp_2_fu_241_p2 = ($signed(j_reg_149) + $signed(6'd63));

assign tmp_5_fu_251_p2 = (tmp_3_reg_503 + tmp_2_cast_cast_fu_247_p1);

assign tmp_6_fu_352_p2 = (15'd0 - tmp_13_fu_348_p1);

assign tmp_7_fu_358_p3 = ((tmp_12_fu_340_p3[0:0] === 1'b1) ? tmp_6_fu_352_p2 : tmp_13_fu_348_p1);

assign tmp_9_1_cast_cast_fu_441_p1 = tmp_9_1_fu_436_p2;

assign tmp_9_1_fu_436_p2 = (j_reg_149 + jj_cast2_reg_551);

assign tmp_9_cast_cast_fu_389_p1 = tmp_9_reg_556;

assign tmp_9_fu_370_p2 = (tmp_2_reg_511 + jj_cast2_fu_366_p1);

assign tmp_fu_220_p2 = ($signed(i_reg_137) + $signed(6'd63));

always @ (posedge ap_clk) begin
    tmp_16_reg_540[3:0] <= 4'b0000;
    jj_cast2_reg_551[5:2] <= 4'b0000;
end

endmodule //differentiate
