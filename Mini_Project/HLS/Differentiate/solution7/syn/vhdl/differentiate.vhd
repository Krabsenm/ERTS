-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity differentiate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_ce0 : OUT STD_LOGIC;
    img_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    img_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    img_ce1 : OUT STD_LOGIC;
    img_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    window_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    window_V_ce0 : OUT STD_LOGIC;
    window_V_q0 : IN STD_LOGIC_VECTOR (2 downto 0);
    window_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    window_V_ce1 : OUT STD_LOGIC;
    window_V_q1 : IN STD_LOGIC_VECTOR (2 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of differentiate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.989667,HLS_SYN_LAT=28955,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1701,HLS_SYN_LUT=1293}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_reg_256 : STD_LOGIC_VECTOR (5 downto 0);
    signal reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal exitcond2_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state8_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011001 : BOOLEAN;
    signal reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state10_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011001 : BOOLEAN;
    signal reg_275 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state9_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011001 : BOOLEAN;
    signal reg_285 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal reg_289 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_300_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_872 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_9_fu_339_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_9_reg_884 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_367_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_reg_891 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_12_reg_898 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_1_fu_373_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_903 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_403_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_reg_908 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond2_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_cast_cast_fu_415_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast_cast_reg_919 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_fu_439_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_reg_934 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_940 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_cast_fu_454_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast_reg_946 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_22_fu_467_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_reg_957 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter1_tmp_22_reg_957 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_cast_cast_fu_472_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_1_cast_cast_reg_962 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_fu_485_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_reg_973 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_fu_498_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_21_reg_983 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_fu_511_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_25_reg_993 : STD_LOGIC_VECTOR (12 downto 0);
    signal img_load_2_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_load_3_reg_1003 : STD_LOGIC_VECTOR (2 downto 0);
    signal window_V_load_5_reg_1008 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_reg_1018 : STD_LOGIC_VECTOR (10 downto 0);
    signal img_load_5_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_1_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_reg_1038 : STD_LOGIC_VECTOR (10 downto 0);
    signal img_load_8_reg_1043 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_V_load_8_reg_1048 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_0_2_fu_573_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_0_2_reg_1053 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_808_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp8_reg_1058 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_1_fu_586_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_reg_1064 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state11_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011001 : BOOLEAN;
    signal r_V_1_2_fu_598_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_reg_1070 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state12_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011001 : BOOLEAN;
    signal r_V_2_fu_623_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_reg_1075 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state13_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011001 : BOOLEAN;
    signal grp_fu_816_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_1081 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_2_2_fu_635_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_reg_1087 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state14_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_flag00011001 : BOOLEAN;
    signal tmp7_fu_675_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp7_reg_1092 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp4_fu_704_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp4_reg_1097 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp10_fu_723_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp10_reg_1102 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp14_fu_752_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp14_reg_1107 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_796_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_reg_1112 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage9_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal i_reg_244 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal j_phi_fu_260_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_17_cast_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_cast_fu_462_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_24_cast_fu_480_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_cast_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal tmp_25_cast_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_515_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_flag00000000 : BOOLEAN;
    signal tmp_26_cast_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_flag00000000 : BOOLEAN;
    signal tmp_23_cast_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_315_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_327_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_323_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl5_cast_fu_335_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_3_fu_345_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_10_fu_356_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_352_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl3_cast_fu_363_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_379_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_391_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_387_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl1_cast_fu_399_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_16_fu_419_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_fu_429_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_457_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_cast_cast6_fu_451_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_23_fu_475_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_20_fu_489_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_24_fu_502_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_527_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_527_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_2_1_fu_549_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_1_fu_549_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage5_flag00000000 : BOOLEAN;
    signal r_V_0_2_fu_573_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_0_2_fu_573_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage6_flag00000000 : BOOLEAN;
    signal r_V_1_fu_586_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_fu_586_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage7_flag00000000 : BOOLEAN;
    signal r_V_1_2_fu_598_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_1_2_fu_598_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage8_flag00000000 : BOOLEAN;
    signal r_V_2_fu_623_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage9_flag00000000 : BOOLEAN;
    signal r_V_2_2_fu_635_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_2_2_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_fu_644_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_0_2_cast_fu_641_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp9_fu_665_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp8_cast_fu_662_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp9_cast_fu_671_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_2_cast_fu_659_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_1_cast_fu_656_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_fu_684_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_650_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp13_cast_fu_690_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp3_fu_694_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp11_cast_fu_681_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp12_cast_fu_700_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_16_cast_fu_653_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_710_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp15_cast_fu_716_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp16_cast_fu_720_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp12_fu_732_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_cast_fu_647_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp20_cast_fu_738_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp13_fu_742_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp18_cast_fu_729_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp19_cast_fu_748_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp7_cast_fu_758_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp10_cast_fu_761_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_result_V_1_2_2_fu_764_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp14_cast_fu_778_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp17_cast_fu_781_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_s_fu_784_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_26_fu_770_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_790_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_808_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_816_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage3_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage4_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage5_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage6_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage7_flag00011011 : BOOLEAN;
    signal ap_block_pp0_stage8_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_309_p00 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_808_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_816_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_0_2_fu_573_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_2_fu_598_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_1_fu_586_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_1_fu_549_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_2_fu_635_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_2_fu_623_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_527_p10 : STD_LOGIC_VECTOR (10 downto 0);

    component differentiate_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component differentiate_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    differentiate_mulbkb_U0 : component differentiate_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 6,
        din1_WIDTH => 7,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    differentiate_maccud_U1 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_289,
        din1 => grp_fu_808_p1,
        din2 => r_V_reg_1018,
        dout => grp_fu_808_p3);

    differentiate_maccud_U2 : component differentiate_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        din2_WIDTH => 11,
        dout_WIDTH => 12)
    port map (
        din0 => reg_275,
        din1 => grp_fu_816_p1,
        din2 => r_V_1_2_reg_1070,
        dout => grp_fu_816_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 xor ap_const_logic_1);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_reg_244 <= i_1_reg_903;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_244 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    j_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                j_reg_256 <= j_1_reg_940;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_256 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then 
                    reg_275 <= window_V_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
                    reg_275 <= window_V_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then 
                    reg_280 <= img_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
                    reg_280 <= img_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then 
                    reg_289 <= window_V_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then 
                    reg_289 <= window_V_q1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond2_reg_915 <= exitcond2_reg_915;
                exitcond2_reg_915 <= exitcond2_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_tmp_22_reg_957 <= tmp_22_reg_957;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_903 <= i_1_fu_373_p2;
                    tmp_11_reg_891(12 downto 4) <= tmp_11_fu_367_p2(12 downto 4);
                tmp_12_reg_898 <= grp_fu_309_p2;
                    tmp_15_reg_908(12 downto 4) <= tmp_15_fu_403_p2(12 downto 4);
                    tmp_9_reg_884(12 downto 4) <= tmp_9_fu_339_p2(12 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                img_load_2_reg_998 <= img_q1;
                window_V_load_3_reg_1003 <= window_V_q0;
                window_V_load_5_reg_1008 <= window_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                img_load_5_reg_1028 <= img_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then
                img_load_8_reg_1043 <= img_q1;
                window_V_load_8_reg_1048 <= window_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond2_reg_915 = ap_const_lv1_0))) then
                    j_1_cast_cast_reg_962(5 downto 0) <= j_1_cast_cast_fu_472_p1(5 downto 0);
                tmp_22_reg_957 <= tmp_22_fu_467_p2;
                    tmp_2_cast_cast_reg_946(5 downto 0) <= tmp_2_cast_cast_fu_454_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_fu_409_p2))) then
                j_1_reg_940 <= j_1_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond2_fu_409_p2))) then
                    j_cast_cast_reg_919(5 downto 0) <= j_cast_cast_fu_415_p1(5 downto 0);
                tmp_2_reg_934 <= tmp_2_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                r_V_0_2_reg_1053 <= r_V_0_2_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_block_pp0_stage7_flag00011001 = ap_const_boolean_0))) then
                r_V_1_2_reg_1070 <= r_V_1_2_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_block_pp0_stage6_flag00011001 = ap_const_boolean_0))) then
                r_V_1_reg_1064 <= r_V_1_fu_586_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0))) then
                r_V_2_1_reg_1038 <= r_V_2_1_fu_549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_block_pp0_stage9_flag00011001 = ap_const_boolean_0))) then
                r_V_2_2_reg_1087 <= r_V_2_2_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                r_V_2_reg_1075 <= r_V_2_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0))) then
                r_V_reg_1018 <= r_V_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond2_reg_915 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)))) then
                reg_267 <= window_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (exitcond2_reg_915 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0)))) then
                reg_271 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)))) then
                reg_285 <= img_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp10_reg_1102 <= tmp10_fu_723_p2;
                tmp14_reg_1107 <= tmp14_fu_752_p2;
                tmp4_reg_1097 <= tmp4_fu_704_p2;
                tmp7_reg_1092 <= tmp7_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_block_pp0_stage8_flag00011001 = ap_const_boolean_0))) then
                tmp1_reg_1081 <= grp_fu_816_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_block_pp0_stage5_flag00011001 = ap_const_boolean_0))) then
                tmp8_reg_1058 <= grp_fu_808_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                tmp_17_reg_973 <= tmp_17_fu_485_p2;
                tmp_21_reg_983 <= tmp_21_fu_498_p2;
                tmp_25_reg_993 <= tmp_25_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond2_reg_915))) then
                tmp_6_reg_1112 <= tmp_6_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = exitcond1_fu_294_p2))) then
                tmp_reg_872 <= tmp_fu_300_p2;
            end if;
        end if;
    end process;
    tmp_9_reg_884(3 downto 0) <= "0000";
    tmp_11_reg_891(3 downto 0) <= "0000";
    tmp_15_reg_908(3 downto 0) <= "0000";
    j_cast_cast_reg_919(12 downto 6) <= "0000000";
    tmp_2_cast_cast_reg_946(12 downto 6) <= "0000000";
    j_1_cast_cast_reg_962(12 downto 6) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state2, exitcond1_fu_294_p2, exitcond2_fu_409_p2, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter1, ap_block_pp0_stage9_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage1_flag00011011, ap_block_pp0_stage3_flag00011011, ap_block_pp0_stage4_flag00011011, ap_block_pp0_stage5_flag00011011, ap_block_pp0_stage6_flag00011011, ap_block_pp0_stage7_flag00011011, ap_block_pp0_stage8_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_294_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_fu_409_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond2_fu_409_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_block_pp0_stage3_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_block_pp0_stage4_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_block_pp0_stage5_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_block_pp0_stage6_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_block_pp0_stage7_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_block_pp0_stage8_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_block_pp0_stage9_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond2_fu_409_p2)
    begin
        if ((exitcond2_fu_409_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_294_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_294_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_294_p2 <= "1" when (i_reg_244 = ap_const_lv6_3F) else "0";
    exitcond2_fu_409_p2 <= "1" when (j_phi_fu_260_p4 = ap_const_lv6_2F) else "0";
    grp_fu_309_p0 <= grp_fu_309_p00(6 - 1 downto 0);
    grp_fu_309_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_872),12));
    grp_fu_309_p1 <= ap_const_lv12_2E(7 - 1 downto 0);
    grp_fu_808_p1 <= grp_fu_808_p10(8 - 1 downto 0);
    grp_fu_808_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_271),11));
    grp_fu_816_p1 <= grp_fu_816_p10(8 - 1 downto 0);
    grp_fu_816_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_271),11));
    i_1_fu_373_p2 <= std_logic_vector(unsigned(i_reg_244) + unsigned(ap_const_lv6_1));

    img_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, tmp_17_cast_fu_424_p1, tmp_20_cast_fu_462_p1, ap_block_pp0_stage1_flag00000000, tmp_21_cast_fu_493_p1, ap_block_pp0_stage2_flag00000000, tmp_22_cast_fu_515_p1, ap_block_pp0_stage3_flag00000000, tmp_18_cast_fu_537_p1, ap_block_pp0_stage4_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0))) then 
                img_address0 <= tmp_18_cast_fu_537_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
                img_address0 <= tmp_22_cast_fu_515_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
                img_address0 <= tmp_21_cast_fu_493_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                img_address0 <= tmp_20_cast_fu_462_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                img_address0 <= tmp_17_cast_fu_424_p1(12 - 1 downto 0);
            else 
                img_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            img_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    img_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, tmp_19_cast_fu_434_p1, ap_block_pp0_stage1_flag00000000, tmp_24_cast_fu_480_p1, ap_block_pp0_stage2_flag00000000, tmp_25_cast_fu_506_p1, ap_block_pp0_stage3_flag00000000, tmp_26_cast_fu_533_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
                img_address1 <= tmp_26_cast_fu_533_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
                img_address1 <= tmp_25_cast_fu_506_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                img_address1 <= tmp_24_cast_fu_480_p1(12 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                img_address1 <= tmp_19_cast_fu_434_p1(12 - 1 downto 0);
            else 
                img_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            img_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            img_ce1 <= ap_const_logic_1;
        else 
            img_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_cast_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_940),13));
    j_1_fu_445_p2 <= std_logic_vector(unsigned(j_phi_fu_260_p4) + unsigned(ap_const_lv6_1));
    j_cast_cast_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_phi_fu_260_p4),13));

    j_phi_fu_260_p4_assign_proc : process(j_reg_256, exitcond2_reg_915, ap_CS_fsm_pp0_stage0, j_1_reg_940, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((exitcond2_reg_915 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_phi_fu_260_p4 <= j_1_reg_940;
        else 
            j_phi_fu_260_p4 <= j_reg_256;
        end if; 
    end process;

    p_shl1_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_391_p3),13));
    p_shl2_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_345_p3),13));
    p_shl3_cast_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_356_p3),13));
    p_shl4_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_315_p3),13));
    p_shl5_cast_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_327_p3),13));
    p_shl_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_379_p3),13));
    r_V_0_2_fu_573_p0 <= reg_275;
    r_V_0_2_fu_573_p1 <= r_V_0_2_fu_573_p10(8 - 1 downto 0);
    r_V_0_2_fu_573_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_2_reg_998),11));
    r_V_0_2_fu_573_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_0_2_fu_573_p0) * signed('0' &r_V_0_2_fu_573_p1))), 11));
    r_V_1_2_fu_598_p0 <= window_V_load_5_reg_1008;
    r_V_1_2_fu_598_p1 <= r_V_1_2_fu_598_p10(8 - 1 downto 0);
    r_V_1_2_fu_598_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_5_reg_1028),11));
    r_V_1_2_fu_598_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_2_fu_598_p0) * signed('0' &r_V_1_2_fu_598_p1))), 11));
    r_V_1_fu_586_p0 <= window_V_load_3_reg_1003;
    r_V_1_fu_586_p1 <= r_V_1_fu_586_p10(8 - 1 downto 0);
    r_V_1_fu_586_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_285),11));
    r_V_1_fu_586_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_1_fu_586_p0) * signed('0' &r_V_1_fu_586_p1))), 11));
    r_V_2_1_fu_549_p0 <= reg_289;
    r_V_2_1_fu_549_p1 <= r_V_2_1_fu_549_p10(8 - 1 downto 0);
    r_V_2_1_fu_549_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_280),11));
    r_V_2_1_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_1_fu_549_p0) * signed('0' &r_V_2_1_fu_549_p1))), 11));
    r_V_2_2_fu_635_p0 <= window_V_load_8_reg_1048;
    r_V_2_2_fu_635_p1 <= r_V_2_2_fu_635_p10(8 - 1 downto 0);
    r_V_2_2_fu_635_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_load_8_reg_1043),11));
    r_V_2_2_fu_635_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_2_fu_635_p0) * signed('0' &r_V_2_2_fu_635_p1))), 11));
    r_V_2_fu_623_p0 <= reg_267;
    r_V_2_fu_623_p1 <= r_V_2_fu_623_p10(8 - 1 downto 0);
    r_V_2_fu_623_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_280),11));
    r_V_2_fu_623_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_2_fu_623_p0) * signed('0' &r_V_2_fu_623_p1))), 11));
    r_V_fu_527_p0 <= reg_267;
    r_V_fu_527_p1 <= r_V_fu_527_p10(8 - 1 downto 0);
    r_V_fu_527_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_285),11));
    r_V_fu_527_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_fu_527_p0) * signed('0' &r_V_fu_527_p1))), 11));
    res_V_address0 <= tmp_23_cast_fu_804_p1(12 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= tmp_6_reg_1112;

    res_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_reg_pp0_iter1_exitcond2_reg_915, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond2_reg_915) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_result_V_1_2_2_fu_764_p2 <= std_logic_vector(signed(tmp7_cast_fu_758_p1) + signed(tmp10_cast_fu_761_p1));
        tmp10_cast_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_reg_1097),15));

    tmp10_fu_723_p2 <= std_logic_vector(signed(tmp15_cast_fu_716_p1) + signed(tmp16_cast_fu_720_p1));
        tmp11_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1081),14));

        tmp12_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp3_fu_694_p2),14));

    tmp12_fu_732_p2 <= std_logic_vector(signed(tmp_2_2_cast_fu_659_p1) + signed(tmp_0_2_cast_fu_641_p1));
        tmp13_cast_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_684_p2),13));

    tmp13_fu_742_p2 <= std_logic_vector(signed(tmp_9_cast_fu_647_p1) + signed(tmp20_cast_fu_738_p1));
        tmp14_cast_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp10_reg_1102),15));

    tmp14_fu_752_p2 <= std_logic_vector(signed(tmp18_cast_fu_729_p1) + signed(tmp19_cast_fu_748_p1));
        tmp15_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp5_fu_710_p2),13));

        tmp16_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_reg_1081),13));

        tmp17_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp14_reg_1107),15));

        tmp18_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1058),14));

        tmp19_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp13_fu_742_p2),14));

        tmp20_cast_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp12_fu_732_p2),13));

    tmp2_fu_684_p2 <= std_logic_vector(signed(tmp_2_2_cast_fu_659_p1) + signed(tmp_2_1_cast_fu_656_p1));
    tmp3_fu_694_p2 <= std_logic_vector(signed(tmp_2_cast_fu_650_p1) + signed(tmp13_cast_fu_690_p1));
    tmp4_fu_704_p2 <= std_logic_vector(signed(tmp11_cast_fu_681_p1) + signed(tmp12_cast_fu_700_p1));
    tmp5_fu_710_p2 <= std_logic_vector(signed(tmp_2_1_cast_fu_656_p1) + signed(tmp_16_cast_fu_653_p1));
        tmp7_cast_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_1092),15));

    tmp7_fu_675_p2 <= std_logic_vector(signed(tmp8_cast_fu_662_p1) + signed(tmp9_cast_fu_671_p1));
        tmp8_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1058),13));

        tmp9_cast_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp9_fu_665_p2),13));

    tmp9_fu_665_p2 <= std_logic_vector(signed(tmp_1_cast_fu_644_p1) + signed(tmp_0_2_cast_fu_641_p1));
        tmp_0_2_cast_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_0_2_reg_1053),12));

    tmp_10_fu_356_p3 <= (tmp_reg_872 & ap_const_lv4_0);
    tmp_11_fu_367_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_352_p1) - unsigned(p_shl3_cast_fu_363_p1));
    tmp_13_fu_379_p3 <= (i_1_fu_373_p2 & ap_const_lv6_0);
    tmp_14_fu_391_p3 <= (i_1_fu_373_p2 & ap_const_lv4_0);
    tmp_15_fu_403_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_387_p1) - unsigned(p_shl1_cast_fu_399_p1));
        tmp_16_cast_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1075),12));

    tmp_16_fu_419_p2 <= std_logic_vector(unsigned(tmp_11_reg_891) + unsigned(j_cast_cast_fu_415_p1));
        tmp_17_cast_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_419_p2),32));

    tmp_17_fu_485_p2 <= std_logic_vector(unsigned(tmp_9_reg_884) + unsigned(j_cast_cast_reg_919));
        tmp_18_cast_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_reg_973),32));

    tmp_18_fu_429_p2 <= std_logic_vector(unsigned(tmp_15_reg_908) + unsigned(j_cast_cast_fu_415_p1));
        tmp_19_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_429_p2),32));

    tmp_19_fu_457_p2 <= std_logic_vector(unsigned(tmp_11_reg_891) + unsigned(tmp_2_cast_cast_fu_454_p1));
        tmp_1_cast_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1064),12));

        tmp_20_cast_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_457_p2),32));

    tmp_20_fu_489_p2 <= std_logic_vector(unsigned(tmp_9_reg_884) + unsigned(tmp_2_cast_cast_reg_946));
        tmp_21_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_489_p2),32));

    tmp_21_fu_498_p2 <= std_logic_vector(unsigned(tmp_15_reg_908) + unsigned(tmp_2_cast_cast_reg_946));
        tmp_22_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_reg_983),32));

    tmp_22_fu_467_p2 <= std_logic_vector(unsigned(tmp_12_reg_898) + unsigned(tmp_2_cast_cast6_fu_451_p1));
    tmp_23_cast_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_tmp_22_reg_957),32));
    tmp_23_fu_475_p2 <= std_logic_vector(unsigned(tmp_11_reg_891) + unsigned(j_1_cast_cast_fu_472_p1));
        tmp_24_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_475_p2),32));

    tmp_24_fu_502_p2 <= std_logic_vector(unsigned(tmp_9_reg_884) + unsigned(j_1_cast_cast_reg_962));
        tmp_25_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_502_p2),32));

    tmp_25_fu_511_p2 <= std_logic_vector(unsigned(tmp_15_reg_908) + unsigned(j_1_cast_cast_reg_962));
        tmp_26_cast_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_reg_993),32));

    tmp_26_fu_770_p3 <= temp_result_V_1_2_2_fu_764_p2(14 downto 14);
        tmp_2_1_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_1_reg_1038),12));

        tmp_2_2_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_2_reg_1087),12));

    tmp_2_cast_cast6_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_934),12));
    tmp_2_cast_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_934),13));
        tmp_2_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_reg_1075),13));

    tmp_2_fu_439_p2 <= std_logic_vector(unsigned(j_phi_fu_260_p4) + unsigned(ap_const_lv6_3F));
    tmp_3_fu_345_p3 <= (tmp_reg_872 & ap_const_lv6_0);
    tmp_5_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv15_0) - unsigned(tmp_s_fu_784_p2));
    tmp_6_fu_796_p3 <= 
        tmp_5_fu_790_p2 when (tmp_26_fu_770_p3(0) = '1') else 
        tmp_s_fu_784_p2;
    tmp_7_fu_315_p3 <= (i_reg_244 & ap_const_lv6_0);
    tmp_8_fu_327_p3 <= (i_reg_244 & ap_const_lv4_0);
        tmp_9_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_1064),13));

    tmp_9_fu_339_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_323_p1) - unsigned(p_shl5_cast_fu_335_p1));
    tmp_fu_300_p2 <= std_logic_vector(unsigned(i_reg_244) + unsigned(ap_const_lv6_3F));
    tmp_s_fu_784_p2 <= std_logic_vector(signed(tmp14_cast_fu_778_p1) + signed(tmp17_cast_fu_781_p1));

    window_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, ap_block_pp0_stage2_flag00000000, ap_block_pp0_stage3_flag00000000, ap_block_pp0_stage4_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00000000 = ap_const_boolean_0))) then 
                window_V_address0 <= ap_const_lv32_4(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
                window_V_address0 <= ap_const_lv32_1(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
                window_V_address0 <= ap_const_lv32_6(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                window_V_address0 <= ap_const_lv32_3(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                window_V_address0 <= ap_const_lv32_0(4 - 1 downto 0);
            else 
                window_V_address0 <= "XXXX";
            end if;
        else 
            window_V_address0 <= "XXXX";
        end if; 
    end process;


    window_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, ap_block_pp0_stage2_flag00000000, ap_block_pp0_stage3_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00000000 = ap_const_boolean_0))) then 
                window_V_address1 <= ap_const_lv32_8(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
                window_V_address1 <= ap_const_lv32_7(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
                window_V_address1 <= ap_const_lv32_5(4 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
                window_V_address1 <= ap_const_lv32_2(4 - 1 downto 0);
            else 
                window_V_address1 <= "XXXX";
            end if;
        else 
            window_V_address1 <= "XXXX";
        end if; 
    end process;


    window_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_block_pp0_stage4_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            window_V_ce0 <= ap_const_logic_1;
        else 
            window_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_block_pp0_stage3_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)))) then 
            window_V_ce1 <= ap_const_logic_1;
        else 
            window_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
