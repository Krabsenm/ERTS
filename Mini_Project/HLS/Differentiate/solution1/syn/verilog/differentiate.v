// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=128589,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=582,HLS_SYN_LUT=382}" *)

module differentiate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_address0,
        img_ce0,
        img_q0,
        window_V_address0,
        window_V_ce0,
        window_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] img_address0;
output   img_ce0;
input  [7:0] img_q0;
output  [3:0] window_V_address0;
output   window_V_ce0;
input  [2:0] window_V_q0;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_ce0;
reg window_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_fu_179_p2;
reg   [5:0] tmp_reg_396;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_173_p2;
wire    ap_CS_fsm_state3;
wire   [11:0] grp_fu_188_p2;
reg   [11:0] tmp_3_reg_407;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_2_fu_200_p2;
reg   [5:0] tmp_2_reg_415;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond2_fu_194_p2;
reg   [11:0] res_V_addr_reg_420;
wire   [5:0] i_1_fu_220_p2;
wire   [4:0] tmp_11_fu_246_p2;
reg   [4:0] tmp_11_reg_430;
wire    ap_CS_fsm_state6;
wire   [1:0] ii_1_fu_258_p2;
reg   [1:0] ii_1_reg_438;
wire   [12:0] tmp_16_fu_293_p2;
reg   [12:0] tmp_16_reg_443;
wire   [0:0] exitcond3_fu_252_p2;
wire   [14:0] tmp_7_fu_317_p3;
reg   [14:0] tmp_7_reg_448;
wire   [5:0] j_1_fu_325_p2;
reg   [5:0] j_1_reg_453;
wire    ap_CS_fsm_state7;
wire   [1:0] jj_1_fu_355_p2;
reg   [1:0] jj_1_reg_466;
wire   [12:0] tmp_18_fu_370_p2;
reg   [12:0] tmp_18_reg_471;
wire   [0:0] exitcond_fu_349_p2;
wire    ap_CS_fsm_state8;
reg  signed [2:0] window_V_load_reg_481;
reg   [7:0] img_load_reg_486;
wire    ap_CS_fsm_state9;
wire  signed [15:0] grp_fu_385_p3;
wire    ap_CS_fsm_state10;
reg   [5:0] i_reg_103;
reg   [5:0] j_reg_115;
wire    ap_CS_fsm_state11;
reg   [15:0] p_s_reg_127;
reg   [1:0] ii_reg_139;
reg   [15:0] p_020_1_reg_150;
reg   [1:0] jj_reg_162;
wire   [31:0] tmp_11_cast_fu_215_p1;
wire  signed [31:0] tmp_17_cast_fu_344_p1;
wire  signed [31:0] tmp_18_cast_fu_375_p1;
wire   [5:0] grp_fu_188_p0;
wire   [6:0] grp_fu_188_p1;
wire   [11:0] tmp_2_cast_cast_fu_206_p1;
wire   [11:0] tmp_5_fu_210_p2;
wire   [3:0] tmp_10_fu_234_p3;
wire   [4:0] p_shl_cast_fu_242_p1;
wire   [4:0] ii_cast3_cast_fu_230_p1;
wire   [5:0] ii_cast4_fu_226_p1;
wire   [5:0] sum_fu_264_p2;
wire   [11:0] tmp_14_fu_269_p3;
wire   [9:0] tmp_15_fu_281_p3;
wire   [12:0] p_shl1_cast_fu_277_p1;
wire   [12:0] p_shl2_cast_fu_289_p1;
wire   [14:0] tmp_13_fu_307_p1;
wire   [0:0] tmp_12_fu_299_p3;
wire   [14:0] tmp_6_fu_311_p2;
wire   [4:0] jj_cast1_cast_fu_335_p1;
wire   [4:0] tmp_17_fu_339_p2;
wire   [5:0] jj_cast2_fu_331_p1;
wire   [5:0] tmp_9_fu_361_p2;
wire   [12:0] tmp_9_cast_cast_fu_366_p1;
wire   [7:0] grp_fu_385_p1;
reg   [10:0] ap_NS_fsm;
wire   [11:0] grp_fu_188_p00;
wire   [10:0] grp_fu_385_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

differentiate_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
differentiate_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_188_p0),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
differentiate_maccud_U1(
    .din0(window_V_load_reg_481),
    .din1(grp_fu_385_p1),
    .din2(p_020_1_reg_150),
    .dout(grp_fu_385_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_194_p2 == 1'd1))) begin
        i_reg_103 <= i_1_fu_220_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_103 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_349_p2))) begin
        ii_reg_139 <= ii_1_reg_438;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_194_p2))) begin
        ii_reg_139 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_115 <= j_1_reg_453;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_115 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        jj_reg_162 <= jj_1_reg_466;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_252_p2))) begin
        jj_reg_162 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        p_020_1_reg_150 <= grp_fu_385_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_252_p2))) begin
        p_020_1_reg_150 <= p_s_reg_127;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_349_p2))) begin
        p_s_reg_127 <= p_020_1_reg_150;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_194_p2))) begin
        p_s_reg_127 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ii_1_reg_438 <= ii_1_fu_258_p2;
        tmp_11_reg_430 <= tmp_11_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        img_load_reg_486 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond3_fu_252_p2))) begin
        j_1_reg_453 <= j_1_fu_325_p2;
        tmp_7_reg_448 <= tmp_7_fu_317_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        jj_1_reg_466 <= jj_1_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_194_p2))) begin
        res_V_addr_reg_420 <= tmp_11_cast_fu_215_p1;
        tmp_2_reg_415 <= tmp_2_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_252_p2))) begin
        tmp_16_reg_443[12 : 4] <= tmp_16_fu_293_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond_fu_349_p2))) begin
        tmp_18_reg_471 <= tmp_18_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_3_reg_407 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_173_p2 == 1'd0))) begin
        tmp_reg_396 <= tmp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        window_V_load_reg_481 <= window_V_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_173_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_173_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_173_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_194_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_252_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond_fu_349_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_173_p2 = ((i_reg_103 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_194_p2 = ((j_reg_115 == 6'd47) ? 1'b1 : 1'b0);

assign exitcond3_fu_252_p2 = ((ii_reg_139 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_349_p2 = ((jj_reg_162 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_188_p0 = grp_fu_188_p00;

assign grp_fu_188_p00 = tmp_reg_396;

assign grp_fu_188_p1 = 12'd46;

assign grp_fu_385_p1 = grp_fu_385_p10;

assign grp_fu_385_p10 = img_load_reg_486;

assign i_1_fu_220_p2 = (i_reg_103 + 6'd1);

assign ii_1_fu_258_p2 = (ii_reg_139 + 2'd1);

assign ii_cast3_cast_fu_230_p1 = ii_reg_139;

assign ii_cast4_fu_226_p1 = ii_reg_139;

assign img_address0 = tmp_18_cast_fu_375_p1;

assign j_1_fu_325_p2 = (6'd1 + j_reg_115);

assign jj_1_fu_355_p2 = (jj_reg_162 + 2'd1);

assign jj_cast1_cast_fu_335_p1 = jj_reg_162;

assign jj_cast2_fu_331_p1 = jj_reg_162;

assign p_shl1_cast_fu_277_p1 = tmp_14_fu_269_p3;

assign p_shl2_cast_fu_289_p1 = tmp_15_fu_281_p3;

assign p_shl_cast_fu_242_p1 = tmp_10_fu_234_p3;

assign res_V_address0 = res_V_addr_reg_420;

assign res_V_d0 = tmp_7_reg_448;

assign sum_fu_264_p2 = (tmp_reg_396 + ii_cast4_fu_226_p1);

assign tmp_10_fu_234_p3 = {{ii_reg_139}, {2'd0}};

assign tmp_11_cast_fu_215_p1 = tmp_5_fu_210_p2;

assign tmp_11_fu_246_p2 = (p_shl_cast_fu_242_p1 - ii_cast3_cast_fu_230_p1);

assign tmp_12_fu_299_p3 = p_s_reg_127[32'd15];

assign tmp_13_fu_307_p1 = p_s_reg_127[14:0];

assign tmp_14_fu_269_p3 = {{sum_fu_264_p2}, {6'd0}};

assign tmp_15_fu_281_p3 = {{sum_fu_264_p2}, {4'd0}};

assign tmp_16_fu_293_p2 = (p_shl1_cast_fu_277_p1 - p_shl2_cast_fu_289_p1);

assign tmp_17_cast_fu_344_p1 = $signed(tmp_17_fu_339_p2);

assign tmp_17_fu_339_p2 = (tmp_11_reg_430 + jj_cast1_cast_fu_335_p1);

assign tmp_18_cast_fu_375_p1 = $signed(tmp_18_reg_471);

assign tmp_18_fu_370_p2 = (tmp_16_reg_443 + tmp_9_cast_cast_fu_366_p1);

assign tmp_2_cast_cast_fu_206_p1 = tmp_2_fu_200_p2;

assign tmp_2_fu_200_p2 = ($signed(j_reg_115) + $signed(6'd63));

assign tmp_5_fu_210_p2 = (tmp_3_reg_407 + tmp_2_cast_cast_fu_206_p1);

assign tmp_6_fu_311_p2 = (15'd0 - tmp_13_fu_307_p1);

assign tmp_7_fu_317_p3 = ((tmp_12_fu_299_p3[0:0] === 1'b1) ? tmp_6_fu_311_p2 : tmp_13_fu_307_p1);

assign tmp_9_cast_cast_fu_366_p1 = tmp_9_fu_361_p2;

assign tmp_9_fu_361_p2 = (tmp_2_reg_415 + jj_cast2_fu_331_p1);

assign tmp_fu_179_p2 = ($signed(i_reg_103) + $signed(6'd63));

assign window_V_address0 = tmp_17_cast_fu_344_p1;

always @ (posedge ap_clk) begin
    tmp_16_reg_443[3:0] <= 4'b0000;
end

endmodule //differentiate
