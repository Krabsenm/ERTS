// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.716000,HLS_SYN_LAT=26165,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=2,HLS_SYN_FF=1853,HLS_SYN_LUT=1436}" *)

module differentiate (
        ap_clk,
        ap_rst_n,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0,
        s_axi_diff_io_AWVALID,
        s_axi_diff_io_AWREADY,
        s_axi_diff_io_AWADDR,
        s_axi_diff_io_WVALID,
        s_axi_diff_io_WREADY,
        s_axi_diff_io_WDATA,
        s_axi_diff_io_WSTRB,
        s_axi_diff_io_ARVALID,
        s_axi_diff_io_ARREADY,
        s_axi_diff_io_ARADDR,
        s_axi_diff_io_RVALID,
        s_axi_diff_io_RREADY,
        s_axi_diff_io_RDATA,
        s_axi_diff_io_RRESP,
        s_axi_diff_io_BVALID,
        s_axi_diff_io_BREADY,
        s_axi_diff_io_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_pp0_stage0 = 14'd16;
parameter    ap_ST_fsm_pp0_stage1 = 14'd32;
parameter    ap_ST_fsm_pp0_stage2 = 14'd64;
parameter    ap_ST_fsm_pp0_stage3 = 14'd128;
parameter    ap_ST_fsm_pp0_stage4 = 14'd256;
parameter    ap_ST_fsm_pp0_stage5 = 14'd512;
parameter    ap_ST_fsm_pp0_stage6 = 14'd1024;
parameter    ap_ST_fsm_pp0_stage7 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage8 = 14'd4096;
parameter    ap_ST_fsm_state18 = 14'd8192;
parameter    C_S_AXI_DIFF_IO_DATA_WIDTH = 32;
parameter    C_S_AXI_DIFF_IO_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_DIFF_IO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;
input   s_axi_diff_io_AWVALID;
output   s_axi_diff_io_AWREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_AWADDR;
input   s_axi_diff_io_WVALID;
output   s_axi_diff_io_WREADY;
input  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_WDATA;
input  [C_S_AXI_DIFF_IO_WSTRB_WIDTH - 1:0] s_axi_diff_io_WSTRB;
input   s_axi_diff_io_ARVALID;
output   s_axi_diff_io_ARREADY;
input  [C_S_AXI_DIFF_IO_ADDR_WIDTH - 1:0] s_axi_diff_io_ARADDR;
output   s_axi_diff_io_RVALID;
input   s_axi_diff_io_RREADY;
output  [C_S_AXI_DIFF_IO_DATA_WIDTH - 1:0] s_axi_diff_io_RDATA;
output  [1:0] s_axi_diff_io_RRESP;
output   s_axi_diff_io_BVALID;
input   s_axi_diff_io_BREADY;
output  [1:0] s_axi_diff_io_BRESP;
output   interrupt;

reg res_V_ce0;
reg res_V_we0;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [11:0] img_address0;
reg    img_ce0;
wire   [7:0] img_q0;
reg   [3:0] window_V_address0;
reg    window_V_ce0;
wire   [2:0] window_V_q0;
reg   [5:0] j_reg_260;
reg  signed [2:0] reg_272;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
reg   [0:0] exitcond2_reg_915;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state8_pp0_stage3_iter0;
wire    ap_block_state17_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_flag00011001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state10_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_flag00011001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state13_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_flag00011001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg   [7:0] reg_276;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state12_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_flag00011001;
reg   [7:0] reg_280;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_flag00011001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state9_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state11_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_flag00011001;
reg   [2:0] reg_284;
wire   [5:0] tmp_fu_294_p2;
reg   [5:0] tmp_reg_872;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_288_p2;
wire    ap_CS_fsm_state3;
wire   [12:0] tmp_9_fu_333_p2;
reg   [12:0] tmp_9_reg_884;
wire    ap_CS_fsm_state4;
wire   [12:0] tmp_11_fu_361_p2;
reg   [12:0] tmp_11_reg_891;
wire   [11:0] grp_fu_303_p2;
reg   [11:0] tmp_12_reg_898;
wire   [5:0] i_1_fu_367_p2;
reg   [5:0] i_1_reg_903;
wire   [12:0] tmp_15_fu_397_p2;
reg   [12:0] tmp_15_reg_908;
wire   [0:0] exitcond2_fu_403_p2;
reg   [0:0] ap_reg_pp0_iter1_exitcond2_reg_915;
wire   [12:0] j_cast_cast_fu_409_p1;
reg   [12:0] j_cast_cast_reg_919;
wire   [5:0] tmp_2_fu_423_p2;
reg   [5:0] tmp_2_reg_930;
wire   [12:0] tmp_2_cast_cast_fu_432_p1;
reg   [12:0] tmp_2_cast_cast_reg_936;
wire   [11:0] tmp_22_fu_445_p2;
reg   [11:0] tmp_22_reg_947;
reg   [11:0] ap_reg_pp0_iter1_tmp_22_reg_947;
wire   [5:0] j_1_fu_450_p2;
reg   [5:0] j_1_reg_952;
wire   [12:0] j_1_cast_cast_fu_456_p1;
reg   [12:0] j_1_cast_cast_reg_958;
wire   [10:0] r_V_fu_486_p2;
reg  signed [10:0] r_V_reg_974;
wire   [12:0] tmp_16_fu_492_p2;
reg   [12:0] tmp_16_reg_979;
wire   [12:0] tmp_17_fu_496_p2;
reg   [12:0] tmp_17_reg_984;
wire   [12:0] tmp_21_fu_500_p2;
reg   [12:0] tmp_21_reg_989;
wire   [12:0] tmp_25_fu_513_p2;
reg   [12:0] tmp_25_reg_999;
wire   [10:0] r_V_0_2_fu_525_p2;
reg   [10:0] r_V_0_2_reg_1004;
wire   [10:0] r_V_1_fu_543_p2;
reg   [10:0] r_V_1_reg_1014;
wire   [10:0] r_V_1_2_fu_561_p2;
reg  signed [10:0] r_V_1_2_reg_1025;
wire   [10:0] r_V_2_1_fu_579_p2;
reg   [10:0] r_V_2_1_reg_1035;
wire   [10:0] r_V_2_fu_597_p2;
reg   [10:0] r_V_2_reg_1045;
wire   [10:0] r_V_2_2_fu_622_p2;
reg   [10:0] r_V_2_2_reg_1051;
wire  signed [11:0] grp_fu_806_p3;
reg  signed [11:0] tmp8_reg_1056;
wire   [12:0] tmp7_fu_673_p2;
reg   [12:0] tmp7_reg_1062;
wire   [13:0] tmp4_fu_702_p2;
reg   [13:0] tmp4_reg_1067;
wire   [12:0] tmp10_fu_721_p2;
reg   [12:0] tmp10_reg_1072;
wire   [13:0] tmp14_fu_750_p2;
reg   [13:0] tmp14_reg_1077;
wire   [14:0] tmp_6_fu_794_p3;
reg   [14:0] tmp_6_reg_1082;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage8_flag00011011;
wire    ap_block_pp0_stage3_flag00011011;
reg   [5:0] i_reg_248;
wire    ap_CS_fsm_state18;
reg   [5:0] j_phi_fu_264_p4;
wire    ap_block_pp0_stage0_flag00000000;
wire  signed [31:0] tmp_19_cast_fu_418_p1;
wire  signed [31:0] tmp_20_cast_fu_440_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire  signed [31:0] tmp_24_cast_fu_464_p1;
wire    ap_block_pp0_stage2_flag00000000;
wire  signed [31:0] tmp_21_cast_fu_473_p1;
wire    ap_block_pp0_stage3_flag00000000;
wire  signed [31:0] tmp_25_cast_fu_508_p1;
wire    ap_block_pp0_stage4_flag00000000;
wire  signed [31:0] tmp_22_cast_fu_531_p1;
wire    ap_block_pp0_stage5_flag00000000;
wire  signed [31:0] tmp_26_cast_fu_549_p1;
wire    ap_block_pp0_stage6_flag00000000;
wire  signed [31:0] tmp_17_cast_fu_567_p1;
wire    ap_block_pp0_stage7_flag00000000;
wire  signed [31:0] tmp_18_cast_fu_585_p1;
wire    ap_block_pp0_stage8_flag00000000;
wire   [31:0] tmp_23_cast_fu_802_p1;
wire   [5:0] grp_fu_303_p0;
wire   [6:0] grp_fu_303_p1;
wire   [11:0] tmp_7_fu_309_p3;
wire   [9:0] tmp_8_fu_321_p3;
wire   [12:0] p_shl4_cast_fu_317_p1;
wire   [12:0] p_shl5_cast_fu_329_p1;
wire   [11:0] tmp_3_fu_339_p3;
wire   [9:0] tmp_10_fu_350_p3;
wire   [12:0] p_shl2_cast_fu_346_p1;
wire   [12:0] p_shl3_cast_fu_357_p1;
wire   [11:0] tmp_13_fu_373_p3;
wire   [9:0] tmp_14_fu_385_p3;
wire   [12:0] p_shl_cast_fu_381_p1;
wire   [12:0] p_shl1_cast_fu_393_p1;
wire   [12:0] tmp_18_fu_413_p2;
wire   [12:0] tmp_19_fu_435_p2;
wire   [11:0] tmp_2_cast_cast6_fu_429_p1;
wire   [12:0] tmp_23_fu_459_p2;
wire   [12:0] tmp_20_fu_469_p2;
wire  signed [2:0] r_V_fu_486_p0;
wire   [7:0] r_V_fu_486_p1;
wire   [12:0] tmp_24_fu_504_p2;
wire  signed [2:0] r_V_0_2_fu_525_p0;
wire   [7:0] r_V_0_2_fu_525_p1;
wire  signed [2:0] r_V_1_fu_543_p0;
wire   [7:0] r_V_1_fu_543_p1;
wire  signed [2:0] r_V_1_2_fu_561_p0;
wire   [7:0] r_V_1_2_fu_561_p1;
wire  signed [2:0] r_V_2_1_fu_579_p0;
wire   [7:0] r_V_2_1_fu_579_p1;
wire  signed [2:0] r_V_2_fu_597_p0;
wire   [7:0] r_V_2_fu_597_p1;
wire  signed [2:0] r_V_2_2_fu_622_p0;
wire   [7:0] r_V_2_2_fu_622_p1;
wire  signed [11:0] tmp_1_cast_fu_631_p1;
wire  signed [11:0] tmp_0_2_cast_fu_628_p1;
wire   [11:0] tmp9_fu_663_p2;
wire  signed [12:0] tmp8_cast_fu_660_p1;
wire  signed [12:0] tmp9_cast_fu_669_p1;
wire  signed [11:0] grp_fu_814_p3;
wire  signed [11:0] tmp_2_2_cast_fu_657_p1;
wire  signed [11:0] tmp_2_1_cast_fu_654_p1;
wire   [11:0] tmp2_fu_682_p2;
wire  signed [12:0] tmp_2_cast_fu_648_p1;
wire  signed [12:0] tmp13_cast_fu_688_p1;
wire   [12:0] tmp3_fu_692_p2;
wire  signed [13:0] tmp11_cast_fu_679_p1;
wire  signed [13:0] tmp12_cast_fu_698_p1;
wire  signed [11:0] tmp_16_cast_fu_651_p1;
wire   [11:0] tmp5_fu_708_p2;
wire  signed [12:0] tmp15_cast_fu_714_p1;
wire  signed [12:0] tmp16_cast_fu_718_p1;
wire   [11:0] tmp12_fu_730_p2;
wire  signed [12:0] tmp_9_cast_fu_634_p1;
wire  signed [12:0] tmp20_cast_fu_736_p1;
wire   [12:0] tmp13_fu_740_p2;
wire  signed [13:0] tmp18_cast_fu_727_p1;
wire  signed [13:0] tmp19_cast_fu_746_p1;
wire  signed [14:0] tmp7_cast_fu_756_p1;
wire  signed [14:0] tmp10_cast_fu_759_p1;
wire   [14:0] temp_result_V_1_2_2_fu_762_p2;
wire  signed [14:0] tmp14_cast_fu_776_p1;
wire  signed [14:0] tmp17_cast_fu_779_p1;
wire   [14:0] tmp_s_fu_782_p2;
wire   [0:0] tmp_26_fu_768_p3;
wire   [14:0] tmp_5_fu_788_p2;
wire   [7:0] grp_fu_806_p1;
wire   [7:0] grp_fu_814_p1;
reg   [13:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_block_pp0_stage7_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [11:0] grp_fu_303_p00;
wire   [10:0] grp_fu_806_p10;
wire   [10:0] grp_fu_814_p10;
wire   [10:0] r_V_0_2_fu_525_p10;
wire   [10:0] r_V_1_2_fu_561_p10;
wire   [10:0] r_V_1_fu_543_p10;
wire   [10:0] r_V_2_1_fu_579_p10;
wire   [10:0] r_V_2_2_fu_622_p10;
wire   [10:0] r_V_2_fu_597_p10;
wire   [10:0] r_V_fu_486_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

differentiate_diff_io_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_DIFF_IO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_DIFF_IO_DATA_WIDTH ))
differentiate_diff_io_s_axi_U(
    .AWVALID(s_axi_diff_io_AWVALID),
    .AWREADY(s_axi_diff_io_AWREADY),
    .AWADDR(s_axi_diff_io_AWADDR),
    .WVALID(s_axi_diff_io_WVALID),
    .WREADY(s_axi_diff_io_WREADY),
    .WDATA(s_axi_diff_io_WDATA),
    .WSTRB(s_axi_diff_io_WSTRB),
    .ARVALID(s_axi_diff_io_ARVALID),
    .ARREADY(s_axi_diff_io_ARREADY),
    .ARADDR(s_axi_diff_io_ARADDR),
    .RVALID(s_axi_diff_io_RVALID),
    .RREADY(s_axi_diff_io_RREADY),
    .RDATA(s_axi_diff_io_RDATA),
    .RRESP(s_axi_diff_io_RRESP),
    .BVALID(s_axi_diff_io_BVALID),
    .BREADY(s_axi_diff_io_BREADY),
    .BRESP(s_axi_diff_io_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .img_address0(img_address0),
    .img_ce0(img_ce0),
    .img_q0(img_q0),
    .window_V_address0(window_V_address0),
    .window_V_ce0(window_V_ce0),
    .window_V_q0(window_V_q0)
);

differentiate_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
differentiate_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_303_p0),
    .din1(grp_fu_303_p1),
    .ce(1'b1),
    .dout(grp_fu_303_p2)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U1(
    .din0(reg_272),
    .din1(grp_fu_806_p1),
    .din2(r_V_reg_974),
    .dout(grp_fu_806_p3)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_maccud_U2(
    .din0(reg_272),
    .din1(grp_fu_814_p1),
    .din2(r_V_1_2_reg_1025),
    .dout(grp_fu_814_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011011 == 1'b0))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 ^ 1'b1);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_248 <= i_1_reg_903;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_248 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        j_reg_260 <= j_1_reg_952;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_260 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond2_reg_915 <= exitcond2_reg_915;
        exitcond2_reg_915 <= exitcond2_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_22_reg_947 <= tmp_22_reg_947;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_903 <= i_1_fu_367_p2;
        tmp_11_reg_891[12 : 4] <= tmp_11_fu_361_p2[12 : 4];
        tmp_12_reg_898 <= grp_fu_303_p2;
        tmp_15_reg_908[12 : 4] <= tmp_15_fu_397_p2[12 : 4];
        tmp_9_reg_884[12 : 4] <= tmp_9_fu_333_p2[12 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        j_1_cast_cast_reg_958[5 : 0] <= j_1_cast_cast_fu_456_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond2_reg_915 == 1'd0))) begin
        j_1_reg_952 <= j_1_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond2_fu_403_p2))) begin
        j_cast_cast_reg_919[5 : 0] <= j_cast_cast_fu_409_p1[5 : 0];
        tmp_2_reg_930 <= tmp_2_fu_423_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        r_V_0_2_reg_1004 <= r_V_0_2_fu_525_p2;
        tmp_16_reg_979 <= tmp_16_fu_492_p2;
        tmp_17_reg_984 <= tmp_17_fu_496_p2;
        tmp_21_reg_989 <= tmp_21_fu_500_p2;
        tmp_25_reg_999 <= tmp_25_fu_513_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0))) begin
        r_V_1_2_reg_1025 <= r_V_1_2_fu_561_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0))) begin
        r_V_1_reg_1014 <= r_V_1_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0))) begin
        r_V_2_1_reg_1035 <= r_V_2_1_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        r_V_2_2_reg_1051 <= r_V_2_2_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0))) begin
        r_V_2_reg_1045 <= r_V_2_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        r_V_reg_974 <= r_V_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond2_reg_915 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        reg_272 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond2_reg_915 == 1'd0)) | ((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        reg_276 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        reg_280 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)))) begin
        reg_284 <= window_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond2_reg_915))) begin
        tmp10_reg_1072 <= tmp10_fu_721_p2;
        tmp14_reg_1077 <= tmp14_fu_750_p2;
        tmp4_reg_1067 <= tmp4_fu_702_p2;
        tmp7_reg_1062 <= tmp7_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        tmp8_reg_1056 <= grp_fu_806_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (exitcond2_reg_915 == 1'd0))) begin
        tmp_22_reg_947 <= tmp_22_fu_445_p2;
        tmp_2_cast_cast_reg_936[5 : 0] <= tmp_2_cast_cast_fu_432_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond2_reg_915))) begin
        tmp_6_reg_1082 <= tmp_6_fu_794_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond1_fu_288_p2))) begin
        tmp_reg_872 <= tmp_fu_294_p2;
    end
end

always @ (*) begin
    if ((exitcond2_fu_403_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_288_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_288_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0))) begin
            img_address0 = tmp_18_cast_fu_585_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0))) begin
            img_address0 = tmp_17_cast_fu_567_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0))) begin
            img_address0 = tmp_26_cast_fu_549_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0))) begin
            img_address0 = tmp_22_cast_fu_531_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0))) begin
            img_address0 = tmp_25_cast_fu_508_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0))) begin
            img_address0 = tmp_21_cast_fu_473_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
            img_address0 = tmp_24_cast_fu_464_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            img_address0 = tmp_20_cast_fu_440_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            img_address0 = tmp_19_cast_fu_418_p1;
        end else begin
            img_address0 = 'bx;
        end
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_reg_915 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_264_p4 = j_1_reg_952;
    end else begin
        j_phi_fu_264_p4 = j_reg_260;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond2_reg_915))) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd4;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd8;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd7;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd6;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd5;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
            window_V_address0 = 32'd0;
        end else begin
            window_V_address0 = 'bx;
        end
    end else begin
        window_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0)))) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_288_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond2_fu_403_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (((ap_block_pp0_stage3_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage3_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage3_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_288_p2 = ((i_reg_248 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_403_p2 = ((j_phi_fu_264_p4 == 6'd47) ? 1'b1 : 1'b0);

assign grp_fu_303_p0 = grp_fu_303_p00;

assign grp_fu_303_p00 = tmp_reg_872;

assign grp_fu_303_p1 = 12'd46;

assign grp_fu_806_p1 = grp_fu_806_p10;

assign grp_fu_806_p10 = reg_280;

assign grp_fu_814_p1 = grp_fu_814_p10;

assign grp_fu_814_p10 = reg_276;

assign i_1_fu_367_p2 = (i_reg_248 + 6'd1);

assign j_1_cast_cast_fu_456_p1 = j_1_reg_952;

assign j_1_fu_450_p2 = (j_reg_260 + 6'd1);

assign j_cast_cast_fu_409_p1 = j_phi_fu_264_p4;

assign p_shl1_cast_fu_393_p1 = tmp_14_fu_385_p3;

assign p_shl2_cast_fu_346_p1 = tmp_3_fu_339_p3;

assign p_shl3_cast_fu_357_p1 = tmp_10_fu_350_p3;

assign p_shl4_cast_fu_317_p1 = tmp_7_fu_309_p3;

assign p_shl5_cast_fu_329_p1 = tmp_8_fu_321_p3;

assign p_shl_cast_fu_381_p1 = tmp_13_fu_373_p3;

assign r_V_0_2_fu_525_p0 = reg_284;

assign r_V_0_2_fu_525_p1 = r_V_0_2_fu_525_p10;

assign r_V_0_2_fu_525_p10 = reg_280;

assign r_V_0_2_fu_525_p2 = ($signed(r_V_0_2_fu_525_p0) * $signed({{1'b0}, {r_V_0_2_fu_525_p1}}));

assign r_V_1_2_fu_561_p0 = reg_284;

assign r_V_1_2_fu_561_p1 = r_V_1_2_fu_561_p10;

assign r_V_1_2_fu_561_p10 = reg_280;

assign r_V_1_2_fu_561_p2 = ($signed(r_V_1_2_fu_561_p0) * $signed({{1'b0}, {r_V_1_2_fu_561_p1}}));

assign r_V_1_fu_543_p0 = reg_272;

assign r_V_1_fu_543_p1 = r_V_1_fu_543_p10;

assign r_V_1_fu_543_p10 = reg_280;

assign r_V_1_fu_543_p2 = ($signed(r_V_1_fu_543_p0) * $signed({{1'b0}, {r_V_1_fu_543_p1}}));

assign r_V_2_1_fu_579_p0 = reg_284;

assign r_V_2_1_fu_579_p1 = r_V_2_1_fu_579_p10;

assign r_V_2_1_fu_579_p10 = reg_276;

assign r_V_2_1_fu_579_p2 = ($signed(r_V_2_1_fu_579_p0) * $signed({{1'b0}, {r_V_2_1_fu_579_p1}}));

assign r_V_2_2_fu_622_p0 = reg_284;

assign r_V_2_2_fu_622_p1 = r_V_2_2_fu_622_p10;

assign r_V_2_2_fu_622_p10 = reg_276;

assign r_V_2_2_fu_622_p2 = ($signed(r_V_2_2_fu_622_p0) * $signed({{1'b0}, {r_V_2_2_fu_622_p1}}));

assign r_V_2_fu_597_p0 = reg_272;

assign r_V_2_fu_597_p1 = r_V_2_fu_597_p10;

assign r_V_2_fu_597_p10 = reg_280;

assign r_V_2_fu_597_p2 = ($signed(r_V_2_fu_597_p0) * $signed({{1'b0}, {r_V_2_fu_597_p1}}));

assign r_V_fu_486_p0 = reg_272;

assign r_V_fu_486_p1 = r_V_fu_486_p10;

assign r_V_fu_486_p10 = reg_280;

assign r_V_fu_486_p2 = ($signed(r_V_fu_486_p0) * $signed({{1'b0}, {r_V_fu_486_p1}}));

assign res_V_address0 = tmp_23_cast_fu_802_p1;

assign res_V_d0 = tmp_6_reg_1082;

assign temp_result_V_1_2_2_fu_762_p2 = ($signed(tmp7_cast_fu_756_p1) + $signed(tmp10_cast_fu_759_p1));

assign tmp10_cast_fu_759_p1 = $signed(tmp4_reg_1067);

assign tmp10_fu_721_p2 = ($signed(tmp15_cast_fu_714_p1) + $signed(tmp16_cast_fu_718_p1));

assign tmp11_cast_fu_679_p1 = grp_fu_814_p3;

assign tmp12_cast_fu_698_p1 = $signed(tmp3_fu_692_p2);

assign tmp12_fu_730_p2 = ($signed(tmp_2_2_cast_fu_657_p1) + $signed(tmp_0_2_cast_fu_628_p1));

assign tmp13_cast_fu_688_p1 = $signed(tmp2_fu_682_p2);

assign tmp13_fu_740_p2 = ($signed(tmp_9_cast_fu_634_p1) + $signed(tmp20_cast_fu_736_p1));

assign tmp14_cast_fu_776_p1 = $signed(tmp10_reg_1072);

assign tmp14_fu_750_p2 = ($signed(tmp18_cast_fu_727_p1) + $signed(tmp19_cast_fu_746_p1));

assign tmp15_cast_fu_714_p1 = $signed(tmp5_fu_708_p2);

assign tmp16_cast_fu_718_p1 = grp_fu_814_p3;

assign tmp17_cast_fu_779_p1 = $signed(tmp14_reg_1077);

assign tmp18_cast_fu_727_p1 = tmp8_reg_1056;

assign tmp19_cast_fu_746_p1 = $signed(tmp13_fu_740_p2);

assign tmp20_cast_fu_736_p1 = $signed(tmp12_fu_730_p2);

assign tmp2_fu_682_p2 = ($signed(tmp_2_2_cast_fu_657_p1) + $signed(tmp_2_1_cast_fu_654_p1));

assign tmp3_fu_692_p2 = ($signed(tmp_2_cast_fu_648_p1) + $signed(tmp13_cast_fu_688_p1));

assign tmp4_fu_702_p2 = ($signed(tmp11_cast_fu_679_p1) + $signed(tmp12_cast_fu_698_p1));

assign tmp5_fu_708_p2 = ($signed(tmp_2_1_cast_fu_654_p1) + $signed(tmp_16_cast_fu_651_p1));

assign tmp7_cast_fu_756_p1 = $signed(tmp7_reg_1062);

assign tmp7_fu_673_p2 = ($signed(tmp8_cast_fu_660_p1) + $signed(tmp9_cast_fu_669_p1));

assign tmp8_cast_fu_660_p1 = tmp8_reg_1056;

assign tmp9_cast_fu_669_p1 = $signed(tmp9_fu_663_p2);

assign tmp9_fu_663_p2 = ($signed(tmp_1_cast_fu_631_p1) + $signed(tmp_0_2_cast_fu_628_p1));

assign tmp_0_2_cast_fu_628_p1 = $signed(r_V_0_2_reg_1004);

assign tmp_10_fu_350_p3 = {{tmp_reg_872}, {4'd0}};

assign tmp_11_fu_361_p2 = (p_shl2_cast_fu_346_p1 - p_shl3_cast_fu_357_p1);

assign tmp_13_fu_373_p3 = {{i_1_fu_367_p2}, {6'd0}};

assign tmp_14_fu_385_p3 = {{i_1_fu_367_p2}, {4'd0}};

assign tmp_15_fu_397_p2 = (p_shl_cast_fu_381_p1 - p_shl1_cast_fu_393_p1);

assign tmp_16_cast_fu_651_p1 = $signed(r_V_2_reg_1045);

assign tmp_16_fu_492_p2 = (tmp_11_reg_891 + j_cast_cast_reg_919);

assign tmp_17_cast_fu_567_p1 = $signed(tmp_16_reg_979);

assign tmp_17_fu_496_p2 = (tmp_9_reg_884 + j_cast_cast_reg_919);

assign tmp_18_cast_fu_585_p1 = $signed(tmp_17_reg_984);

assign tmp_18_fu_413_p2 = (tmp_15_reg_908 + j_cast_cast_fu_409_p1);

assign tmp_19_cast_fu_418_p1 = $signed(tmp_18_fu_413_p2);

assign tmp_19_fu_435_p2 = (tmp_11_reg_891 + tmp_2_cast_cast_fu_432_p1);

assign tmp_1_cast_fu_631_p1 = $signed(r_V_1_reg_1014);

assign tmp_20_cast_fu_440_p1 = $signed(tmp_19_fu_435_p2);

assign tmp_20_fu_469_p2 = (tmp_9_reg_884 + tmp_2_cast_cast_reg_936);

assign tmp_21_cast_fu_473_p1 = $signed(tmp_20_fu_469_p2);

assign tmp_21_fu_500_p2 = (tmp_15_reg_908 + tmp_2_cast_cast_reg_936);

assign tmp_22_cast_fu_531_p1 = $signed(tmp_21_reg_989);

assign tmp_22_fu_445_p2 = (tmp_12_reg_898 + tmp_2_cast_cast6_fu_429_p1);

assign tmp_23_cast_fu_802_p1 = ap_reg_pp0_iter1_tmp_22_reg_947;

assign tmp_23_fu_459_p2 = (tmp_11_reg_891 + j_1_cast_cast_fu_456_p1);

assign tmp_24_cast_fu_464_p1 = $signed(tmp_23_fu_459_p2);

assign tmp_24_fu_504_p2 = (tmp_9_reg_884 + j_1_cast_cast_reg_958);

assign tmp_25_cast_fu_508_p1 = $signed(tmp_24_fu_504_p2);

assign tmp_25_fu_513_p2 = (tmp_15_reg_908 + j_1_cast_cast_reg_958);

assign tmp_26_cast_fu_549_p1 = $signed(tmp_25_reg_999);

assign tmp_26_fu_768_p3 = temp_result_V_1_2_2_fu_762_p2[32'd14];

assign tmp_2_1_cast_fu_654_p1 = $signed(r_V_2_1_reg_1035);

assign tmp_2_2_cast_fu_657_p1 = $signed(r_V_2_2_reg_1051);

assign tmp_2_cast_cast6_fu_429_p1 = tmp_2_reg_930;

assign tmp_2_cast_cast_fu_432_p1 = tmp_2_reg_930;

assign tmp_2_cast_fu_648_p1 = $signed(r_V_2_reg_1045);

assign tmp_2_fu_423_p2 = ($signed(j_phi_fu_264_p4) + $signed(6'd63));

assign tmp_3_fu_339_p3 = {{tmp_reg_872}, {6'd0}};

assign tmp_5_fu_788_p2 = (15'd0 - tmp_s_fu_782_p2);

assign tmp_6_fu_794_p3 = ((tmp_26_fu_768_p3[0:0] === 1'b1) ? tmp_5_fu_788_p2 : tmp_s_fu_782_p2);

assign tmp_7_fu_309_p3 = {{i_reg_248}, {6'd0}};

assign tmp_8_fu_321_p3 = {{i_reg_248}, {4'd0}};

assign tmp_9_cast_fu_634_p1 = $signed(r_V_1_reg_1014);

assign tmp_9_fu_333_p2 = (p_shl4_cast_fu_317_p1 - p_shl5_cast_fu_329_p1);

assign tmp_fu_294_p2 = ($signed(i_reg_248) + $signed(6'd63));

assign tmp_s_fu_782_p2 = ($signed(tmp14_cast_fu_776_p1) + $signed(tmp17_cast_fu_779_p1));

always @ (posedge ap_clk) begin
    tmp_9_reg_884[3:0] <= 4'b0000;
    tmp_11_reg_891[3:0] <= 4'b0000;
    tmp_15_reg_908[3:0] <= 4'b0000;
    j_cast_cast_reg_919[12:6] <= 7'b0000000;
    tmp_2_cast_cast_reg_936[12:6] <= 7'b0000000;
    j_1_cast_cast_reg_958[12:6] <= 7'b0000000;
end

endmodule //differentiate
