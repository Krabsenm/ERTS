// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="differentiate,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=68697,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=765,HLS_SYN_LUT=502}" *)

module differentiate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        img_address0,
        img_ce0,
        img_q0,
        img_address1,
        img_ce1,
        img_q1,
        window_V_address0,
        window_V_ce0,
        window_V_q0,
        window_V_address1,
        window_V_ce1,
        window_V_q1,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] img_address0;
output   img_ce0;
input  [7:0] img_q0;
output  [11:0] img_address1;
output   img_ce1;
input  [7:0] img_q1;
output  [3:0] window_V_address0;
output   window_V_ce0;
input  [2:0] window_V_q0;
output  [3:0] window_V_address1;
output   window_V_ce1;
input  [2:0] window_V_q1;
output  [11:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [14:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] img_address0;
reg img_ce0;
reg img_ce1;
reg[3:0] window_V_address0;
reg window_V_ce0;
reg window_V_ce1;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_fu_191_p2;
reg   [5:0] tmp_reg_464;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_185_p2;
wire    ap_CS_fsm_state3;
wire   [11:0] grp_fu_200_p2;
reg   [11:0] tmp_8_reg_475;
wire    ap_CS_fsm_state4;
wire   [12:0] j_cast4_cast_fu_206_p1;
reg   [12:0] j_cast4_cast_reg_480;
wire    ap_CS_fsm_state5;
wire   [12:0] tmp_2_cast_cast3_fu_222_p1;
reg   [12:0] tmp_2_cast_cast3_reg_488;
wire   [0:0] exitcond2_fu_210_p2;
reg   [11:0] res_V_addr_reg_493;
wire   [5:0] j_1_fu_240_p2;
reg   [5:0] j_1_reg_498;
wire   [12:0] tmp_9_2_cast_cast_fu_246_p1;
reg   [12:0] tmp_9_2_cast_cast_reg_503;
wire   [5:0] i_1_fu_250_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] window_V_addr_1_reg_518;
reg   [3:0] window_V_addr_2_reg_523;
wire   [1:0] ii_1_fu_315_p2;
reg   [1:0] ii_1_reg_531;
wire   [12:0] tmp_16_fu_356_p2;
reg   [12:0] tmp_16_reg_536;
wire   [0:0] exitcond3_fu_309_p2;
wire   [12:0] tmp_17_fu_361_p2;
reg   [12:0] tmp_17_reg_541;
wire   [12:0] tmp_18_fu_366_p2;
reg   [12:0] tmp_18_reg_546;
wire   [14:0] tmp_6_fu_371_p2;
reg   [14:0] tmp_6_reg_551;
wire    ap_CS_fsm_state7;
reg  signed [2:0] window_V_load_reg_566;
wire    ap_CS_fsm_state8;
reg   [7:0] img_load_reg_576;
reg   [7:0] img_load_1_reg_581;
reg  signed [2:0] window_V_load_1_reg_586;
reg   [2:0] window_V_load_2_reg_591;
reg   [7:0] img_load_2_reg_596;
wire    ap_CS_fsm_state9;
wire   [10:0] r_V_2_fu_395_p2;
reg  signed [10:0] r_V_2_reg_601;
wire    ap_CS_fsm_state10;
wire  signed [12:0] grp_fu_444_p3;
reg  signed [12:0] tmp_5_reg_606;
wire    ap_CS_fsm_state11;
wire   [14:0] temp_result_V_1_2_fu_422_p2;
wire    ap_CS_fsm_state12;
reg   [5:0] i_reg_139;
reg   [5:0] j_reg_151;
wire    ap_CS_fsm_state13;
reg   [14:0] p_s_reg_162;
reg   [1:0] ii_reg_174;
wire   [31:0] tmp_9_cast_fu_235_p1;
wire  signed [31:0] tmp_11_cast_fu_282_p1;
wire  signed [31:0] tmp_12_cast_fu_293_p1;
wire  signed [31:0] tmp_13_cast_fu_304_p1;
wire  signed [31:0] tmp_17_cast_fu_377_p1;
wire  signed [31:0] tmp_18_cast_fu_381_p1;
wire  signed [31:0] tmp_19_cast_fu_385_p1;
wire   [5:0] grp_fu_200_p0;
wire   [6:0] grp_fu_200_p1;
wire   [5:0] tmp_2_fu_216_p2;
wire   [11:0] tmp_2_cast_cast_fu_226_p1;
wire   [11:0] tmp_9_fu_230_p2;
wire   [3:0] tmp_s_fu_264_p3;
wire   [4:0] p_shl_cast_fu_272_p1;
wire   [4:0] ii_cast2_cast_fu_260_p1;
wire   [4:0] tmp_3_fu_276_p2;
wire   [4:0] tmp_10_fu_287_p2;
wire   [4:0] tmp_11_fu_298_p2;
wire   [5:0] ii_cast3_fu_256_p1;
wire   [5:0] sum_fu_321_p2;
wire   [11:0] tmp_13_fu_326_p3;
wire   [9:0] tmp_14_fu_338_p3;
wire   [12:0] p_shl1_cast_fu_334_p1;
wire   [12:0] p_shl2_cast_fu_346_p1;
wire   [12:0] tmp_15_fu_350_p2;
wire  signed [2:0] r_V_2_fu_395_p0;
wire   [7:0] r_V_2_fu_395_p1;
wire  signed [11:0] grp_fu_452_p3;
wire  signed [14:0] p_cast_fu_419_p1;
wire   [0:0] tmp_12_fu_428_p3;
wire   [7:0] grp_fu_444_p1;
wire   [7:0] grp_fu_452_p1;
reg   [12:0] ap_NS_fsm;
wire   [11:0] grp_fu_200_p00;
wire   [10:0] grp_fu_444_p10;
wire   [10:0] grp_fu_452_p10;
wire   [10:0] r_V_2_fu_395_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

differentiate_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 12 ))
differentiate_mulbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_200_p0),
    .din1(grp_fu_200_p1),
    .ce(1'b1),
    .dout(grp_fu_200_p2)
);

differentiate_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 13 ))
differentiate_maccud_U1(
    .din0(window_V_load_reg_566),
    .din1(grp_fu_444_p1),
    .din2(grp_fu_452_p3),
    .dout(grp_fu_444_p3)
);

differentiate_macdEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 12 ))
differentiate_macdEe_U2(
    .din0(window_V_load_1_reg_586),
    .din1(grp_fu_452_p1),
    .din2(r_V_2_reg_601),
    .dout(grp_fu_452_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_210_p2 == 1'd1))) begin
        i_reg_139 <= i_1_fu_250_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_139 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ii_reg_174 <= ii_1_reg_531;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_210_p2))) begin
        ii_reg_174 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_151 <= j_1_reg_498;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_151 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_s_reg_162 <= temp_result_V_1_2_fu_422_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_210_p2))) begin
        p_s_reg_162 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ii_1_reg_531 <= ii_1_fu_315_p2;
        window_V_addr_1_reg_518 <= tmp_12_cast_fu_293_p1;
        window_V_addr_2_reg_523 <= tmp_13_cast_fu_304_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_load_1_reg_581 <= img_q1;
        img_load_reg_576 <= img_q0;
        window_V_load_1_reg_586 <= window_V_q0;
        window_V_load_2_reg_591 <= window_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        img_load_2_reg_596 <= img_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond2_fu_210_p2))) begin
        j_1_reg_498 <= j_1_fu_240_p2;
        res_V_addr_reg_493 <= tmp_9_cast_fu_235_p1;
        tmp_2_cast_cast3_reg_488[5 : 0] <= tmp_2_cast_cast3_fu_222_p1[5 : 0];
        tmp_9_2_cast_cast_reg_503[5 : 0] <= tmp_9_2_cast_cast_fu_246_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_cast4_cast_reg_480[5 : 0] <= j_cast4_cast_fu_206_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        r_V_2_reg_601 <= r_V_2_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond3_fu_309_p2))) begin
        tmp_16_reg_536 <= tmp_16_fu_356_p2;
        tmp_17_reg_541 <= tmp_17_fu_361_p2;
        tmp_18_reg_546 <= tmp_18_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_5_reg_606 <= grp_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond3_fu_309_p2))) begin
        tmp_6_reg_551 <= tmp_6_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_8_reg_475 <= grp_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_185_p2 == 1'd0))) begin
        tmp_reg_464 <= tmp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_load_reg_566 <= window_V_q0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_185_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_185_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_address0 = tmp_19_cast_fu_385_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        img_address0 = tmp_17_cast_fu_377_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        img_ce1 = 1'b1;
    end else begin
        img_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_address0 = window_V_addr_1_reg_518;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        window_V_address0 = tmp_11_cast_fu_282_p1;
    end else begin
        window_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        window_V_ce0 = 1'b1;
    end else begin
        window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        window_V_ce1 = 1'b1;
    end else begin
        window_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_185_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond2_fu_210_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond3_fu_309_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_185_p2 = ((i_reg_139 == 6'd63) ? 1'b1 : 1'b0);

assign exitcond2_fu_210_p2 = ((j_reg_151 == 6'd47) ? 1'b1 : 1'b0);

assign exitcond3_fu_309_p2 = ((ii_reg_174 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_200_p0 = grp_fu_200_p00;

assign grp_fu_200_p00 = tmp_reg_464;

assign grp_fu_200_p1 = 12'd46;

assign grp_fu_444_p1 = grp_fu_444_p10;

assign grp_fu_444_p10 = img_load_reg_576;

assign grp_fu_452_p1 = grp_fu_452_p10;

assign grp_fu_452_p10 = img_load_1_reg_581;

assign i_1_fu_250_p2 = (i_reg_139 + 6'd1);

assign ii_1_fu_315_p2 = (ii_reg_174 + 2'd1);

assign ii_cast2_cast_fu_260_p1 = ii_reg_174;

assign ii_cast3_fu_256_p1 = ii_reg_174;

assign img_address1 = tmp_18_cast_fu_381_p1;

assign j_1_fu_240_p2 = (j_reg_151 + 6'd1);

assign j_cast4_cast_fu_206_p1 = j_reg_151;

assign p_cast_fu_419_p1 = tmp_5_reg_606;

assign p_shl1_cast_fu_334_p1 = tmp_13_fu_326_p3;

assign p_shl2_cast_fu_346_p1 = tmp_14_fu_338_p3;

assign p_shl_cast_fu_272_p1 = tmp_s_fu_264_p3;

assign r_V_2_fu_395_p0 = window_V_load_2_reg_591;

assign r_V_2_fu_395_p1 = r_V_2_fu_395_p10;

assign r_V_2_fu_395_p10 = img_load_2_reg_596;

assign r_V_2_fu_395_p2 = ($signed(r_V_2_fu_395_p0) * $signed({{1'b0}, {r_V_2_fu_395_p1}}));

assign res_V_address0 = res_V_addr_reg_493;

assign res_V_d0 = ((tmp_12_fu_428_p3[0:0] === 1'b1) ? tmp_6_reg_551 : p_s_reg_162);

assign sum_fu_321_p2 = (tmp_reg_464 + ii_cast3_fu_256_p1);

assign temp_result_V_1_2_fu_422_p2 = ($signed(p_cast_fu_419_p1) + $signed(p_s_reg_162));

assign tmp_10_fu_287_p2 = (tmp_3_fu_276_p2 + 5'd1);

assign tmp_11_cast_fu_282_p1 = $signed(tmp_3_fu_276_p2);

assign tmp_11_fu_298_p2 = (tmp_3_fu_276_p2 + 5'd2);

assign tmp_12_cast_fu_293_p1 = $signed(tmp_10_fu_287_p2);

assign tmp_12_fu_428_p3 = p_s_reg_162[32'd14];

assign tmp_13_cast_fu_304_p1 = $signed(tmp_11_fu_298_p2);

assign tmp_13_fu_326_p3 = {{sum_fu_321_p2}, {6'd0}};

assign tmp_14_fu_338_p3 = {{sum_fu_321_p2}, {4'd0}};

assign tmp_15_fu_350_p2 = (p_shl1_cast_fu_334_p1 - p_shl2_cast_fu_346_p1);

assign tmp_16_fu_356_p2 = (tmp_15_fu_350_p2 + tmp_2_cast_cast3_reg_488);

assign tmp_17_cast_fu_377_p1 = $signed(tmp_16_reg_536);

assign tmp_17_fu_361_p2 = (tmp_15_fu_350_p2 + j_cast4_cast_reg_480);

assign tmp_18_cast_fu_381_p1 = $signed(tmp_17_reg_541);

assign tmp_18_fu_366_p2 = (tmp_15_fu_350_p2 + tmp_9_2_cast_cast_reg_503);

assign tmp_19_cast_fu_385_p1 = $signed(tmp_18_reg_546);

assign tmp_2_cast_cast3_fu_222_p1 = tmp_2_fu_216_p2;

assign tmp_2_cast_cast_fu_226_p1 = tmp_2_fu_216_p2;

assign tmp_2_fu_216_p2 = ($signed(j_reg_151) + $signed(6'd63));

assign tmp_3_fu_276_p2 = (p_shl_cast_fu_272_p1 - ii_cast2_cast_fu_260_p1);

assign tmp_6_fu_371_p2 = (15'd0 - p_s_reg_162);

assign tmp_9_2_cast_cast_fu_246_p1 = j_1_fu_240_p2;

assign tmp_9_cast_fu_235_p1 = tmp_9_fu_230_p2;

assign tmp_9_fu_230_p2 = (tmp_8_reg_475 + tmp_2_cast_cast_fu_226_p1);

assign tmp_fu_191_p2 = ($signed(i_reg_139) + $signed(6'd63));

assign tmp_s_fu_264_p3 = {{ii_reg_174}, {2'd0}};

assign window_V_address1 = window_V_addr_2_reg_523;

always @ (posedge ap_clk) begin
    j_cast4_cast_reg_480[12:6] <= 7'b0000000;
    tmp_2_cast_cast3_reg_488[12:6] <= 7'b0000000;
    tmp_9_2_cast_cast_reg_503[12:6] <= 7'b0000000;
end

endmodule //differentiate
