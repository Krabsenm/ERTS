// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iosc_iosPulseThread (
        ap_clk,
        ap_rst,
        iosc_secCounter_V_i,
        iosc_secCounter_V_o,
        iosc_secCounter_V_o_ap_vld,
        iosc_counter_clk_V_i,
        iosc_counter_clk_V_o,
        iosc_counter_clk_V_o_ap_vld
);

parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [3:0] iosc_secCounter_V_i;
output  [3:0] iosc_secCounter_V_o;
output   iosc_secCounter_V_o_ap_vld;
input  [31:0] iosc_counter_clk_V_i;
output  [31:0] iosc_counter_clk_V_o;
output   iosc_counter_clk_V_o_ap_vld;

reg iosc_secCounter_V_o_ap_vld;
reg[31:0] iosc_counter_clk_V_o;
reg iosc_counter_clk_V_o_ap_vld;

wire   [0:0] tmp_2_fu_118_p2;
reg   [0:0] tmp_2_reg_131;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [31:0] iosc_counter_clk_V_a_fu_111_p2;
wire    ap_CS_fsm_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_2_reg_131 <= tmp_2_fu_118_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_131 == 1'd1))) begin
        iosc_counter_clk_V_o = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        iosc_counter_clk_V_o = iosc_counter_clk_V_a_fu_111_p2;
    end else begin
        iosc_counter_clk_V_o = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_131 == 1'd1)))) begin
        iosc_counter_clk_V_o_ap_vld = 1'b1;
    end else begin
        iosc_counter_clk_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_reg_131 == 1'd1))) begin
        iosc_secCounter_V_o_ap_vld = 1'b1;
    end else begin
        iosc_secCounter_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign iosc_counter_clk_V_a_fu_111_p2 = (iosc_counter_clk_V_i + 32'd1);

assign iosc_secCounter_V_o = (iosc_secCounter_V_i + 4'd1);

assign tmp_2_fu_118_p2 = ((iosc_counter_clk_V_a_fu_111_p2 > 32'd49999999) ? 1'b1 : 1'b0);

endmodule //iosc_iosPulseThread
