// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iosc,hls_ip_2017_2,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.162000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=171,HLS_SYN_LUT=155}" *)

module iosc (
        clk,
        reset,
        ctrl,
        inSwitch,
        outLeds
);


input   clk;
input   reset;
input  [3:0] ctrl;
input  [3:0] inSwitch;
output  [3:0] outLeds;

reg[3:0] outLeds;

wire   [0:0] iosc_ssdm_thread_s_load_fu_152_p1;
wire   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] grp_iosc_iosPulseThread_fu_108_iosc_secCounter_V_o;
wire    grp_iosc_iosPulseThread_fu_108_iosc_secCounter_V_o_ap_vld;
wire   [31:0] grp_iosc_iosPulseThread_fu_108_iosc_counter_clk_V_o;
wire    grp_iosc_iosPulseThread_fu_108_iosc_counter_clk_V_o_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_130_outLeds;
wire    grp_iosc_iosThread_fu_130_outLeds_ap_vld;
wire   [3:0] grp_iosc_iosThread_fu_130_iosc_switchs_V;
wire    grp_iosc_iosThread_fu_130_iosc_switchs_V_ap_vld;
wire    ap_CS_fsm_state2;
reg   [3:0] iosc_secCounter_V;
reg   [31:0] iosc_counter_clk_V;
wire   [0:0] iosc_ssdm_thread_1_load_fu_156_p1;

iosc_iosPulseThread grp_iosc_iosPulseThread_fu_108(
    .ap_clk(clk),
    .ap_rst(reset),
    .iosc_secCounter_V_i(iosc_secCounter_V),
    .iosc_secCounter_V_o(grp_iosc_iosPulseThread_fu_108_iosc_secCounter_V_o),
    .iosc_secCounter_V_o_ap_vld(grp_iosc_iosPulseThread_fu_108_iosc_secCounter_V_o_ap_vld),
    .iosc_counter_clk_V_i(iosc_counter_clk_V),
    .iosc_counter_clk_V_o(grp_iosc_iosPulseThread_fu_108_iosc_counter_clk_V_o),
    .iosc_counter_clk_V_o_ap_vld(grp_iosc_iosPulseThread_fu_108_iosc_counter_clk_V_o_ap_vld)
);

iosc_iosThread grp_iosc_iosThread_fu_130(
    .ap_clk(clk),
    .ap_rst(reset),
    .ctrl(ctrl),
    .inSwitch(inSwitch),
    .outLeds(grp_iosc_iosThread_fu_130_outLeds),
    .outLeds_ap_vld(grp_iosc_iosThread_fu_130_outLeds_ap_vld),
    .iosc_switchs_V(grp_iosc_iosThread_fu_130_iosc_switchs_V),
    .iosc_switchs_V_ap_vld(grp_iosc_iosThread_fu_130_iosc_switchs_V_ap_vld),
    .iosc_secCounter_V(iosc_secCounter_V)
);

always @ (posedge clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == iosc_ssdm_thread_s_load_fu_152_p1) & (1'd0 == iosc_ssdm_thread_1_load_fu_156_p1))) begin
        iosc_counter_clk_V <= 32'd0;
    end else if ((1'b1 == grp_iosc_iosPulseThread_fu_108_iosc_counter_clk_V_o_ap_vld)) begin
        iosc_counter_clk_V <= grp_iosc_iosPulseThread_fu_108_iosc_counter_clk_V_o;
    end
end

always @ (posedge clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == iosc_ssdm_thread_s_load_fu_152_p1) & (1'd0 == iosc_ssdm_thread_1_load_fu_156_p1))) begin
        iosc_secCounter_V <= 4'd0;
    end else if ((1'b1 == grp_iosc_iosPulseThread_fu_108_iosc_secCounter_V_o_ap_vld)) begin
        iosc_secCounter_V <= grp_iosc_iosPulseThread_fu_108_iosc_secCounter_V_o;
    end
end

always @ (posedge clk) begin
    if ((1'b1 == grp_iosc_iosThread_fu_130_outLeds_ap_vld)) begin
        outLeds <= grp_iosc_iosThread_fu_130_outLeds;
    end
end

assign ap_CS_fsm = 2'd0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign iosc_ssdm_thread_1_load_fu_156_p1 = 1'd0;

assign iosc_ssdm_thread_s_load_fu_152_p1 = 1'd0;

endmodule //iosc
