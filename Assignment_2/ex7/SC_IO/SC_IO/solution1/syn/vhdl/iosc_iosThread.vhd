-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iosc_iosThread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ctrl : IN STD_LOGIC_VECTOR (3 downto 0);
    inSwitch : IN STD_LOGIC_VECTOR (3 downto 0);
    outLeds : OUT STD_LOGIC_VECTOR (3 downto 0);
    outLeds_ap_vld : OUT STD_LOGIC;
    iosc_switchs_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    iosc_switchs_V_ap_vld : OUT STD_LOGIC;
    iosc_secCounter_V : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of iosc_iosThread is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_138 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_fu_131_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_V_phi_fu_117_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal v_V_reg_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    v_V_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_fu_125_p2 = ap_const_lv1_1))) then 
                v_V_reg_114 <= iosc_secCounter_V;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_138 = ap_const_lv1_0))) then 
                v_V_reg_114 <= r_V_fu_131_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                tmp_reg_138 <= tmp_fu_125_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    iosc_switchs_V <= v_V_phi_fu_117_p4;

    iosc_switchs_V_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            iosc_switchs_V_ap_vld <= ap_const_logic_1;
        else 
            iosc_switchs_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    outLeds <= v_V_phi_fu_117_p4;

    outLeds_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            outLeds_ap_vld <= ap_const_logic_1;
        else 
            outLeds_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_V_fu_131_p2 <= (ctrl and inSwitch);
    tmp_fu_125_p2 <= "1" when (ctrl = ap_const_lv4_0) else "0";

    v_V_phi_fu_117_p4_assign_proc : process(tmp_reg_138, r_V_fu_131_p2, v_V_reg_114, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_reg_138 = ap_const_lv1_0))) then 
            v_V_phi_fu_117_p4 <= r_V_fu_131_p2;
        else 
            v_V_phi_fu_117_p4 <= v_V_reg_114;
        end if; 
    end process;

end behav;
