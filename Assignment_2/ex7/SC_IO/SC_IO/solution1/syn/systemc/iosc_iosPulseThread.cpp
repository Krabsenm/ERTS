// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "iosc_iosPulseThread.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic iosc_iosPulseThread::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic iosc_iosPulseThread::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> iosc_iosPulseThread::ap_ST_fsm_state2 = "10";
const sc_lv<3> iosc_iosPulseThread::ap_ST_fsm_state3 = "100";
const sc_lv<32> iosc_iosPulseThread::ap_const_lv32_1 = "1";
const sc_lv<32> iosc_iosPulseThread::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> iosc_iosPulseThread::ap_const_lv32_2 = "10";
const sc_lv<1> iosc_iosPulseThread::ap_const_lv1_1 = "1";
const sc_lv<32> iosc_iosPulseThread::ap_const_lv32_2FAF07F = "10111110101111000001111111";
const sc_lv<4> iosc_iosPulseThread::ap_const_lv4_1 = "1";
const bool iosc_iosPulseThread::ap_const_boolean_1 = true;

iosc_iosPulseThread::iosc_iosPulseThread(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_iosc_counter_clk_V_a_fu_111_p2);
    sensitive << ( iosc_counter_clk_V_i );

    SC_METHOD(thread_iosc_counter_clk_V_o);
    sensitive << ( tmp_2_reg_131 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( iosc_counter_clk_V_a_fu_111_p2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_iosc_counter_clk_V_o_ap_vld);
    sensitive << ( tmp_2_reg_131 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_iosc_secCounter_V_o);
    sensitive << ( iosc_secCounter_V_i );
    sensitive << ( tmp_2_reg_131 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_iosc_secCounter_V_o_ap_vld);
    sensitive << ( tmp_2_reg_131 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_2_fu_118_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( iosc_counter_clk_V_a_fu_111_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "iosc_iosPulseThread_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, iosc_secCounter_V_i, "(port)iosc_secCounter_V_i");
    sc_trace(mVcdFile, iosc_secCounter_V_o, "(port)iosc_secCounter_V_o");
    sc_trace(mVcdFile, iosc_secCounter_V_o_ap_vld, "(port)iosc_secCounter_V_o_ap_vld");
    sc_trace(mVcdFile, iosc_counter_clk_V_i, "(port)iosc_counter_clk_V_i");
    sc_trace(mVcdFile, iosc_counter_clk_V_o, "(port)iosc_counter_clk_V_o");
    sc_trace(mVcdFile, iosc_counter_clk_V_o_ap_vld, "(port)iosc_counter_clk_V_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_2_fu_118_p2, "tmp_2_fu_118_p2");
    sc_trace(mVcdFile, tmp_2_reg_131, "tmp_2_reg_131");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, iosc_counter_clk_V_a_fu_111_p2, "iosc_counter_clk_V_a_fu_111_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

iosc_iosPulseThread::~iosc_iosPulseThread() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void iosc_iosPulseThread::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_2_reg_131 = tmp_2_fu_118_p2.read();
    }
}

void iosc_iosPulseThread::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void iosc_iosPulseThread::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void iosc_iosPulseThread::thread_iosc_counter_clk_V_a_fu_111_p2() {
    iosc_counter_clk_V_a_fu_111_p2 = (!iosc_counter_clk_V_i.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(iosc_counter_clk_V_i.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void iosc_iosPulseThread::thread_iosc_counter_clk_V_o() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_131.read(), ap_const_lv1_1))) {
        iosc_counter_clk_V_o = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        iosc_counter_clk_V_o = iosc_counter_clk_V_a_fu_111_p2.read();
    } else {
        iosc_counter_clk_V_o = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void iosc_iosPulseThread::thread_iosc_counter_clk_V_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_2_reg_131.read(), ap_const_lv1_1)))) {
        iosc_counter_clk_V_o_ap_vld = ap_const_logic_1;
    } else {
        iosc_counter_clk_V_o_ap_vld = ap_const_logic_0;
    }
}

void iosc_iosPulseThread::thread_iosc_secCounter_V_o() {
    iosc_secCounter_V_o = (!iosc_secCounter_V_i.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(iosc_secCounter_V_i.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void iosc_iosPulseThread::thread_iosc_secCounter_V_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_reg_131.read(), ap_const_lv1_1))) {
        iosc_secCounter_V_o_ap_vld = ap_const_logic_1;
    } else {
        iosc_secCounter_V_o_ap_vld = ap_const_logic_0;
    }
}

void iosc_iosPulseThread::thread_tmp_2_fu_118_p2() {
    tmp_2_fu_118_p2 = (!iosc_counter_clk_V_a_fu_111_p2.read().is_01() || !ap_const_lv32_2FAF07F.is_01())? sc_lv<1>(): (sc_biguint<32>(iosc_counter_clk_V_a_fu_111_p2.read()) > sc_biguint<32>(ap_const_lv32_2FAF07F));
}

void iosc_iosPulseThread::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

