// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "iosc_iosThread.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic iosc_iosThread::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic iosc_iosThread::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state2 = "10";
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state3 = "100";
const sc_lv<4> iosc_iosThread::ap_ST_fsm_state4 = "1000";
const sc_lv<32> iosc_iosThread::ap_const_lv32_2 = "10";
const sc_lv<1> iosc_iosThread::ap_const_lv1_1 = "1";
const sc_lv<32> iosc_iosThread::ap_const_lv32_3 = "11";
const sc_lv<1> iosc_iosThread::ap_const_lv1_0 = "0";
const sc_lv<4> iosc_iosThread::ap_const_lv4_0 = "0000";
const bool iosc_iosThread::ap_const_boolean_1 = true;

iosc_iosThread::iosc_iosThread(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_iosc_switchs_V);
    sensitive << ( v_V_phi_fu_117_p4 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_iosc_switchs_V_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_outLeds);
    sensitive << ( v_V_phi_fu_117_p4 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_outLeds_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_V_fu_131_p2);
    sensitive << ( ctrl );
    sensitive << ( inSwitch );

    SC_METHOD(thread_tmp_fu_125_p2);
    sensitive << ( ctrl );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_v_V_phi_fu_117_p4);
    sensitive << ( tmp_reg_138 );
    sensitive << ( r_V_fu_131_p2 );
    sensitive << ( v_V_reg_114 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "0010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "iosc_iosThread_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ctrl, "(port)ctrl");
    sc_trace(mVcdFile, inSwitch, "(port)inSwitch");
    sc_trace(mVcdFile, outLeds, "(port)outLeds");
    sc_trace(mVcdFile, outLeds_ap_vld, "(port)outLeds_ap_vld");
    sc_trace(mVcdFile, iosc_switchs_V, "(port)iosc_switchs_V");
    sc_trace(mVcdFile, iosc_switchs_V_ap_vld, "(port)iosc_switchs_V_ap_vld");
    sc_trace(mVcdFile, iosc_secCounter_V, "(port)iosc_secCounter_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_125_p2, "tmp_fu_125_p2");
    sc_trace(mVcdFile, tmp_reg_138, "tmp_reg_138");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, r_V_fu_131_p2, "r_V_fu_131_p2");
    sc_trace(mVcdFile, v_V_phi_fu_117_p4, "v_V_phi_fu_117_p4");
    sc_trace(mVcdFile, v_V_reg_114, "v_V_reg_114");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

iosc_iosThread::~iosc_iosThread() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void iosc_iosThread::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_125_p2.read(), ap_const_lv1_1))) {
        v_V_reg_114 = iosc_secCounter_V.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(tmp_reg_138.read(), ap_const_lv1_0))) {
        v_V_reg_114 = r_V_fu_131_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_reg_138 = tmp_fu_125_p2.read();
    }
}

void iosc_iosThread::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void iosc_iosThread::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void iosc_iosThread::thread_iosc_switchs_V() {
    iosc_switchs_V = v_V_phi_fu_117_p4.read();
}

void iosc_iosThread::thread_iosc_switchs_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        iosc_switchs_V_ap_vld = ap_const_logic_1;
    } else {
        iosc_switchs_V_ap_vld = ap_const_logic_0;
    }
}

void iosc_iosThread::thread_outLeds() {
    outLeds = v_V_phi_fu_117_p4.read();
}

void iosc_iosThread::thread_outLeds_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        outLeds_ap_vld = ap_const_logic_1;
    } else {
        outLeds_ap_vld = ap_const_logic_0;
    }
}

void iosc_iosThread::thread_r_V_fu_131_p2() {
    r_V_fu_131_p2 = (ctrl.read() & inSwitch.read());
}

void iosc_iosThread::thread_tmp_fu_125_p2() {
    tmp_fu_125_p2 = (!ctrl.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(ctrl.read() == ap_const_lv4_0);
}

void iosc_iosThread::thread_v_V_phi_fu_117_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(tmp_reg_138.read(), ap_const_lv1_0))) {
        v_V_phi_fu_117_p4 = r_V_fu_131_p2.read();
    } else {
        v_V_phi_fu_117_p4 = v_V_reg_114.read();
    }
}

void iosc_iosThread::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

